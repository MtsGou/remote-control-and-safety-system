
FIRMWARE_SINC_FREIOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001348  0800ee20  0800ee20  0001ee20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010168  08010168  00030244  2**0
                  CONTENTS
  4 .ARM          00000008  08010168  08010168  00020168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010170  08010170  00030244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010170  08010170  00020170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010174  08010174  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08010178  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a24  20000244  080103bc  00030244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c68  080103bc  00030c68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001efc1  00000000  00000000  00030274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000390d  00000000  00000000  0004f235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00052b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  00053f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029eef  00000000  00000000  00055180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184fe  00000000  00000000  0007f06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7c70  00000000  00000000  0009756d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018f1dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006818  00000000  00000000  0018f230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000244 	.word	0x20000244
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ee04 	.word	0x0800ee04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000248 	.word	0x20000248
 80001cc:	0800ee04 	.word	0x0800ee04

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b9a4 	b.w	8000fb8 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f83c 	bl	8000cf4 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff33 	bl	8000afc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fca9 	bl	8000618 <__aeabi_dmul>
 8000cc6:	f7ff ff57 	bl	8000b78 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc2a 	bl	8000524 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fca0 	bl	8000618 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fae2 	bl	80002a8 <__aeabi_dsub>
 8000ce4:	f7ff ff48 	bl	8000b78 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9d08      	ldr	r5, [sp, #32]
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	468c      	mov	ip, r1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 8083 	bne.w	8000e0a <__udivmoddi4+0x116>
 8000d04:	428a      	cmp	r2, r1
 8000d06:	4617      	mov	r7, r2
 8000d08:	d947      	bls.n	8000d9a <__udivmoddi4+0xa6>
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	b142      	cbz	r2, 8000d22 <__udivmoddi4+0x2e>
 8000d10:	f1c2 0020 	rsb	r0, r2, #32
 8000d14:	fa24 f000 	lsr.w	r0, r4, r0
 8000d18:	4091      	lsls	r1, r2
 8000d1a:	4097      	lsls	r7, r2
 8000d1c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d20:	4094      	lsls	r4, r2
 8000d22:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d26:	0c23      	lsrs	r3, r4, #16
 8000d28:	fbbc f6f8 	udiv	r6, ip, r8
 8000d2c:	fa1f fe87 	uxth.w	lr, r7
 8000d30:	fb08 c116 	mls	r1, r8, r6, ip
 8000d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d38:	fb06 f10e 	mul.w	r1, r6, lr
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x60>
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d46:	f080 8119 	bcs.w	8000f7c <__udivmoddi4+0x288>
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	f240 8116 	bls.w	8000f7c <__udivmoddi4+0x288>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	443b      	add	r3, r7
 8000d54:	1a5b      	subs	r3, r3, r1
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d909      	bls.n	8000d80 <__udivmoddi4+0x8c>
 8000d6c:	193c      	adds	r4, r7, r4
 8000d6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d72:	f080 8105 	bcs.w	8000f80 <__udivmoddi4+0x28c>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f240 8102 	bls.w	8000f80 <__udivmoddi4+0x28c>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	443c      	add	r4, r7
 8000d80:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d84:	eba4 040e 	sub.w	r4, r4, lr
 8000d88:	2600      	movs	r6, #0
 8000d8a:	b11d      	cbz	r5, 8000d94 <__udivmoddi4+0xa0>
 8000d8c:	40d4      	lsrs	r4, r2
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e9c5 4300 	strd	r4, r3, [r5]
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xaa>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f282 	clz	r2, r2
 8000da2:	2a00      	cmp	r2, #0
 8000da4:	d150      	bne.n	8000e48 <__udivmoddi4+0x154>
 8000da6:	1bcb      	subs	r3, r1, r7
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	fa1f f887 	uxth.w	r8, r7
 8000db0:	2601      	movs	r6, #1
 8000db2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000db6:	0c21      	lsrs	r1, r4, #16
 8000db8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dbc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc0:	fb08 f30c 	mul.w	r3, r8, ip
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0xe4>
 8000dc8:	1879      	adds	r1, r7, r1
 8000dca:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0xe2>
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	f200 80e9 	bhi.w	8000fa8 <__udivmoddi4+0x2b4>
 8000dd6:	4684      	mov	ip, r0
 8000dd8:	1ac9      	subs	r1, r1, r3
 8000dda:	b2a3      	uxth	r3, r4
 8000ddc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000de8:	fb08 f800 	mul.w	r8, r8, r0
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0x10c>
 8000df0:	193c      	adds	r4, r7, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x10a>
 8000df8:	45a0      	cmp	r8, r4
 8000dfa:	f200 80d9 	bhi.w	8000fb0 <__udivmoddi4+0x2bc>
 8000dfe:	4618      	mov	r0, r3
 8000e00:	eba4 0408 	sub.w	r4, r4, r8
 8000e04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e08:	e7bf      	b.n	8000d8a <__udivmoddi4+0x96>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d909      	bls.n	8000e22 <__udivmoddi4+0x12e>
 8000e0e:	2d00      	cmp	r5, #0
 8000e10:	f000 80b1 	beq.w	8000f76 <__udivmoddi4+0x282>
 8000e14:	2600      	movs	r6, #0
 8000e16:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	fab3 f683 	clz	r6, r3
 8000e26:	2e00      	cmp	r6, #0
 8000e28:	d14a      	bne.n	8000ec0 <__udivmoddi4+0x1cc>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d302      	bcc.n	8000e34 <__udivmoddi4+0x140>
 8000e2e:	4282      	cmp	r2, r0
 8000e30:	f200 80b8 	bhi.w	8000fa4 <__udivmoddi4+0x2b0>
 8000e34:	1a84      	subs	r4, r0, r2
 8000e36:	eb61 0103 	sbc.w	r1, r1, r3
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	468c      	mov	ip, r1
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	d0a8      	beq.n	8000d94 <__udivmoddi4+0xa0>
 8000e42:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0xa0>
 8000e48:	f1c2 0320 	rsb	r3, r2, #32
 8000e4c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e50:	4097      	lsls	r7, r2
 8000e52:	fa01 f002 	lsl.w	r0, r1, r2
 8000e56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e5a:	40d9      	lsrs	r1, r3
 8000e5c:	4330      	orrs	r0, r6
 8000e5e:	0c03      	lsrs	r3, r0, #16
 8000e60:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e64:	fa1f f887 	uxth.w	r8, r7
 8000e68:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e70:	fb06 f108 	mul.w	r1, r6, r8
 8000e74:	4299      	cmp	r1, r3
 8000e76:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x19c>
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e82:	f080 808d 	bcs.w	8000fa0 <__udivmoddi4+0x2ac>
 8000e86:	4299      	cmp	r1, r3
 8000e88:	f240 808a 	bls.w	8000fa0 <__udivmoddi4+0x2ac>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	443b      	add	r3, r7
 8000e90:	1a5b      	subs	r3, r3, r1
 8000e92:	b281      	uxth	r1, r0
 8000e94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea0:	fb00 f308 	mul.w	r3, r0, r8
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x1c4>
 8000ea8:	1879      	adds	r1, r7, r1
 8000eaa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eae:	d273      	bcs.n	8000f98 <__udivmoddi4+0x2a4>
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	d971      	bls.n	8000f98 <__udivmoddi4+0x2a4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4439      	add	r1, r7
 8000eb8:	1acb      	subs	r3, r1, r3
 8000eba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ebe:	e778      	b.n	8000db2 <__udivmoddi4+0xbe>
 8000ec0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ec4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ec8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ecc:	431c      	orrs	r4, r3
 8000ece:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ed2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ed6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eda:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	0c3b      	lsrs	r3, r7, #16
 8000ee2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee6:	fa1f f884 	uxth.w	r8, r4
 8000eea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ef2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ef6:	458a      	cmp	sl, r1
 8000ef8:	fa02 f206 	lsl.w	r2, r2, r6
 8000efc:	fa00 f306 	lsl.w	r3, r0, r6
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x220>
 8000f02:	1861      	adds	r1, r4, r1
 8000f04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f08:	d248      	bcs.n	8000f9c <__udivmoddi4+0x2a8>
 8000f0a:	458a      	cmp	sl, r1
 8000f0c:	d946      	bls.n	8000f9c <__udivmoddi4+0x2a8>
 8000f0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f12:	4421      	add	r1, r4
 8000f14:	eba1 010a 	sub.w	r1, r1, sl
 8000f18:	b2bf      	uxth	r7, r7
 8000f1a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f1e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f22:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f26:	fb00 f808 	mul.w	r8, r0, r8
 8000f2a:	45b8      	cmp	r8, r7
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x24a>
 8000f2e:	19e7      	adds	r7, r4, r7
 8000f30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f34:	d22e      	bcs.n	8000f94 <__udivmoddi4+0x2a0>
 8000f36:	45b8      	cmp	r8, r7
 8000f38:	d92c      	bls.n	8000f94 <__udivmoddi4+0x2a0>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	4427      	add	r7, r4
 8000f3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f42:	eba7 0708 	sub.w	r7, r7, r8
 8000f46:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4a:	454f      	cmp	r7, r9
 8000f4c:	46c6      	mov	lr, r8
 8000f4e:	4649      	mov	r1, r9
 8000f50:	d31a      	bcc.n	8000f88 <__udivmoddi4+0x294>
 8000f52:	d017      	beq.n	8000f84 <__udivmoddi4+0x290>
 8000f54:	b15d      	cbz	r5, 8000f6e <__udivmoddi4+0x27a>
 8000f56:	ebb3 020e 	subs.w	r2, r3, lr
 8000f5a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f5e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f62:	40f2      	lsrs	r2, r6
 8000f64:	ea4c 0202 	orr.w	r2, ip, r2
 8000f68:	40f7      	lsrs	r7, r6
 8000f6a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f6e:	2600      	movs	r6, #0
 8000f70:	4631      	mov	r1, r6
 8000f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f76:	462e      	mov	r6, r5
 8000f78:	4628      	mov	r0, r5
 8000f7a:	e70b      	b.n	8000d94 <__udivmoddi4+0xa0>
 8000f7c:	4606      	mov	r6, r0
 8000f7e:	e6e9      	b.n	8000d54 <__udivmoddi4+0x60>
 8000f80:	4618      	mov	r0, r3
 8000f82:	e6fd      	b.n	8000d80 <__udivmoddi4+0x8c>
 8000f84:	4543      	cmp	r3, r8
 8000f86:	d2e5      	bcs.n	8000f54 <__udivmoddi4+0x260>
 8000f88:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f8c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f90:	3801      	subs	r0, #1
 8000f92:	e7df      	b.n	8000f54 <__udivmoddi4+0x260>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e7d2      	b.n	8000f3e <__udivmoddi4+0x24a>
 8000f98:	4660      	mov	r0, ip
 8000f9a:	e78d      	b.n	8000eb8 <__udivmoddi4+0x1c4>
 8000f9c:	4681      	mov	r9, r0
 8000f9e:	e7b9      	b.n	8000f14 <__udivmoddi4+0x220>
 8000fa0:	4666      	mov	r6, ip
 8000fa2:	e775      	b.n	8000e90 <__udivmoddi4+0x19c>
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	e74a      	b.n	8000e3e <__udivmoddi4+0x14a>
 8000fa8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fac:	4439      	add	r1, r7
 8000fae:	e713      	b.n	8000dd8 <__udivmoddi4+0xe4>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	443c      	add	r4, r7
 8000fb4:	e724      	b.n	8000e00 <__udivmoddi4+0x10c>
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <FLASH_apaga>:
  * @param  Endereço:	  Endereço inicial da página que deseja ser apagada
  * @param  Paginas:      Quantidade de páginas que deseja apagar a partir do endereço inicial.
  *
  * @retval Void
  */
void FLASH_apaga(uint32_t endereco, uint16_t paginas){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
	/* Unlock the Flash to enable the flash control register access *************/

	uint32_t StartPage = GetPage(endereco);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f8b7 	bl	800113c <GetPage>
 8000fce:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t EndPageAdress = endereco + 4*paginas;
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	623b      	str	r3, [r7, #32]
	uint32_t EndPage = GetPage(EndPageAdress);
 8000fdc:	6a38      	ldr	r0, [r7, #32]
 8000fde:	f000 f8ad 	bl	800113c <GetPage>
 8000fe2:	61f8      	str	r0, [r7, #28]

	HAL_FLASH_Unlock();
 8000fe4:	f004 ff9a 	bl	8005f1c <HAL_FLASH_Unlock>

	/* Allow Access to option bytes sector */
	HAL_FLASH_OB_Unlock();
 8000fe8:	f004 ffca 	bl	8005f80 <HAL_FLASH_OB_Unlock>
	  //NbOfSectors = 0x08200000 - FirstSector + 1;

	/* Fill EraseInit structure*/
	FLASH_EraseInitTypeDef EraseInitStruct;			    // cria estrutura de dados para armazenar informações de apagamento

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Page        = StartPage;
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000ff4:	69fa      	ldr	r2, [r7, #28]
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	0adb      	lsrs	r3, r3, #11
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	61bb      	str	r3, [r7, #24]

	uint32_t PageError;									// Valor do endereço caso ocorra erro no apagamento da função HAL_FLASHEx_Erase
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK){
 8001000:	f107 0208 	add.w	r2, r7, #8
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	4611      	mov	r1, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f005 f896 	bl	800613c <HAL_FLASHEx_Erase>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <FLASH_apaga+0x60>
		escreve_USB("\n\rErro ao apagar Flash");
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <FLASH_apaga+0x70>)
 8001018:	f004 fc0a 	bl	8005830 <escreve_USB>
		// rotina caso ocorra erro no processo de apagar
		//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
	}

	HAL_FLASH_OB_Lock();
 800101c:	f004 ffcc 	bl	8005fb8 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8001020:	f004 ff9e 	bl	8005f60 <HAL_FLASH_Lock>
}
 8001024:	bf00      	nop
 8001026:	3728      	adds	r7, #40	; 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	0800ee20 	.word	0x0800ee20

08001030 <FLASH_escreve_32bits>:
  * @param  Endereço:	  Endereço da memória em que o dado de 32 bits deverá ser armazenado. Endereço deve ser múltiplo de 2
  * @param  *dado:        Ponteiro para o valor a ser inserido no endereço de memória especificado
  *
  * @retval Void
  */
void FLASH_escreve_32bits(uint32_t endereco, uint64_t *dado){
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]

	int sofar=0;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
	int numofwords = (strlen(dado)/4)+((strlen(dado)%4)!=0);
 800103e:	6838      	ldr	r0, [r7, #0]
 8001040:	f7ff f8d0 	bl	80001e4 <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	089c      	lsrs	r4, r3, #2
 8001048:	6838      	ldr	r0, [r7, #0]
 800104a:	f7ff f8cb 	bl	80001e4 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b00      	cmp	r3, #0
 8001056:	bf14      	ite	ne
 8001058:	2301      	movne	r3, #1
 800105a:	2300      	moveq	r3, #0
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4423      	add	r3, r4
 8001060:	60bb      	str	r3, [r7, #8]

	HAL_FLASH_Unlock();
 8001062:	f004 ff5b 	bl	8005f1c <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 8001066:	f004 ff8b 	bl	8005f80 <HAL_FLASH_OB_Unlock>

	while (sofar < numofwords){
 800106a:	e016      	b.n	800109a <FLASH_escreve_32bits+0x6a>

		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,endereco, dado[sofar]) != HAL_OK){
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	4413      	add	r3, r2
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	2000      	movs	r0, #0
 800107c:	f004 fee2 	bl	8005e44 <HAL_FLASH_Program>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <FLASH_escreve_32bits+0x5e>
			// rotina caso ocorra erro no processo de apagar
			escreve_USB("\n\rErro ao salvar na memoria flash.");
 8001086:	480b      	ldr	r0, [pc, #44]	; (80010b4 <FLASH_escreve_32bits+0x84>)
 8001088:	f004 fbd2 	bl	8005830 <escreve_USB>
 800108c:	e005      	b.n	800109a <FLASH_escreve_32bits+0x6a>
		}
		else {
			endereco += 8;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3308      	adds	r3, #8
 8001092:	607b      	str	r3, [r7, #4]
			sofar++;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3301      	adds	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
	while (sofar < numofwords){
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	429a      	cmp	r2, r3
 80010a0:	dbe4      	blt.n	800106c <FLASH_escreve_32bits+0x3c>
		}

	}

	HAL_FLASH_OB_Lock();
 80010a2:	f004 ff89 	bl	8005fb8 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80010a6:	f004 ff5b 	bl	8005f60 <HAL_FLASH_Lock>
}
 80010aa:	bf00      	nop
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd90      	pop	{r4, r7, pc}
 80010b2:	bf00      	nop
 80010b4:	0800ee54 	.word	0x0800ee54

080010b8 <FLASH_le_string_0xFF>:
  * @param  Endereço:	  Endereço da memória em que a string[0] inicia. Endereço deve ser múltiplo de 2
  * @param  *dado:        Ponteiro (string[]) para armazenar o valor a ser lido no endereço de memória especificado
  *
  * @retval Void
  */
void FLASH_le_string_0xFF(uint32_t endereco, int8_t *dado){
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]

	uint32_t leitura_FLASH = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
	uint8_t cont_end = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	72fb      	strb	r3, [r7, #11]

	while(leitura_FLASH != 0xFFFFFFFF){
 80010ca:	e02c      	b.n	8001126 <FLASH_le_string_0xFF+0x6e>

		leitura_FLASH = *(uint32_t*)(endereco + cont_end);
 80010cc:	7afa      	ldrb	r2, [r7, #11]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]

		if(leitura_FLASH != 0xFFFFFFFF){
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d023      	beq.n	8001126 <FLASH_le_string_0xFF+0x6e>
			dado[0 + cont_end] = (int8_t)leitura_FLASH;
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	b252      	sxtb	r2, r2
 80010e8:	701a      	strb	r2, [r3, #0]
			dado[1 + cont_end] = (int8_t)(leitura_FLASH >> 8);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	0a1a      	lsrs	r2, r3, #8
 80010ee:	7afb      	ldrb	r3, [r7, #11]
 80010f0:	3301      	adds	r3, #1
 80010f2:	4619      	mov	r1, r3
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	440b      	add	r3, r1
 80010f8:	b252      	sxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
			dado[2 + cont_end] = (int8_t)(leitura_FLASH >> 16);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	0c1a      	lsrs	r2, r3, #16
 8001100:	7afb      	ldrb	r3, [r7, #11]
 8001102:	3302      	adds	r3, #2
 8001104:	4619      	mov	r1, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	440b      	add	r3, r1
 800110a:	b252      	sxtb	r2, r2
 800110c:	701a      	strb	r2, [r3, #0]
			dado[3 + cont_end] = (int8_t)(leitura_FLASH >> 24);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	0e1a      	lsrs	r2, r3, #24
 8001112:	7afb      	ldrb	r3, [r7, #11]
 8001114:	3303      	adds	r3, #3
 8001116:	4619      	mov	r1, r3
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	440b      	add	r3, r1
 800111c:	b252      	sxtb	r2, r2
 800111e:	701a      	strb	r2, [r3, #0]
			cont_end +=4;
 8001120:	7afb      	ldrb	r3, [r7, #11]
 8001122:	3304      	adds	r3, #4
 8001124:	72fb      	strb	r3, [r7, #11]
	while(leitura_FLASH != 0xFFFFFFFF){
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112c:	d1ce      	bne.n	80010cc <FLASH_le_string_0xFF+0x14>
		}
	}
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <GetPage>:
  * @param  Addr:	  Endereço da memória.
  *
  * @retval page
  */
static uint32_t GetPage(uint32_t Addr)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t page = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]

  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <GetPage+0x78>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001152:	4293      	cmp	r3, r2
 8001154:	d008      	beq.n	8001168 <GetPage+0x2c>
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <GetPage+0x78>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	029b      	lsls	r3, r3, #10
 800115c:	085a      	lsrs	r2, r3, #1
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <GetPage+0x7c>)
 8001160:	4013      	ands	r3, r2
 8001162:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001166:	e000      	b.n	800116a <GetPage+0x2e>
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <GetPage+0x80>)
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	4293      	cmp	r3, r2
 800116e:	d905      	bls.n	800117c <GetPage+0x40>
  {
   /* Bank 1 */
    page = (Addr - FLASH_BASE)/FLASH_PAGE_SIZE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001176:	0adb      	lsrs	r3, r3, #11
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	e014      	b.n	80011a6 <GetPage+0x6a>
  }
  else
  {
   /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE))/FLASH_PAGE_SIZE;
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <GetPage+0x78>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	b29b      	uxth	r3, r3
 8001182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001186:	4293      	cmp	r3, r2
 8001188:	d008      	beq.n	800119c <GetPage+0x60>
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <GetPage+0x78>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	085a      	lsrs	r2, r3, #1
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <GetPage+0x7c>)
 8001194:	4013      	ands	r3, r2
 8001196:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800119a:	e000      	b.n	800119e <GetPage+0x62>
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <GetPage+0x80>)
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	0adb      	lsrs	r3, r3, #11
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  return page;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	1fff75e0 	.word	0x1fff75e0
 80011b8:	01fffe00 	.word	0x01fffe00
 80011bc:	08080000 	.word	0x08080000

080011c0 <Handle_user>:
  *
  * @param  ms_time:  tempo para aguardar dados do usuario (em ms).
  *
  * @retval void
  */
void Handle_user(int ms_time){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

	static uint8_t MENU_INIT = 0; // Apos entrar no menu, MENU_INIT = 1

	memset(BUFFER_RECEIVE_USB, 0, strlen(BUFFER_RECEIVE_USB));
 80011c8:	2300      	movs	r3, #0
 80011ca:	461a      	mov	r2, r3
 80011cc:	2100      	movs	r1, #0
 80011ce:	48b0      	ldr	r0, [pc, #704]	; (8001490 <Handle_user+0x2d0>)
 80011d0:	f009 fd42 	bl	800ac58 <memset>
	if (HAL_UART_Receive(&huart4, &BUFFER_RECEIVE_USB, 1, ms_time) == HAL_OK){
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	49ad      	ldr	r1, [pc, #692]	; (8001490 <Handle_user+0x2d0>)
 80011da:	48ae      	ldr	r0, [pc, #696]	; (8001494 <Handle_user+0x2d4>)
 80011dc:	f007 ff90 	bl	8009100 <HAL_UART_Receive>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f040 829a 	bne.w	800171c <Handle_user+0x55c>

		if(strcmp(BUFFER_RECEIVE_USB, "M") == 0){
 80011e8:	49ab      	ldr	r1, [pc, #684]	; (8001498 <Handle_user+0x2d8>)
 80011ea:	48a9      	ldr	r0, [pc, #676]	; (8001490 <Handle_user+0x2d0>)
 80011ec:	f7fe fff0 	bl	80001d0 <strcmp>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d108      	bne.n	8001208 <Handle_user+0x48>
			MENU_INIT = 1;
 80011f6:	4ba9      	ldr	r3, [pc, #676]	; (800149c <Handle_user+0x2dc>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
			HAL_UART_AbortReceive_IT(&huart3); //ABORTA OUTROS RECEBIMENTOS
 80011fc:	48a8      	ldr	r0, [pc, #672]	; (80014a0 <Handle_user+0x2e0>)
 80011fe:	f008 f915 	bl	800942c <HAL_UART_AbortReceive_IT>
			Print_Menu();
 8001202:	f000 ffa9 	bl	8002158 <Print_Menu>
			HAL_UART_Receive_IT(&huart3, Data, 1);
		}
	}

	/* Fim da funcao */
}
 8001206:	e289      	b.n	800171c <Handle_user+0x55c>
		else if (!MENU_INIT){}
 8001208:	4ba4      	ldr	r3, [pc, #656]	; (800149c <Handle_user+0x2dc>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 8285 	beq.w	800171c <Handle_user+0x55c>
		else if(strcmp(BUFFER_RECEIVE_USB, "A") == 0){
 8001212:	49a4      	ldr	r1, [pc, #656]	; (80014a4 <Handle_user+0x2e4>)
 8001214:	489e      	ldr	r0, [pc, #632]	; (8001490 <Handle_user+0x2d0>)
 8001216:	f7fe ffdb 	bl	80001d0 <strcmp>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10a      	bne.n	8001236 <Handle_user+0x76>
			edit_string();
 8001220:	f000 fd4c 	bl	8001cbc <edit_string>
			Print_Menu();
 8001224:	f000 ff98 	bl	8002158 <Print_Menu>
			escreve_USB("\n\r\n\rID Salvo: ");
 8001228:	489f      	ldr	r0, [pc, #636]	; (80014a8 <Handle_user+0x2e8>)
 800122a:	f004 fb01 	bl	8005830 <escreve_USB>
			escreve_USB((char *) ID);
 800122e:	489f      	ldr	r0, [pc, #636]	; (80014ac <Handle_user+0x2ec>)
 8001230:	f004 fafe 	bl	8005830 <escreve_USB>
}
 8001234:	e272      	b.n	800171c <Handle_user+0x55c>
		else if(strcmp(BUFFER_RECEIVE_USB, "B") == 0){
 8001236:	499e      	ldr	r1, [pc, #632]	; (80014b0 <Handle_user+0x2f0>)
 8001238:	4895      	ldr	r0, [pc, #596]	; (8001490 <Handle_user+0x2d0>)
 800123a:	f7fe ffc9 	bl	80001d0 <strcmp>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d11b      	bne.n	800127c <Handle_user+0xbc>
			TIMEOUT_PING = edit_int(TIMEOUT_PING, 2);
 8001244:	4b9b      	ldr	r3, [pc, #620]	; (80014b4 <Handle_user+0x2f4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2102      	movs	r1, #2
 800124a:	4618      	mov	r0, r3
 800124c:	f000 faa2 	bl	8001794 <edit_int>
 8001250:	4603      	mov	r3, r0
 8001252:	4a98      	ldr	r2, [pc, #608]	; (80014b4 <Handle_user+0x2f4>)
 8001254:	6013      	str	r3, [r2, #0]
			memset(TIMEOUT_PING_CHAR, 0, strlen(TIMEOUT_PING_CHAR));
 8001256:	4898      	ldr	r0, [pc, #608]	; (80014b8 <Handle_user+0x2f8>)
 8001258:	f7fe ffc4 	bl	80001e4 <strlen>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	2100      	movs	r1, #0
 8001262:	4895      	ldr	r0, [pc, #596]	; (80014b8 <Handle_user+0x2f8>)
 8001264:	f009 fcf8 	bl	800ac58 <memset>
			sprintf(TIMEOUT_PING_CHAR, "%d", TIMEOUT_PING);
 8001268:	4b92      	ldr	r3, [pc, #584]	; (80014b4 <Handle_user+0x2f4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4993      	ldr	r1, [pc, #588]	; (80014bc <Handle_user+0x2fc>)
 8001270:	4891      	ldr	r0, [pc, #580]	; (80014b8 <Handle_user+0x2f8>)
 8001272:	f009 fcf9 	bl	800ac68 <siprintf>
			Print_Menu();
 8001276:	f000 ff6f 	bl	8002158 <Print_Menu>
}
 800127a:	e24f      	b.n	800171c <Handle_user+0x55c>
		else if(strcmp(BUFFER_RECEIVE_USB, "C") == 0){
 800127c:	4990      	ldr	r1, [pc, #576]	; (80014c0 <Handle_user+0x300>)
 800127e:	4884      	ldr	r0, [pc, #528]	; (8001490 <Handle_user+0x2d0>)
 8001280:	f7fe ffa6 	bl	80001d0 <strcmp>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d12d      	bne.n	80012e6 <Handle_user+0x126>
			DUTY_CYCLE_FE = edit_float(DUTY_CYCLE_FE);
 800128a:	4b8e      	ldr	r3, [pc, #568]	; (80014c4 <Handle_user+0x304>)
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	eeb0 0a67 	vmov.f32	s0, s15
 8001294:	f000 fb84 	bl	80019a0 <edit_float>
 8001298:	eef0 7a40 	vmov.f32	s15, s0
 800129c:	4b89      	ldr	r3, [pc, #548]	; (80014c4 <Handle_user+0x304>)
 800129e:	edc3 7a00 	vstr	s15, [r3]
			if (DUTY_CYCLE_FE < 60){DUTY_CYCLE_FE = 60;}
 80012a2:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <Handle_user+0x304>)
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80014c8 <Handle_user+0x308>
 80012ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b4:	d502      	bpl.n	80012bc <Handle_user+0xfc>
 80012b6:	4b83      	ldr	r3, [pc, #524]	; (80014c4 <Handle_user+0x304>)
 80012b8:	4a84      	ldr	r2, [pc, #528]	; (80014cc <Handle_user+0x30c>)
 80012ba:	601a      	str	r2, [r3, #0]
			memset(DUTY_CYCLE_FE_CHAR, 0, strlen(DUTY_CYCLE_FE_CHAR));
 80012bc:	4884      	ldr	r0, [pc, #528]	; (80014d0 <Handle_user+0x310>)
 80012be:	f7fe ff91 	bl	80001e4 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	2100      	movs	r1, #0
 80012c8:	4881      	ldr	r0, [pc, #516]	; (80014d0 <Handle_user+0x310>)
 80012ca:	f009 fcc5 	bl	800ac58 <memset>
			ftoa(DUTY_CYCLE_FE, DUTY_CYCLE_FE_CHAR, 2);
 80012ce:	4b7d      	ldr	r3, [pc, #500]	; (80014c4 <Handle_user+0x304>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	2102      	movs	r1, #2
 80012d6:	487e      	ldr	r0, [pc, #504]	; (80014d0 <Handle_user+0x310>)
 80012d8:	eeb0 0a67 	vmov.f32	s0, s15
 80012dc:	f004 fb34 	bl	8005948 <ftoa>
			Print_Menu();
 80012e0:	f000 ff3a 	bl	8002158 <Print_Menu>
}
 80012e4:	e21a      	b.n	800171c <Handle_user+0x55c>
		else if(strcmp(BUFFER_RECEIVE_USB, "D") == 0){
 80012e6:	497b      	ldr	r1, [pc, #492]	; (80014d4 <Handle_user+0x314>)
 80012e8:	4869      	ldr	r0, [pc, #420]	; (8001490 <Handle_user+0x2d0>)
 80012ea:	f7fe ff71 	bl	80001d0 <strcmp>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d12d      	bne.n	8001350 <Handle_user+0x190>
			DUTY_CYCLE_FE_MIN = edit_float(DUTY_CYCLE_FE_MIN);
 80012f4:	4b78      	ldr	r3, [pc, #480]	; (80014d8 <Handle_user+0x318>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	eeb0 0a67 	vmov.f32	s0, s15
 80012fe:	f000 fb4f 	bl	80019a0 <edit_float>
 8001302:	eef0 7a40 	vmov.f32	s15, s0
 8001306:	4b74      	ldr	r3, [pc, #464]	; (80014d8 <Handle_user+0x318>)
 8001308:	edc3 7a00 	vstr	s15, [r3]
			if (DUTY_CYCLE_FE_MIN > 40){DUTY_CYCLE_FE_MIN = 40;}
 800130c:	4b72      	ldr	r3, [pc, #456]	; (80014d8 <Handle_user+0x318>)
 800130e:	edd3 7a00 	vldr	s15, [r3]
 8001312:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80014dc <Handle_user+0x31c>
 8001316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131e:	dd02      	ble.n	8001326 <Handle_user+0x166>
 8001320:	4b6d      	ldr	r3, [pc, #436]	; (80014d8 <Handle_user+0x318>)
 8001322:	4a6f      	ldr	r2, [pc, #444]	; (80014e0 <Handle_user+0x320>)
 8001324:	601a      	str	r2, [r3, #0]
			memset(DUTY_CYCLE_FE_MIN_CHAR, 0, strlen(DUTY_CYCLE_FE_MIN_CHAR));
 8001326:	486f      	ldr	r0, [pc, #444]	; (80014e4 <Handle_user+0x324>)
 8001328:	f7fe ff5c 	bl	80001e4 <strlen>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	2100      	movs	r1, #0
 8001332:	486c      	ldr	r0, [pc, #432]	; (80014e4 <Handle_user+0x324>)
 8001334:	f009 fc90 	bl	800ac58 <memset>
			ftoa(DUTY_CYCLE_FE_MIN, DUTY_CYCLE_FE_MIN_CHAR, 2);
 8001338:	4b67      	ldr	r3, [pc, #412]	; (80014d8 <Handle_user+0x318>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	2102      	movs	r1, #2
 8001340:	4868      	ldr	r0, [pc, #416]	; (80014e4 <Handle_user+0x324>)
 8001342:	eeb0 0a67 	vmov.f32	s0, s15
 8001346:	f004 faff 	bl	8005948 <ftoa>
			Print_Menu();
 800134a:	f000 ff05 	bl	8002158 <Print_Menu>
}
 800134e:	e1e5      	b.n	800171c <Handle_user+0x55c>
		else if(strcmp(BUFFER_RECEIVE_USB, "E") == 0){
 8001350:	4965      	ldr	r1, [pc, #404]	; (80014e8 <Handle_user+0x328>)
 8001352:	484f      	ldr	r0, [pc, #316]	; (8001490 <Handle_user+0x2d0>)
 8001354:	f7fe ff3c 	bl	80001d0 <strcmp>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d12d      	bne.n	80013ba <Handle_user+0x1fa>
			DUTY_CYCLE_AC_MAX = edit_float(DUTY_CYCLE_AC_MAX);
 800135e:	4b63      	ldr	r3, [pc, #396]	; (80014ec <Handle_user+0x32c>)
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	eeb0 0a67 	vmov.f32	s0, s15
 8001368:	f000 fb1a 	bl	80019a0 <edit_float>
 800136c:	eef0 7a40 	vmov.f32	s15, s0
 8001370:	4b5e      	ldr	r3, [pc, #376]	; (80014ec <Handle_user+0x32c>)
 8001372:	edc3 7a00 	vstr	s15, [r3]
			if (DUTY_CYCLE_AC_MAX < 40){DUTY_CYCLE_AC_MAX = 40;}
 8001376:	4b5d      	ldr	r3, [pc, #372]	; (80014ec <Handle_user+0x32c>)
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80014dc <Handle_user+0x31c>
 8001380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001388:	d502      	bpl.n	8001390 <Handle_user+0x1d0>
 800138a:	4b58      	ldr	r3, [pc, #352]	; (80014ec <Handle_user+0x32c>)
 800138c:	4a54      	ldr	r2, [pc, #336]	; (80014e0 <Handle_user+0x320>)
 800138e:	601a      	str	r2, [r3, #0]
			memset(DUTY_CYCLE_AC_MAX_CHAR, 0, strlen(DUTY_CYCLE_AC_MAX_CHAR));
 8001390:	4857      	ldr	r0, [pc, #348]	; (80014f0 <Handle_user+0x330>)
 8001392:	f7fe ff27 	bl	80001e4 <strlen>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	2100      	movs	r1, #0
 800139c:	4854      	ldr	r0, [pc, #336]	; (80014f0 <Handle_user+0x330>)
 800139e:	f009 fc5b 	bl	800ac58 <memset>
			ftoa(DUTY_CYCLE_AC_MAX, DUTY_CYCLE_AC_MAX_CHAR, 2);
 80013a2:	4b52      	ldr	r3, [pc, #328]	; (80014ec <Handle_user+0x32c>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	2102      	movs	r1, #2
 80013aa:	4851      	ldr	r0, [pc, #324]	; (80014f0 <Handle_user+0x330>)
 80013ac:	eeb0 0a67 	vmov.f32	s0, s15
 80013b0:	f004 faca 	bl	8005948 <ftoa>
			Print_Menu();
 80013b4:	f000 fed0 	bl	8002158 <Print_Menu>
}
 80013b8:	e1b0      	b.n	800171c <Handle_user+0x55c>
		else if(strcmp(BUFFER_RECEIVE_USB, "F") == 0){
 80013ba:	494e      	ldr	r1, [pc, #312]	; (80014f4 <Handle_user+0x334>)
 80013bc:	4834      	ldr	r0, [pc, #208]	; (8001490 <Handle_user+0x2d0>)
 80013be:	f7fe ff07 	bl	80001d0 <strcmp>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d12d      	bne.n	8001424 <Handle_user+0x264>
			DUTY_CYCLE_AC = edit_float(DUTY_CYCLE_AC);
 80013c8:	4b4b      	ldr	r3, [pc, #300]	; (80014f8 <Handle_user+0x338>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	eeb0 0a67 	vmov.f32	s0, s15
 80013d2:	f000 fae5 	bl	80019a0 <edit_float>
 80013d6:	eef0 7a40 	vmov.f32	s15, s0
 80013da:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <Handle_user+0x338>)
 80013dc:	edc3 7a00 	vstr	s15, [r3]
			if (DUTY_CYCLE_AC > 40){DUTY_CYCLE_AC = 40;}
 80013e0:	4b45      	ldr	r3, [pc, #276]	; (80014f8 <Handle_user+0x338>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80014dc <Handle_user+0x31c>
 80013ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f2:	dd02      	ble.n	80013fa <Handle_user+0x23a>
 80013f4:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <Handle_user+0x338>)
 80013f6:	4a3a      	ldr	r2, [pc, #232]	; (80014e0 <Handle_user+0x320>)
 80013f8:	601a      	str	r2, [r3, #0]
			memset(DUTY_CYCLE_AC_CHAR, 0, strlen(DUTY_CYCLE_AC_CHAR));
 80013fa:	4840      	ldr	r0, [pc, #256]	; (80014fc <Handle_user+0x33c>)
 80013fc:	f7fe fef2 	bl	80001e4 <strlen>
 8001400:	4603      	mov	r3, r0
 8001402:	461a      	mov	r2, r3
 8001404:	2100      	movs	r1, #0
 8001406:	483d      	ldr	r0, [pc, #244]	; (80014fc <Handle_user+0x33c>)
 8001408:	f009 fc26 	bl	800ac58 <memset>
			ftoa(DUTY_CYCLE_AC, DUTY_CYCLE_AC_CHAR, 2);
 800140c:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <Handle_user+0x338>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	2102      	movs	r1, #2
 8001414:	4839      	ldr	r0, [pc, #228]	; (80014fc <Handle_user+0x33c>)
 8001416:	eeb0 0a67 	vmov.f32	s0, s15
 800141a:	f004 fa95 	bl	8005948 <ftoa>
			Print_Menu();
 800141e:	f000 fe9b 	bl	8002158 <Print_Menu>
}
 8001422:	e17b      	b.n	800171c <Handle_user+0x55c>
		else if(strcmp(BUFFER_RECEIVE_USB, "G") == 0){
 8001424:	4936      	ldr	r1, [pc, #216]	; (8001500 <Handle_user+0x340>)
 8001426:	481a      	ldr	r0, [pc, #104]	; (8001490 <Handle_user+0x2d0>)
 8001428:	f7fe fed2 	bl	80001d0 <strcmp>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d170      	bne.n	8001514 <Handle_user+0x354>
			DUTY_CYCLE_FR = edit_float(DUTY_CYCLE_FR);
 8001432:	4b34      	ldr	r3, [pc, #208]	; (8001504 <Handle_user+0x344>)
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	eeb0 0a67 	vmov.f32	s0, s15
 800143c:	f000 fab0 	bl	80019a0 <edit_float>
 8001440:	eef0 7a40 	vmov.f32	s15, s0
 8001444:	4b2f      	ldr	r3, [pc, #188]	; (8001504 <Handle_user+0x344>)
 8001446:	edc3 7a00 	vstr	s15, [r3]
			if (DUTY_CYCLE_FR < 50){DUTY_CYCLE_FR = 50;}
 800144a:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <Handle_user+0x344>)
 800144c:	edd3 7a00 	vldr	s15, [r3]
 8001450:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001508 <Handle_user+0x348>
 8001454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145c:	d502      	bpl.n	8001464 <Handle_user+0x2a4>
 800145e:	4b29      	ldr	r3, [pc, #164]	; (8001504 <Handle_user+0x344>)
 8001460:	4a2a      	ldr	r2, [pc, #168]	; (800150c <Handle_user+0x34c>)
 8001462:	601a      	str	r2, [r3, #0]
			memset(DUTY_CYCLE_FR_CHAR, 0, strlen(DUTY_CYCLE_FR_CHAR));
 8001464:	482a      	ldr	r0, [pc, #168]	; (8001510 <Handle_user+0x350>)
 8001466:	f7fe febd 	bl	80001e4 <strlen>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	2100      	movs	r1, #0
 8001470:	4827      	ldr	r0, [pc, #156]	; (8001510 <Handle_user+0x350>)
 8001472:	f009 fbf1 	bl	800ac58 <memset>
			ftoa(DUTY_CYCLE_FR, DUTY_CYCLE_FR_CHAR, 2);
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <Handle_user+0x344>)
 8001478:	edd3 7a00 	vldr	s15, [r3]
 800147c:	2102      	movs	r1, #2
 800147e:	4824      	ldr	r0, [pc, #144]	; (8001510 <Handle_user+0x350>)
 8001480:	eeb0 0a67 	vmov.f32	s0, s15
 8001484:	f004 fa60 	bl	8005948 <ftoa>
			Print_Menu();
 8001488:	f000 fe66 	bl	8002158 <Print_Menu>
}
 800148c:	e146      	b.n	800171c <Handle_user+0x55c>
 800148e:	bf00      	nop
 8001490:	20000c2c 	.word	0x20000c2c
 8001494:	2000071c 	.word	0x2000071c
 8001498:	0800ee78 	.word	0x0800ee78
 800149c:	20000260 	.word	0x20000260
 80014a0:	20000434 	.word	0x20000434
 80014a4:	0800ee7c 	.word	0x0800ee7c
 80014a8:	0800ee80 	.word	0x0800ee80
 80014ac:	20000000 	.word	0x20000000
 80014b0:	0800ee90 	.word	0x0800ee90
 80014b4:	20000028 	.word	0x20000028
 80014b8:	200004e0 	.word	0x200004e0
 80014bc:	0800ee94 	.word	0x0800ee94
 80014c0:	0800ee98 	.word	0x0800ee98
 80014c4:	2000000c 	.word	0x2000000c
 80014c8:	42700000 	.word	0x42700000
 80014cc:	42700000 	.word	0x42700000
 80014d0:	20000694 	.word	0x20000694
 80014d4:	0800ee9c 	.word	0x0800ee9c
 80014d8:	20000010 	.word	0x20000010
 80014dc:	42200000 	.word	0x42200000
 80014e0:	42200000 	.word	0x42200000
 80014e4:	2000069c 	.word	0x2000069c
 80014e8:	0800eea0 	.word	0x0800eea0
 80014ec:	20000018 	.word	0x20000018
 80014f0:	200006f4 	.word	0x200006f4
 80014f4:	0800eea4 	.word	0x0800eea4
 80014f8:	20000014 	.word	0x20000014
 80014fc:	200006c4 	.word	0x200006c4
 8001500:	0800eea8 	.word	0x0800eea8
 8001504:	2000001c 	.word	0x2000001c
 8001508:	42480000 	.word	0x42480000
 800150c:	42480000 	.word	0x42480000
 8001510:	2000055c 	.word	0x2000055c
		else if(strcmp(BUFFER_RECEIVE_USB, "H") == 0){
 8001514:	4983      	ldr	r1, [pc, #524]	; (8001724 <Handle_user+0x564>)
 8001516:	4884      	ldr	r0, [pc, #528]	; (8001728 <Handle_user+0x568>)
 8001518:	f7fe fe5a 	bl	80001d0 <strcmp>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d12d      	bne.n	800157e <Handle_user+0x3be>
			DUTY_CYCLE_FR_MIN = edit_float(DUTY_CYCLE_FR_MIN);
 8001522:	4b82      	ldr	r3, [pc, #520]	; (800172c <Handle_user+0x56c>)
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	eeb0 0a67 	vmov.f32	s0, s15
 800152c:	f000 fa38 	bl	80019a0 <edit_float>
 8001530:	eef0 7a40 	vmov.f32	s15, s0
 8001534:	4b7d      	ldr	r3, [pc, #500]	; (800172c <Handle_user+0x56c>)
 8001536:	edc3 7a00 	vstr	s15, [r3]
			if (DUTY_CYCLE_FR_MIN > 50){DUTY_CYCLE_FR_MIN = 50;}
 800153a:	4b7c      	ldr	r3, [pc, #496]	; (800172c <Handle_user+0x56c>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001730 <Handle_user+0x570>
 8001544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154c:	dd02      	ble.n	8001554 <Handle_user+0x394>
 800154e:	4b77      	ldr	r3, [pc, #476]	; (800172c <Handle_user+0x56c>)
 8001550:	4a78      	ldr	r2, [pc, #480]	; (8001734 <Handle_user+0x574>)
 8001552:	601a      	str	r2, [r3, #0]
			memset(DUTY_CYCLE_FR_MIN_CHAR, 0, strlen(DUTY_CYCLE_FR_MIN_CHAR));
 8001554:	4878      	ldr	r0, [pc, #480]	; (8001738 <Handle_user+0x578>)
 8001556:	f7fe fe45 	bl	80001e4 <strlen>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	2100      	movs	r1, #0
 8001560:	4875      	ldr	r0, [pc, #468]	; (8001738 <Handle_user+0x578>)
 8001562:	f009 fb79 	bl	800ac58 <memset>
			ftoa(DUTY_CYCLE_FR_MIN, DUTY_CYCLE_FR_MIN_CHAR, 2);
 8001566:	4b71      	ldr	r3, [pc, #452]	; (800172c <Handle_user+0x56c>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	2102      	movs	r1, #2
 800156e:	4872      	ldr	r0, [pc, #456]	; (8001738 <Handle_user+0x578>)
 8001570:	eeb0 0a67 	vmov.f32	s0, s15
 8001574:	f004 f9e8 	bl	8005948 <ftoa>
			Print_Menu();
 8001578:	f000 fdee 	bl	8002158 <Print_Menu>
}
 800157c:	e0ce      	b.n	800171c <Handle_user+0x55c>
		else if(strcmp(BUFFER_RECEIVE_USB, "I") == 0){
 800157e:	496f      	ldr	r1, [pc, #444]	; (800173c <Handle_user+0x57c>)
 8001580:	4869      	ldr	r0, [pc, #420]	; (8001728 <Handle_user+0x568>)
 8001582:	f7fe fe25 	bl	80001d0 <strcmp>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d11e      	bne.n	80015ca <Handle_user+0x40a>
			DUTYFE = edit_int(DUTYFE,1);
 800158c:	4b6c      	ldr	r3, [pc, #432]	; (8001740 <Handle_user+0x580>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2101      	movs	r1, #1
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f8fd 	bl	8001794 <edit_int>
 800159a:	4603      	mov	r3, r0
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4b68      	ldr	r3, [pc, #416]	; (8001740 <Handle_user+0x580>)
 80015a0:	701a      	strb	r2, [r3, #0]
			memset(DUTYFE_CHAR, 0, strlen(DUTYFE_CHAR));
 80015a2:	4868      	ldr	r0, [pc, #416]	; (8001744 <Handle_user+0x584>)
 80015a4:	f7fe fe1e 	bl	80001e4 <strlen>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	2100      	movs	r1, #0
 80015ae:	4865      	ldr	r0, [pc, #404]	; (8001744 <Handle_user+0x584>)
 80015b0:	f009 fb52 	bl	800ac58 <memset>
			sprintf(DUTYFE_CHAR, "%d", DUTYFE);
 80015b4:	4b62      	ldr	r3, [pc, #392]	; (8001740 <Handle_user+0x580>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	4962      	ldr	r1, [pc, #392]	; (8001748 <Handle_user+0x588>)
 80015be:	4861      	ldr	r0, [pc, #388]	; (8001744 <Handle_user+0x584>)
 80015c0:	f009 fb52 	bl	800ac68 <siprintf>
			Print_Menu();
 80015c4:	f000 fdc8 	bl	8002158 <Print_Menu>
}
 80015c8:	e0a8      	b.n	800171c <Handle_user+0x55c>
		else if(strcmp(BUFFER_RECEIVE_USB, "J") == 0){
 80015ca:	4960      	ldr	r1, [pc, #384]	; (800174c <Handle_user+0x58c>)
 80015cc:	4856      	ldr	r0, [pc, #344]	; (8001728 <Handle_user+0x568>)
 80015ce:	f7fe fdff 	bl	80001d0 <strcmp>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d11e      	bne.n	8001616 <Handle_user+0x456>
			DUTYACEL = edit_int(DUTYACEL,1);
 80015d8:	4b5d      	ldr	r3, [pc, #372]	; (8001750 <Handle_user+0x590>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2101      	movs	r1, #1
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f8d7 	bl	8001794 <edit_int>
 80015e6:	4603      	mov	r3, r0
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4b59      	ldr	r3, [pc, #356]	; (8001750 <Handle_user+0x590>)
 80015ec:	701a      	strb	r2, [r3, #0]
			memset(DUTYACEL_CHAR, 0, strlen(DUTYACEL_CHAR));
 80015ee:	4859      	ldr	r0, [pc, #356]	; (8001754 <Handle_user+0x594>)
 80015f0:	f7fe fdf8 	bl	80001e4 <strlen>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	2100      	movs	r1, #0
 80015fa:	4856      	ldr	r0, [pc, #344]	; (8001754 <Handle_user+0x594>)
 80015fc:	f009 fb2c 	bl	800ac58 <memset>
			sprintf(DUTYACEL_CHAR, "%d", DUTYACEL);
 8001600:	4b53      	ldr	r3, [pc, #332]	; (8001750 <Handle_user+0x590>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	494f      	ldr	r1, [pc, #316]	; (8001748 <Handle_user+0x588>)
 800160a:	4852      	ldr	r0, [pc, #328]	; (8001754 <Handle_user+0x594>)
 800160c:	f009 fb2c 	bl	800ac68 <siprintf>
			Print_Menu();
 8001610:	f000 fda2 	bl	8002158 <Print_Menu>
}
 8001614:	e082      	b.n	800171c <Handle_user+0x55c>
		else if(strcmp(BUFFER_RECEIVE_USB, "K") == 0){
 8001616:	4950      	ldr	r1, [pc, #320]	; (8001758 <Handle_user+0x598>)
 8001618:	4843      	ldr	r0, [pc, #268]	; (8001728 <Handle_user+0x568>)
 800161a:	f7fe fdd9 	bl	80001d0 <strcmp>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d11e      	bne.n	8001662 <Handle_user+0x4a2>
			DUTYFR = edit_int(DUTYFR,1);
 8001624:	4b4d      	ldr	r3, [pc, #308]	; (800175c <Handle_user+0x59c>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2101      	movs	r1, #1
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f8b1 	bl	8001794 <edit_int>
 8001632:	4603      	mov	r3, r0
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b49      	ldr	r3, [pc, #292]	; (800175c <Handle_user+0x59c>)
 8001638:	701a      	strb	r2, [r3, #0]
			memset(DUTYFR_CHAR, 0, strlen(DUTYFR_CHAR));
 800163a:	4849      	ldr	r0, [pc, #292]	; (8001760 <Handle_user+0x5a0>)
 800163c:	f7fe fdd2 	bl	80001e4 <strlen>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	2100      	movs	r1, #0
 8001646:	4846      	ldr	r0, [pc, #280]	; (8001760 <Handle_user+0x5a0>)
 8001648:	f009 fb06 	bl	800ac58 <memset>
			sprintf(DUTYFR_CHAR, "%d", DUTYFR);
 800164c:	4b43      	ldr	r3, [pc, #268]	; (800175c <Handle_user+0x59c>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	493c      	ldr	r1, [pc, #240]	; (8001748 <Handle_user+0x588>)
 8001656:	4842      	ldr	r0, [pc, #264]	; (8001760 <Handle_user+0x5a0>)
 8001658:	f009 fb06 	bl	800ac68 <siprintf>
			Print_Menu();
 800165c:	f000 fd7c 	bl	8002158 <Print_Menu>
}
 8001660:	e05c      	b.n	800171c <Handle_user+0x55c>
		else if (strcmp(BUFFER_RECEIVE_USB, "L") == 0){
 8001662:	4940      	ldr	r1, [pc, #256]	; (8001764 <Handle_user+0x5a4>)
 8001664:	4830      	ldr	r0, [pc, #192]	; (8001728 <Handle_user+0x568>)
 8001666:	f7fe fdb3 	bl	80001d0 <strcmp>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d11c      	bne.n	80016aa <Handle_user+0x4ea>
			NUMBER_OF_FEEDBACKS = edit_int(NUMBER_OF_FEEDBACKS, 3);
 8001670:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <Handle_user+0x5a8>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2103      	movs	r1, #3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f88c 	bl	8001794 <edit_int>
 800167c:	4603      	mov	r3, r0
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <Handle_user+0x5a8>)
 8001682:	701a      	strb	r2, [r3, #0]
			memset(NUMBER_OF_FEEDBACKS_CHAR, 0, strlen(NUMBER_OF_FEEDBACKS_CHAR));
 8001684:	4839      	ldr	r0, [pc, #228]	; (800176c <Handle_user+0x5ac>)
 8001686:	f7fe fdad 	bl	80001e4 <strlen>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	2100      	movs	r1, #0
 8001690:	4836      	ldr	r0, [pc, #216]	; (800176c <Handle_user+0x5ac>)
 8001692:	f009 fae1 	bl	800ac58 <memset>
			sprintf(NUMBER_OF_FEEDBACKS_CHAR, "%d", NUMBER_OF_FEEDBACKS);
 8001696:	4b34      	ldr	r3, [pc, #208]	; (8001768 <Handle_user+0x5a8>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	492a      	ldr	r1, [pc, #168]	; (8001748 <Handle_user+0x588>)
 800169e:	4833      	ldr	r0, [pc, #204]	; (800176c <Handle_user+0x5ac>)
 80016a0:	f009 fae2 	bl	800ac68 <siprintf>
			Print_Menu();
 80016a4:	f000 fd58 	bl	8002158 <Print_Menu>
}
 80016a8:	e038      	b.n	800171c <Handle_user+0x55c>
		else if(strcmp(BUFFER_RECEIVE_USB, "V") == 0){
 80016aa:	4931      	ldr	r1, [pc, #196]	; (8001770 <Handle_user+0x5b0>)
 80016ac:	481e      	ldr	r0, [pc, #120]	; (8001728 <Handle_user+0x568>)
 80016ae:	f7fe fd8f 	bl	80001d0 <strcmp>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <Handle_user+0x4fe>
			ver_parametros();
 80016b8:	f000 fe38 	bl	800232c <ver_parametros>
}
 80016bc:	e02e      	b.n	800171c <Handle_user+0x55c>
		else if(strcmp(BUFFER_RECEIVE_USB, "S") == 0){
 80016be:	492d      	ldr	r1, [pc, #180]	; (8001774 <Handle_user+0x5b4>)
 80016c0:	4819      	ldr	r0, [pc, #100]	; (8001728 <Handle_user+0x568>)
 80016c2:	f7fe fd85 	bl	80001d0 <strcmp>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <Handle_user+0x518>
			gravar_parametros();
 80016cc:	f000 fda8 	bl	8002220 <gravar_parametros>
			escreve_USB("\n\rValores salvos na memoria.\n\r");
 80016d0:	4829      	ldr	r0, [pc, #164]	; (8001778 <Handle_user+0x5b8>)
 80016d2:	f004 f8ad 	bl	8005830 <escreve_USB>
}
 80016d6:	e021      	b.n	800171c <Handle_user+0x55c>
		else if(strcmp(BUFFER_RECEIVE_USB, "Y") == 0){
 80016d8:	4928      	ldr	r1, [pc, #160]	; (800177c <Handle_user+0x5bc>)
 80016da:	4813      	ldr	r0, [pc, #76]	; (8001728 <Handle_user+0x568>)
 80016dc:	f7fe fd78 	bl	80001d0 <strcmp>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d102      	bne.n	80016ec <Handle_user+0x52c>
			reset_dados();
 80016e6:	f000 fb83 	bl	8001df0 <reset_dados>
}
 80016ea:	e017      	b.n	800171c <Handle_user+0x55c>
		else if(strcmp(BUFFER_RECEIVE_USB, "X") == 0){
 80016ec:	4924      	ldr	r1, [pc, #144]	; (8001780 <Handle_user+0x5c0>)
 80016ee:	480e      	ldr	r0, [pc, #56]	; (8001728 <Handle_user+0x568>)
 80016f0:	f7fe fd6e 	bl	80001d0 <strcmp>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d110      	bne.n	800171c <Handle_user+0x55c>
			apagar_tela();
 80016fa:	f000 fcb3 	bl	8002064 <apagar_tela>
			escreve_USB("\r");
 80016fe:	4821      	ldr	r0, [pc, #132]	; (8001784 <Handle_user+0x5c4>)
 8001700:	f004 f896 	bl	8005830 <escreve_USB>
			PWM_DEFINITION();
 8001704:	f002 f938 	bl	8003978 <PWM_DEFINITION>
			atuar_PWMs();
 8001708:	f002 fdbc 	bl	8004284 <atuar_PWMs>
			MENU_INIT = 0;
 800170c:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <Handle_user+0x5c8>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, Data, 1);
 8001712:	2201      	movs	r2, #1
 8001714:	491d      	ldr	r1, [pc, #116]	; (800178c <Handle_user+0x5cc>)
 8001716:	481e      	ldr	r0, [pc, #120]	; (8001790 <Handle_user+0x5d0>)
 8001718:	f007 fe32 	bl	8009380 <HAL_UART_Receive_IT>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	0800eeac 	.word	0x0800eeac
 8001728:	20000c2c 	.word	0x20000c2c
 800172c:	20000020 	.word	0x20000020
 8001730:	42480000 	.word	0x42480000
 8001734:	42480000 	.word	0x42480000
 8001738:	200007a0 	.word	0x200007a0
 800173c:	0800eeb0 	.word	0x0800eeb0
 8001740:	20000024 	.word	0x20000024
 8001744:	200002e0 	.word	0x200002e0
 8001748:	0800ee94 	.word	0x0800ee94
 800174c:	0800eeb4 	.word	0x0800eeb4
 8001750:	20000261 	.word	0x20000261
 8001754:	200004e8 	.word	0x200004e8
 8001758:	0800eeb8 	.word	0x0800eeb8
 800175c:	20000262 	.word	0x20000262
 8001760:	20000c30 	.word	0x20000c30
 8001764:	0800eebc 	.word	0x0800eebc
 8001768:	20000030 	.word	0x20000030
 800176c:	200006f0 	.word	0x200006f0
 8001770:	0800eec0 	.word	0x0800eec0
 8001774:	0800eec4 	.word	0x0800eec4
 8001778:	0800eec8 	.word	0x0800eec8
 800177c:	0800eee8 	.word	0x0800eee8
 8001780:	0800eeec 	.word	0x0800eeec
 8001784:	0800eef0 	.word	0x0800eef0
 8001788:	20000260 	.word	0x20000260
 800178c:	20000564 	.word	0x20000564
 8001790:	20000434 	.word	0x20000434

08001794 <edit_int>:
  * @param  value:  valor a ser editado.
  * @param  type:   Define o tipo de variavel que esta sendo editada.
  *
  * @retval value
  */
uint32_t edit_int(uint32_t value, int type){
 8001794:	b580      	push	{r7, lr}
 8001796:	b08e      	sub	sp, #56	; 0x38
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]

	char data_rcv[10];
	char* command;
	int change = 1;
 800179e:	2301      	movs	r3, #1
 80017a0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t Standard = value;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
	char value_CHAR[10];

	int MIN = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int MAX = 100;
 80017aa:	2364      	movs	r3, #100	; 0x64
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28

	if (type == 2){
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d107      	bne.n	80017c4 <edit_int+0x30>
		MIN = 1000;
 80017b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		MAX = 9999;
 80017ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
		change = 100;
 80017c0:	2364      	movs	r3, #100	; 0x64
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
	}

	if (type == 3){
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d103      	bne.n	80017d2 <edit_int+0x3e>
		MIN = 1;
 80017ca:	2301      	movs	r3, #1
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		MAX = 30;
 80017ce:	231e      	movs	r3, #30
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	escreve_USB("\r\n");
 80017d2:	4867      	ldr	r0, [pc, #412]	; (8001970 <edit_int+0x1dc>)
 80017d4:	f004 f82c 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nw - AUMENTAR\r\n");
 80017d8:	4866      	ldr	r0, [pc, #408]	; (8001974 <edit_int+0x1e0>)
 80017da:	f004 f829 	bl	8005830 <escreve_USB>
	escreve_USB("\r\ns - DIMINUIR\r\n");
 80017de:	4866      	ldr	r0, [pc, #408]	; (8001978 <edit_int+0x1e4>)
 80017e0:	f004 f826 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nA - SALVAR\r\n");
 80017e4:	4865      	ldr	r0, [pc, #404]	; (800197c <edit_int+0x1e8>)
 80017e6:	f004 f823 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nX - RETORNAR MENU INICIAL\r\n\r\n");
 80017ea:	4865      	ldr	r0, [pc, #404]	; (8001980 <edit_int+0x1ec>)
 80017ec:	f004 f820 	bl	8005830 <escreve_USB>

	IntParaString(value, value_CHAR, 10);
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	220a      	movs	r2, #10
 80017f6:	4619      	mov	r1, r3
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f003 fe3b 	bl	8005474 <IntParaString>
	escreve_USB(value_CHAR);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4618      	mov	r0, r3
 8001804:	f004 f814 	bl	8005830 <escreve_USB>
	escreve_USB("\r");
 8001808:	485e      	ldr	r0, [pc, #376]	; (8001984 <edit_int+0x1f0>)
 800180a:	f004 f811 	bl	8005830 <escreve_USB>

	while(1){

		TOGGLE_PWM_STATUS(); // Manter envio do status de funcionamento
 800180e:	f002 f997 	bl	8003b40 <TOGGLE_PWM_STATUS>

		memset(data_rcv, 0, strlen(data_rcv));
 8001812:	f107 0318 	add.w	r3, r7, #24
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fce4 	bl	80001e4 <strlen>
 800181c:	4602      	mov	r2, r0
 800181e:	f107 0318 	add.w	r3, r7, #24
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f009 fa17 	bl	800ac58 <memset>
		memset(command, 0, strlen(command));
 800182a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800182c:	f7fe fcda 	bl	80001e4 <strlen>
 8001830:	4603      	mov	r3, r0
 8001832:	461a      	mov	r2, r3
 8001834:	2100      	movs	r1, #0
 8001836:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001838:	f009 fa0e 	bl	800ac58 <memset>

		if(HAL_UART_Receive(&huart4, &data_rcv, 1,100) == HAL_OK){
 800183c:	f107 0118 	add.w	r1, r7, #24
 8001840:	2364      	movs	r3, #100	; 0x64
 8001842:	2201      	movs	r2, #1
 8001844:	4850      	ldr	r0, [pc, #320]	; (8001988 <edit_int+0x1f4>)
 8001846:	f007 fc5b 	bl	8009100 <HAL_UART_Receive>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1de      	bne.n	800180e <edit_int+0x7a>

			command = data_rcv;
 8001850:	f107 0318 	add.w	r3, r7, #24
 8001854:	637b      	str	r3, [r7, #52]	; 0x34
			command = eliminar_nao_char(command);
 8001856:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001858:	f000 fbd6 	bl	8002008 <eliminar_nao_char>
 800185c:	6378      	str	r0, [r7, #52]	; 0x34


			if(strcmp(command, "w") == 0){
 800185e:	494b      	ldr	r1, [pc, #300]	; (800198c <edit_int+0x1f8>)
 8001860:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001862:	f7fe fcb5 	bl	80001d0 <strcmp>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d12b      	bne.n	80018c4 <edit_int+0x130>
				value += change;
 800186c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	607b      	str	r3, [r7, #4]

				if(value > MAX){value = MAX;}
 8001874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	429a      	cmp	r2, r3
 800187a:	d901      	bls.n	8001880 <edit_int+0xec>
 800187c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187e:	607b      	str	r3, [r7, #4]
				if(value < MIN){value = MIN;}
 8001880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	d201      	bcs.n	800188c <edit_int+0xf8>
 8001888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188a:	607b      	str	r3, [r7, #4]

				memset(value_CHAR, 0, strlen(value_CHAR));
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fca7 	bl	80001e4 <strlen>
 8001896:	4602      	mov	r2, r0
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f009 f9da 	bl	800ac58 <memset>

				IntParaString(value, value_CHAR, 10);
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	220a      	movs	r2, #10
 80018aa:	4619      	mov	r1, r3
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f003 fde1 	bl	8005474 <IntParaString>
				escreve_USB(value_CHAR);
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 ffba 	bl	8005830 <escreve_USB>
				escreve_USB("\r");
 80018bc:	4831      	ldr	r0, [pc, #196]	; (8001984 <edit_int+0x1f0>)
 80018be:	f003 ffb7 	bl	8005830 <escreve_USB>
 80018c2:	e7a4      	b.n	800180e <edit_int+0x7a>

			}

			else if (strcmp(command, "s") == 0){
 80018c4:	4932      	ldr	r1, [pc, #200]	; (8001990 <edit_int+0x1fc>)
 80018c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018c8:	f7fe fc82 	bl	80001d0 <strcmp>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d12b      	bne.n	800192a <edit_int+0x196>
				value -= change;
 80018d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	607b      	str	r3, [r7, #4]

				if(value < MIN){value = MIN;}
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d201      	bcs.n	80018e6 <edit_int+0x152>
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	607b      	str	r3, [r7, #4]
				if(value > MAX){value = MAX;}
 80018e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d901      	bls.n	80018f2 <edit_int+0x15e>
 80018ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f0:	607b      	str	r3, [r7, #4]

				memset(value_CHAR, 0, strlen(value_CHAR));
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fc74 	bl	80001e4 <strlen>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f009 f9a7 	bl	800ac58 <memset>

				IntParaString(value, value_CHAR, 10);
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	220a      	movs	r2, #10
 8001910:	4619      	mov	r1, r3
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f003 fdae 	bl	8005474 <IntParaString>

				escreve_USB(value_CHAR);
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	4618      	mov	r0, r3
 800191e:	f003 ff87 	bl	8005830 <escreve_USB>
				escreve_USB("\r");
 8001922:	4818      	ldr	r0, [pc, #96]	; (8001984 <edit_int+0x1f0>)
 8001924:	f003 ff84 	bl	8005830 <escreve_USB>
 8001928:	e771      	b.n	800180e <edit_int+0x7a>
			}

			else if(strcmp(command, "A") == 0){
 800192a:	491a      	ldr	r1, [pc, #104]	; (8001994 <edit_int+0x200>)
 800192c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800192e:	f7fe fc4f 	bl	80001d0 <strcmp>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d103      	bne.n	8001940 <edit_int+0x1ac>
				escreve_USB("\n\rSalvo! ");
 8001938:	4817      	ldr	r0, [pc, #92]	; (8001998 <edit_int+0x204>)
 800193a:	f003 ff79 	bl	8005830 <escreve_USB>
				break;
 800193e:	e009      	b.n	8001954 <edit_int+0x1c0>
			}

			else if(strcmp(command, "X") == 0){
 8001940:	4916      	ldr	r1, [pc, #88]	; (800199c <edit_int+0x208>)
 8001942:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001944:	f7fe fc44 	bl	80001d0 <strcmp>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	f47f af5f 	bne.w	800180e <edit_int+0x7a>
				value = Standard;
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	607b      	str	r3, [r7, #4]
				break;
			}

		}
	}
	memset(command, 0, strlen(command));
 8001954:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001956:	f7fe fc45 	bl	80001e4 <strlen>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	2100      	movs	r1, #0
 8001960:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001962:	f009 f979 	bl	800ac58 <memset>
	return value;
 8001966:	687b      	ldr	r3, [r7, #4]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3738      	adds	r7, #56	; 0x38
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	0800eef4 	.word	0x0800eef4
 8001974:	0800eef8 	.word	0x0800eef8
 8001978:	0800ef0c 	.word	0x0800ef0c
 800197c:	0800ef20 	.word	0x0800ef20
 8001980:	0800ef30 	.word	0x0800ef30
 8001984:	0800eef0 	.word	0x0800eef0
 8001988:	2000071c 	.word	0x2000071c
 800198c:	0800ef50 	.word	0x0800ef50
 8001990:	0800ef54 	.word	0x0800ef54
 8001994:	0800ee7c 	.word	0x0800ee7c
 8001998:	0800ef58 	.word	0x0800ef58
 800199c:	0800eeec 	.word	0x0800eeec

080019a0 <edit_float>:
  *
  * @param  value:  valor a ser editado.
  *
  * @retval value
  */
float edit_float(float value){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08c      	sub	sp, #48	; 0x30
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	ed87 0a01 	vstr	s0, [r7, #4]

	char rcvd_data[10];
	char* command;
	float change = 0.01;
 80019aa:	4bb1      	ldr	r3, [pc, #708]	; (8001c70 <edit_float+0x2d0>)
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
	float Standard = value;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
	char value_CHAR[6];

	int MIN = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
	int MAX = 100;
 80019b6:	2364      	movs	r3, #100	; 0x64
 80019b8:	61fb      	str	r3, [r7, #28]

	escreve_USB("\r\n\r\n");
 80019ba:	48ae      	ldr	r0, [pc, #696]	; (8001c74 <edit_float+0x2d4>)
 80019bc:	f003 ff38 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nw - AUMENTAR\r\n");
 80019c0:	48ad      	ldr	r0, [pc, #692]	; (8001c78 <edit_float+0x2d8>)
 80019c2:	f003 ff35 	bl	8005830 <escreve_USB>
	escreve_USB("\r\ns - DIMINUIR\r\n");
 80019c6:	48ad      	ldr	r0, [pc, #692]	; (8001c7c <edit_float+0x2dc>)
 80019c8:	f003 ff32 	bl	8005830 <escreve_USB>
	escreve_USB("\r\na - ALGARISMO <\r\n");
 80019cc:	48ac      	ldr	r0, [pc, #688]	; (8001c80 <edit_float+0x2e0>)
 80019ce:	f003 ff2f 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nd - ALGARISMO >\r\n");
 80019d2:	48ac      	ldr	r0, [pc, #688]	; (8001c84 <edit_float+0x2e4>)
 80019d4:	f003 ff2c 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nA - SALVAR\r\n");
 80019d8:	48ab      	ldr	r0, [pc, #684]	; (8001c88 <edit_float+0x2e8>)
 80019da:	f003 ff29 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nX - RETORNAR MENU INICIAL\r\n");
 80019de:	48ab      	ldr	r0, [pc, #684]	; (8001c8c <edit_float+0x2ec>)
 80019e0:	f003 ff26 	bl	8005830 <escreve_USB>
	escreve_USB("\r\n");
 80019e4:	48aa      	ldr	r0, [pc, #680]	; (8001c90 <edit_float+0x2f0>)
 80019e6:	f003 ff23 	bl	8005830 <escreve_USB>

	ftoa(value, value_CHAR, 2);
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	2102      	movs	r1, #2
 80019f0:	4618      	mov	r0, r3
 80019f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80019f6:	f003 ffa7 	bl	8005948 <ftoa>
	escreve_USB(value_CHAR);
 80019fa:	f107 0308 	add.w	r3, r7, #8
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 ff16 	bl	8005830 <escreve_USB>
	escreve_USB("\r");
 8001a04:	48a3      	ldr	r0, [pc, #652]	; (8001c94 <edit_float+0x2f4>)
 8001a06:	f003 ff13 	bl	8005830 <escreve_USB>

	while(1){

		TOGGLE_PWM_STATUS(); // Manter envio do status de funcionamento
 8001a0a:	f002 f899 	bl	8003b40 <TOGGLE_PWM_STATUS>

		memset(rcvd_data, 0, strlen(rcvd_data));
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fbe6 	bl	80001e4 <strlen>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f009 f919 	bl	800ac58 <memset>
		memset(command, 0, strlen(command));
 8001a26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a28:	f7fe fbdc 	bl	80001e4 <strlen>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2100      	movs	r1, #0
 8001a32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a34:	f009 f910 	bl	800ac58 <memset>

		if(HAL_UART_Receive(&huart4, &rcvd_data, 1,100) == HAL_OK){
 8001a38:	f107 0110 	add.w	r1, r7, #16
 8001a3c:	2364      	movs	r3, #100	; 0x64
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4895      	ldr	r0, [pc, #596]	; (8001c98 <edit_float+0x2f8>)
 8001a42:	f007 fb5d 	bl	8009100 <HAL_UART_Receive>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1de      	bne.n	8001a0a <edit_float+0x6a>

			command = rcvd_data;
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
			command = eliminar_nao_char(command);
 8001a52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a54:	f000 fad8 	bl	8002008 <eliminar_nao_char>
 8001a58:	62f8      	str	r0, [r7, #44]	; 0x2c

			if(strcmp(command, "w") == 0){
 8001a5a:	4990      	ldr	r1, [pc, #576]	; (8001c9c <edit_float+0x2fc>)
 8001a5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a5e:	f7fe fbb7 	bl	80001d0 <strcmp>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d14a      	bne.n	8001afe <edit_float+0x15e>
				value += change;
 8001a68:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a74:	edc7 7a01 	vstr	s15, [r7, #4]

				if(value > MAX){value = MAX;}
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	ee07 3a90 	vmov	s15, r3
 8001a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a82:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	dd06      	ble.n	8001a9e <edit_float+0xfe>
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a9a:	edc7 7a01 	vstr	s15, [r7, #4]
				if(value < MIN){value = MIN;}
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001aac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab4:	d506      	bpl.n	8001ac4 <edit_float+0x124>
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	ee07 3a90 	vmov	s15, r3
 8001abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac0:	edc7 7a01 	vstr	s15, [r7, #4]
				memset(value_CHAR, 0, strlen(value_CHAR));
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fb8b 	bl	80001e4 <strlen>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	f107 0308 	add.w	r3, r7, #8
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f009 f8be 	bl	800ac58 <memset>
				ftoa(value, value_CHAR, 2);
 8001adc:	f107 0308 	add.w	r3, r7, #8
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ae8:	f003 ff2e 	bl	8005948 <ftoa>

				escreve_USB(value_CHAR);
 8001aec:	f107 0308 	add.w	r3, r7, #8
 8001af0:	4618      	mov	r0, r3
 8001af2:	f003 fe9d 	bl	8005830 <escreve_USB>
				escreve_USB("\r");
 8001af6:	4867      	ldr	r0, [pc, #412]	; (8001c94 <edit_float+0x2f4>)
 8001af8:	f003 fe9a 	bl	8005830 <escreve_USB>
 8001afc:	e785      	b.n	8001a0a <edit_float+0x6a>
			}

			else if (strcmp(command, "s") == 0){
 8001afe:	4968      	ldr	r1, [pc, #416]	; (8001ca0 <edit_float+0x300>)
 8001b00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b02:	f7fe fb65 	bl	80001d0 <strcmp>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d14a      	bne.n	8001ba2 <edit_float+0x202>
				value -= change;
 8001b0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b18:	edc7 7a01 	vstr	s15, [r7, #4]

				if(value < MIN){value = MIN;}
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b26:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	d506      	bpl.n	8001b42 <edit_float+0x1a2>
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3e:	edc7 7a01 	vstr	s15, [r7, #4]
				if(value > MAX){value = MAX;}
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	ee07 3a90 	vmov	s15, r3
 8001b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b58:	dd06      	ble.n	8001b68 <edit_float+0x1c8>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b64:	edc7 7a01 	vstr	s15, [r7, #4]
				memset(value_CHAR, 0, strlen(value_CHAR));
 8001b68:	f107 0308 	add.w	r3, r7, #8
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fb39 	bl	80001e4 <strlen>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f009 f86c 	bl	800ac58 <memset>
				ftoa(value, value_CHAR, 2);
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	2102      	movs	r1, #2
 8001b86:	4618      	mov	r0, r3
 8001b88:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b8c:	f003 fedc 	bl	8005948 <ftoa>

				escreve_USB(value_CHAR);
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 fe4b 	bl	8005830 <escreve_USB>
				escreve_USB("\r");
 8001b9a:	483e      	ldr	r0, [pc, #248]	; (8001c94 <edit_float+0x2f4>)
 8001b9c:	f003 fe48 	bl	8005830 <escreve_USB>
 8001ba0:	e733      	b.n	8001a0a <edit_float+0x6a>
			}

			else if (strcmp(command, "d") == 0){
 8001ba2:	4940      	ldr	r1, [pc, #256]	; (8001ca4 <edit_float+0x304>)
 8001ba4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ba6:	f7fe fb13 	bl	80001d0 <strcmp>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d115      	bne.n	8001bdc <edit_float+0x23c>
				change = change/10;
 8001bb0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001bb4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bbc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				if (change < 0.01){ change = 0.01;}
 8001bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001bc2:	f7fe fcd1 	bl	8000568 <__aeabi_f2d>
 8001bc6:	a328      	add	r3, pc, #160	; (adr r3, 8001c68 <edit_float+0x2c8>)
 8001bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bcc:	f7fe ff96 	bl	8000afc <__aeabi_dcmplt>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d033      	beq.n	8001c3e <edit_float+0x29e>
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <edit_float+0x2d0>)
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bda:	e716      	b.n	8001a0a <edit_float+0x6a>
			}

			else if (strcmp(command, "a") == 0){
 8001bdc:	4932      	ldr	r1, [pc, #200]	; (8001ca8 <edit_float+0x308>)
 8001bde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001be0:	f7fe faf6 	bl	80001d0 <strcmp>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d113      	bne.n	8001c12 <edit_float+0x272>
				change = change*10;
 8001bea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001bee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				if (change > 10){ change = 10;}
 8001bfa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001bfe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	dd18      	ble.n	8001c3e <edit_float+0x29e>
 8001c0c:	4b27      	ldr	r3, [pc, #156]	; (8001cac <edit_float+0x30c>)
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c10:	e6fb      	b.n	8001a0a <edit_float+0x6a>
			}

			else if(strcmp(command, "A") == 0){
 8001c12:	4927      	ldr	r1, [pc, #156]	; (8001cb0 <edit_float+0x310>)
 8001c14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c16:	f7fe fadb 	bl	80001d0 <strcmp>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d103      	bne.n	8001c28 <edit_float+0x288>
				escreve_USB("\n\rSalvo! ");
 8001c20:	4824      	ldr	r0, [pc, #144]	; (8001cb4 <edit_float+0x314>)
 8001c22:	f003 fe05 	bl	8005830 <escreve_USB>
				break;
 8001c26:	e00b      	b.n	8001c40 <edit_float+0x2a0>
			}

			else if(strcmp(command, "X") == 0){
 8001c28:	4923      	ldr	r1, [pc, #140]	; (8001cb8 <edit_float+0x318>)
 8001c2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c2c:	f7fe fad0 	bl	80001d0 <strcmp>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f47f aee9 	bne.w	8001a0a <edit_float+0x6a>
				value = Standard;
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	607b      	str	r3, [r7, #4]
				break;
 8001c3c:	e000      	b.n	8001c40 <edit_float+0x2a0>
		TOGGLE_PWM_STATUS(); // Manter envio do status de funcionamento
 8001c3e:	e6e4      	b.n	8001a0a <edit_float+0x6a>
			}
		}

	}
	memset(command, 0, strlen(command));
 8001c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c42:	f7fe facf 	bl	80001e4 <strlen>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c4e:	f009 f803 	bl	800ac58 <memset>
	return value;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	ee07 3a90 	vmov	s15, r3
}
 8001c58:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5c:	3730      	adds	r7, #48	; 0x30
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	f3af 8000 	nop.w
 8001c68:	47ae147b 	.word	0x47ae147b
 8001c6c:	3f847ae1 	.word	0x3f847ae1
 8001c70:	3c23d70a 	.word	0x3c23d70a
 8001c74:	0800ef64 	.word	0x0800ef64
 8001c78:	0800eef8 	.word	0x0800eef8
 8001c7c:	0800ef0c 	.word	0x0800ef0c
 8001c80:	0800ef6c 	.word	0x0800ef6c
 8001c84:	0800ef80 	.word	0x0800ef80
 8001c88:	0800ef20 	.word	0x0800ef20
 8001c8c:	0800ef94 	.word	0x0800ef94
 8001c90:	0800eef4 	.word	0x0800eef4
 8001c94:	0800eef0 	.word	0x0800eef0
 8001c98:	2000071c 	.word	0x2000071c
 8001c9c:	0800ef50 	.word	0x0800ef50
 8001ca0:	0800ef54 	.word	0x0800ef54
 8001ca4:	0800efb4 	.word	0x0800efb4
 8001ca8:	0800efb8 	.word	0x0800efb8
 8001cac:	41200000 	.word	0x41200000
 8001cb0:	0800ee7c 	.word	0x0800ee7c
 8001cb4:	0800ef58 	.word	0x0800ef58
 8001cb8:	0800eeec 	.word	0x0800eeec

08001cbc <edit_string>:
  *
  * @param  none
  *
  * @retval value
  */
void edit_string(){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0

	char data_received[10];
	char* command;
	uint8_t BUFFER_ID[20];
	int EXIT = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]

	escreve_USB("\n\r");
 8001cc6:	4841      	ldr	r0, [pc, #260]	; (8001dcc <edit_string+0x110>)
 8001cc8:	f003 fdb2 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nW - SALVAR\r\n");
 8001ccc:	4840      	ldr	r0, [pc, #256]	; (8001dd0 <edit_string+0x114>)
 8001cce:	f003 fdaf 	bl	8005830 <escreve_USB>
	escreve_USB("X - RETORNAR MENU INICIAL\r\n");
 8001cd2:	4840      	ldr	r0, [pc, #256]	; (8001dd4 <edit_string+0x118>)
 8001cd4:	f003 fdac 	bl	8005830 <escreve_USB>
	escreve_USB("\r\n");
 8001cd8:	483f      	ldr	r0, [pc, #252]	; (8001dd8 <edit_string+0x11c>)
 8001cda:	f003 fda9 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rDIGITE O NOVO ID: ");
 8001cde:	483f      	ldr	r0, [pc, #252]	; (8001ddc <edit_string+0x120>)
 8001ce0:	f003 fda6 	bl	8005830 <escreve_USB>
	memset(BUFFER_ID, 0, strlen(BUFFER_ID));
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fa7c 	bl	80001e4 <strlen>
 8001cec:	4602      	mov	r2, r0
 8001cee:	463b      	mov	r3, r7
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f008 ffb0 	bl	800ac58 <memset>

	while (!EXIT){
 8001cf8:	e057      	b.n	8001daa <edit_string+0xee>

		TOGGLE_PWM_STATUS(); // Manter envio do status de funcionamento
 8001cfa:	f001 ff21 	bl	8003b40 <TOGGLE_PWM_STATUS>
		memset(data_received, 0, strlen(data_received));
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fa6e 	bl	80001e4 <strlen>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f008 ffa1 	bl	800ac58 <memset>
		memset(command, 0, strlen(command));
 8001d16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d18:	f7fe fa64 	bl	80001e4 <strlen>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2100      	movs	r1, #0
 8001d22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d24:	f008 ff98 	bl	800ac58 <memset>

		if(HAL_UART_Receive(&huart4, &data_received, 1,100) == HAL_OK){
 8001d28:	f107 0114 	add.w	r1, r7, #20
 8001d2c:	2364      	movs	r3, #100	; 0x64
 8001d2e:	2201      	movs	r2, #1
 8001d30:	482b      	ldr	r0, [pc, #172]	; (8001de0 <edit_string+0x124>)
 8001d32:	f007 f9e5 	bl	8009100 <HAL_UART_Receive>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d136      	bne.n	8001daa <edit_string+0xee>


			command = data_received;
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
			command = eliminar_nao_char(command);
 8001d42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d44:	f000 f960 	bl	8002008 <eliminar_nao_char>
 8001d48:	6278      	str	r0, [r7, #36]	; 0x24

			if (strcmp(command, "W") == 0){
 8001d4a:	4926      	ldr	r1, [pc, #152]	; (8001de4 <edit_string+0x128>)
 8001d4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d4e:	f7fe fa3f 	bl	80001d0 <strcmp>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d112      	bne.n	8001d7e <edit_string+0xc2>
				memset(ID, 0, strlen(ID));
 8001d58:	4823      	ldr	r0, [pc, #140]	; (8001de8 <edit_string+0x12c>)
 8001d5a:	f7fe fa43 	bl	80001e4 <strlen>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	2100      	movs	r1, #0
 8001d64:	4820      	ldr	r0, [pc, #128]	; (8001de8 <edit_string+0x12c>)
 8001d66:	f008 ff77 	bl	800ac58 <memset>
				strcat(ID, BUFFER_ID);
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	481e      	ldr	r0, [pc, #120]	; (8001de8 <edit_string+0x12c>)
 8001d70:	f008 ff9a 	bl	800aca8 <strcat>
				GerarFrames();
 8001d74:	f002 fde6 	bl	8004944 <GerarFrames>
				EXIT = 1;//break;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	623b      	str	r3, [r7, #32]
 8001d7c:	e015      	b.n	8001daa <edit_string+0xee>
			}

			else if (strcmp(command, "X") == 0){
 8001d7e:	491b      	ldr	r1, [pc, #108]	; (8001dec <edit_string+0x130>)
 8001d80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d82:	f7fe fa25 	bl	80001d0 <strcmp>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <edit_string+0xd6>
				EXIT = 1;//break;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	623b      	str	r3, [r7, #32]
 8001d90:	e00b      	b.n	8001daa <edit_string+0xee>
			}

			else if (strlen(command)){
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d007      	beq.n	8001daa <edit_string+0xee>
				escreve_USB(command);
 8001d9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d9c:	f003 fd48 	bl	8005830 <escreve_USB>
				strcat(BUFFER_ID, command);
 8001da0:	463b      	mov	r3, r7
 8001da2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001da4:	4618      	mov	r0, r3
 8001da6:	f008 ff7f 	bl	800aca8 <strcat>
	while (!EXIT){
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0a4      	beq.n	8001cfa <edit_string+0x3e>
			}
		}

	}
	memset(command, 0, strlen(command));
 8001db0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001db2:	f7fe fa17 	bl	80001e4 <strlen>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461a      	mov	r2, r3
 8001dba:	2100      	movs	r1, #0
 8001dbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dbe:	f008 ff4b 	bl	800ac58 <memset>
}
 8001dc2:	bf00      	nop
 8001dc4:	3728      	adds	r7, #40	; 0x28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	0800efbc 	.word	0x0800efbc
 8001dd0:	0800efc0 	.word	0x0800efc0
 8001dd4:	0800efd0 	.word	0x0800efd0
 8001dd8:	0800eef4 	.word	0x0800eef4
 8001ddc:	0800efec 	.word	0x0800efec
 8001de0:	2000071c 	.word	0x2000071c
 8001de4:	0800f004 	.word	0x0800f004
 8001de8:	20000000 	.word	0x20000000
 8001dec:	0800eeec 	.word	0x0800eeec

08001df0 <reset_dados>:
  *
  * @param  none
  *
  * @retval value
  */
void reset_dados(){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0

	char rcvd_data[10];
	char *command;
	int FLAG_EXIT = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]

	escreve_USB("\n\r");
 8001dfa:	486d      	ldr	r0, [pc, #436]	; (8001fb0 <reset_dados+0x1c0>)
 8001dfc:	f003 fd18 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nTEM CERTEZA QUE DESEJA LIMPAR OS DADOS?\r\n");
 8001e00:	486c      	ldr	r0, [pc, #432]	; (8001fb4 <reset_dados+0x1c4>)
 8001e02:	f003 fd15 	bl	8005830 <escreve_USB>
	escreve_USB("S - SIM\r\nN - NAO\r\n");
 8001e06:	486c      	ldr	r0, [pc, #432]	; (8001fb8 <reset_dados+0x1c8>)
 8001e08:	f003 fd12 	bl	8005830 <escreve_USB>

	while(!FLAG_EXIT){
 8001e0c:	e0c6      	b.n	8001f9c <reset_dados+0x1ac>

		TOGGLE_PWM_STATUS(); // Manter envio do status de funcionamento
 8001e0e:	f001 fe97 	bl	8003b40 <TOGGLE_PWM_STATUS>

		memset(rcvd_data, 0, strlen(rcvd_data));
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe f9e5 	bl	80001e4 <strlen>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f008 ff19 	bl	800ac58 <memset>
		memset(command, 0, strlen(command));
 8001e26:	6978      	ldr	r0, [r7, #20]
 8001e28:	f7fe f9dc 	bl	80001e4 <strlen>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2100      	movs	r1, #0
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f008 ff10 	bl	800ac58 <memset>

		if (HAL_UART_Receive(&huart4, &rcvd_data, 1,100) == HAL_OK){
 8001e38:	1d39      	adds	r1, r7, #4
 8001e3a:	2364      	movs	r3, #100	; 0x64
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	485f      	ldr	r0, [pc, #380]	; (8001fbc <reset_dados+0x1cc>)
 8001e40:	f007 f95e 	bl	8009100 <HAL_UART_Receive>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 80a8 	bne.w	8001f9c <reset_dados+0x1ac>

			command = rcvd_data;
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	617b      	str	r3, [r7, #20]
			command = eliminar_nao_char(command);
 8001e50:	6978      	ldr	r0, [r7, #20]
 8001e52:	f000 f8d9 	bl	8002008 <eliminar_nao_char>
 8001e56:	6178      	str	r0, [r7, #20]

			if(strcmp(command, "S") == 0){
 8001e58:	4959      	ldr	r1, [pc, #356]	; (8001fc0 <reset_dados+0x1d0>)
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f7fe f9b8 	bl	80001d0 <strcmp>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 808e 	bne.w	8001f84 <reset_dados+0x194>

				/* Apaga todas as variaveis CHAR */
				memset(&DUTY_CYCLE_FE_CHAR, 0, strlen(DUTY_CYCLE_FE_CHAR));
 8001e68:	4856      	ldr	r0, [pc, #344]	; (8001fc4 <reset_dados+0x1d4>)
 8001e6a:	f7fe f9bb 	bl	80001e4 <strlen>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	2100      	movs	r1, #0
 8001e74:	4853      	ldr	r0, [pc, #332]	; (8001fc4 <reset_dados+0x1d4>)
 8001e76:	f008 feef 	bl	800ac58 <memset>
				memset(&DUTY_CYCLE_FE_MIN_CHAR, 0, strlen(DUTY_CYCLE_FE_MIN_CHAR));
 8001e7a:	4853      	ldr	r0, [pc, #332]	; (8001fc8 <reset_dados+0x1d8>)
 8001e7c:	f7fe f9b2 	bl	80001e4 <strlen>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	2100      	movs	r1, #0
 8001e86:	4850      	ldr	r0, [pc, #320]	; (8001fc8 <reset_dados+0x1d8>)
 8001e88:	f008 fee6 	bl	800ac58 <memset>
				memset(&DUTY_CYCLE_AC_CHAR, 0, strlen(DUTY_CYCLE_AC_CHAR));
 8001e8c:	484f      	ldr	r0, [pc, #316]	; (8001fcc <reset_dados+0x1dc>)
 8001e8e:	f7fe f9a9 	bl	80001e4 <strlen>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461a      	mov	r2, r3
 8001e96:	2100      	movs	r1, #0
 8001e98:	484c      	ldr	r0, [pc, #304]	; (8001fcc <reset_dados+0x1dc>)
 8001e9a:	f008 fedd 	bl	800ac58 <memset>
				memset(&DUTY_CYCLE_AC_MAX_CHAR, 0, strlen(DUTY_CYCLE_AC_MAX_CHAR));
 8001e9e:	484c      	ldr	r0, [pc, #304]	; (8001fd0 <reset_dados+0x1e0>)
 8001ea0:	f7fe f9a0 	bl	80001e4 <strlen>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4849      	ldr	r0, [pc, #292]	; (8001fd0 <reset_dados+0x1e0>)
 8001eac:	f008 fed4 	bl	800ac58 <memset>
				memset(&DUTY_CYCLE_FR_CHAR, 0, strlen(DUTY_CYCLE_FR_CHAR));
 8001eb0:	4848      	ldr	r0, [pc, #288]	; (8001fd4 <reset_dados+0x1e4>)
 8001eb2:	f7fe f997 	bl	80001e4 <strlen>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4845      	ldr	r0, [pc, #276]	; (8001fd4 <reset_dados+0x1e4>)
 8001ebe:	f008 fecb 	bl	800ac58 <memset>
				memset(&DUTY_CYCLE_FR_MIN_CHAR, 0, strlen(DUTY_CYCLE_FR_MIN_CHAR));
 8001ec2:	4845      	ldr	r0, [pc, #276]	; (8001fd8 <reset_dados+0x1e8>)
 8001ec4:	f7fe f98e 	bl	80001e4 <strlen>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4842      	ldr	r0, [pc, #264]	; (8001fd8 <reset_dados+0x1e8>)
 8001ed0:	f008 fec2 	bl	800ac58 <memset>
				memset(&TIMEOUT_PING_CHAR, 0, strlen(TIMEOUT_PING_CHAR));
 8001ed4:	4841      	ldr	r0, [pc, #260]	; (8001fdc <reset_dados+0x1ec>)
 8001ed6:	f7fe f985 	bl	80001e4 <strlen>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	2100      	movs	r1, #0
 8001ee0:	483e      	ldr	r0, [pc, #248]	; (8001fdc <reset_dados+0x1ec>)
 8001ee2:	f008 feb9 	bl	800ac58 <memset>
				memset(&DUTYFE_CHAR, 0, strlen(DUTYFE_CHAR));
 8001ee6:	483e      	ldr	r0, [pc, #248]	; (8001fe0 <reset_dados+0x1f0>)
 8001ee8:	f7fe f97c 	bl	80001e4 <strlen>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	483b      	ldr	r0, [pc, #236]	; (8001fe0 <reset_dados+0x1f0>)
 8001ef4:	f008 feb0 	bl	800ac58 <memset>
				memset(&DUTYACEL_CHAR, 0, strlen(DUTYACEL_CHAR));
 8001ef8:	483a      	ldr	r0, [pc, #232]	; (8001fe4 <reset_dados+0x1f4>)
 8001efa:	f7fe f973 	bl	80001e4 <strlen>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461a      	mov	r2, r3
 8001f02:	2100      	movs	r1, #0
 8001f04:	4837      	ldr	r0, [pc, #220]	; (8001fe4 <reset_dados+0x1f4>)
 8001f06:	f008 fea7 	bl	800ac58 <memset>
				memset(&DUTYFR_CHAR, 0, strlen(DUTYFR_CHAR));
 8001f0a:	4837      	ldr	r0, [pc, #220]	; (8001fe8 <reset_dados+0x1f8>)
 8001f0c:	f7fe f96a 	bl	80001e4 <strlen>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	2100      	movs	r1, #0
 8001f16:	4834      	ldr	r0, [pc, #208]	; (8001fe8 <reset_dados+0x1f8>)
 8001f18:	f008 fe9e 	bl	800ac58 <memset>
				memset(&NUMBER_OF_FEEDBACKS_CHAR, 0, strlen(NUMBER_OF_FEEDBACKS_CHAR));
 8001f1c:	4833      	ldr	r0, [pc, #204]	; (8001fec <reset_dados+0x1fc>)
 8001f1e:	f7fe f961 	bl	80001e4 <strlen>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461a      	mov	r2, r3
 8001f26:	2100      	movs	r1, #0
 8001f28:	4830      	ldr	r0, [pc, #192]	; (8001fec <reset_dados+0x1fc>)
 8001f2a:	f008 fe95 	bl	800ac58 <memset>

				/* Apaga os buffers de dados da flash */
				memset(BUFFER_FLASH_L, 0, strlen(BUFFER_FLASH_L));
 8001f2e:	4830      	ldr	r0, [pc, #192]	; (8001ff0 <reset_dados+0x200>)
 8001f30:	f7fe f958 	bl	80001e4 <strlen>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	2100      	movs	r1, #0
 8001f3a:	482d      	ldr	r0, [pc, #180]	; (8001ff0 <reset_dados+0x200>)
 8001f3c:	f008 fe8c 	bl	800ac58 <memset>
				memset(BUFFER_FLASH, 0, strlen(BUFFER_FLASH));
 8001f40:	482c      	ldr	r0, [pc, #176]	; (8001ff4 <reset_dados+0x204>)
 8001f42:	f7fe f94f 	bl	80001e4 <strlen>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4829      	ldr	r0, [pc, #164]	; (8001ff4 <reset_dados+0x204>)
 8001f4e:	f008 fe83 	bl	800ac58 <memset>

				/* Retornar valores padrao */
				usar_valores_padrao();
 8001f52:	f000 f89d 	bl	8002090 <usar_valores_padrao>

				/* Apaga flash */
				FLASH_apaga(END_INICIAL, 2);
 8001f56:	2102      	movs	r1, #2
 8001f58:	4827      	ldr	r0, [pc, #156]	; (8001ff8 <reset_dados+0x208>)
 8001f5a:	f7ff f82f 	bl	8000fbc <FLASH_apaga>

				/* Inicializa novamente os parametros */
				inicializar_parametros();
 8001f5e:	f001 fe29 	bl	8003bb4 <inicializar_parametros>

				/* Gera novamente os frames */
				GerarFrames();
 8001f62:	f002 fcef 	bl	8004944 <GerarFrames>

				memset(rcvd_data, 0, strlen(rcvd_data));
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe f93b 	bl	80001e4 <strlen>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f008 fe6f 	bl	800ac58 <memset>
				FLAG_EXIT = 1;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	613b      	str	r3, [r7, #16]

				escreve_USB("\n\rMemoria Apagada\n\r");
 8001f7e:	481f      	ldr	r0, [pc, #124]	; (8001ffc <reset_dados+0x20c>)
 8001f80:	f003 fc56 	bl	8005830 <escreve_USB>
			}

			if(strcmp(command, "N") == 0){
 8001f84:	491e      	ldr	r1, [pc, #120]	; (8002000 <reset_dados+0x210>)
 8001f86:	6978      	ldr	r0, [r7, #20]
 8001f88:	f7fe f922 	bl	80001d0 <strcmp>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d104      	bne.n	8001f9c <reset_dados+0x1ac>
				FLAG_EXIT = 1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	613b      	str	r3, [r7, #16]

				escreve_USB("\r\nEXIT CANCEL\r\n");
 8001f96:	481b      	ldr	r0, [pc, #108]	; (8002004 <reset_dados+0x214>)
 8001f98:	f003 fc4a 	bl	8005830 <escreve_USB>
	while(!FLAG_EXIT){
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f43f af35 	beq.w	8001e0e <reset_dados+0x1e>
			}
		}

	}

}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	0800efbc 	.word	0x0800efbc
 8001fb4:	0800f008 	.word	0x0800f008
 8001fb8:	0800f034 	.word	0x0800f034
 8001fbc:	2000071c 	.word	0x2000071c
 8001fc0:	0800eec4 	.word	0x0800eec4
 8001fc4:	20000694 	.word	0x20000694
 8001fc8:	2000069c 	.word	0x2000069c
 8001fcc:	200006c4 	.word	0x200006c4
 8001fd0:	200006f4 	.word	0x200006f4
 8001fd4:	2000055c 	.word	0x2000055c
 8001fd8:	200007a0 	.word	0x200007a0
 8001fdc:	200004e0 	.word	0x200004e0
 8001fe0:	200002e0 	.word	0x200002e0
 8001fe4:	200004e8 	.word	0x200004e8
 8001fe8:	20000c30 	.word	0x20000c30
 8001fec:	200006f0 	.word	0x200006f0
 8001ff0:	20000568 	.word	0x20000568
 8001ff4:	200009b0 	.word	0x200009b0
 8001ff8:	08080000 	.word	0x08080000
 8001ffc:	0800f048 	.word	0x0800f048
 8002000:	0800f05c 	.word	0x0800f05c
 8002004:	0800f060 	.word	0x0800f060

08002008 <eliminar_nao_char>:
  *
  * @param  *string: String a ser alterada.
  *
  * @retval *string
  */
char* eliminar_nao_char(char* string){
 8002008:	b5b0      	push	{r4, r5, r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

	int error_index = 1;
 8002010:	2301      	movs	r3, #1
 8002012:	60fb      	str	r3, [r7, #12]

	while (error_index < strlen(string)){
 8002014:	e017      	b.n	8002046 <eliminar_nao_char+0x3e>
		error_index = strcspn(string, "\r\n\t  ");
 8002016:	4912      	ldr	r1, [pc, #72]	; (8002060 <eliminar_nao_char+0x58>)
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f008 fe5c 	bl	800acd6 <strcspn>
 800201e:	4603      	mov	r3, r0
 8002020:	60fb      	str	r3, [r7, #12]
		memmove(&string[error_index], &string[error_index + 1], strlen(string) - error_index);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	18d4      	adds	r4, r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3301      	adds	r3, #1
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	18d5      	adds	r5, r2, r3
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7fe f8d7 	bl	80001e4 <strlen>
 8002036:	4602      	mov	r2, r0
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	461a      	mov	r2, r3
 800203e:	4629      	mov	r1, r5
 8002040:	4620      	mov	r0, r4
 8002042:	f008 fdef 	bl	800ac24 <memmove>
	while (error_index < strlen(string)){
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7fe f8cc 	bl	80001e4 <strlen>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	429a      	cmp	r2, r3
 8002052:	d8e0      	bhi.n	8002016 <eliminar_nao_char+0xe>
	}

	return string;
 8002054:	687b      	ldr	r3, [r7, #4]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bdb0      	pop	{r4, r5, r7, pc}
 800205e:	bf00      	nop
 8002060:	0800f070 	.word	0x0800f070

08002064 <apagar_tela>:
  *
  * @param  none
  *
  * @retval void
  */
void apagar_tela(){
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
	for (int times = 0; times < 60; times++){
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	e005      	b.n	800207c <apagar_tela+0x18>
		escreve_USB("\n\r");
 8002070:	4806      	ldr	r0, [pc, #24]	; (800208c <apagar_tela+0x28>)
 8002072:	f003 fbdd 	bl	8005830 <escreve_USB>
	for (int times = 0; times < 60; times++){
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3301      	adds	r3, #1
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b3b      	cmp	r3, #59	; 0x3b
 8002080:	ddf6      	ble.n	8002070 <apagar_tela+0xc>
	}
}
 8002082:	bf00      	nop
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	0800efbc 	.word	0x0800efbc

08002090 <usar_valores_padrao>:
  *
  * @param  none
  *
  * @retval void
  */
void usar_valores_padrao(){
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0

	memset(ID, 0, strlen(ID));
 8002094:	481d      	ldr	r0, [pc, #116]	; (800210c <usar_valores_padrao+0x7c>)
 8002096:	f7fe f8a5 	bl	80001e4 <strlen>
 800209a:	4603      	mov	r3, r0
 800209c:	461a      	mov	r2, r3
 800209e:	2100      	movs	r1, #0
 80020a0:	481a      	ldr	r0, [pc, #104]	; (800210c <usar_valores_padrao+0x7c>)
 80020a2:	f008 fdd9 	bl	800ac58 <memset>
	strcat(ID, "CR2100");
 80020a6:	4819      	ldr	r0, [pc, #100]	; (800210c <usar_valores_padrao+0x7c>)
 80020a8:	f7fe f89c 	bl	80001e4 <strlen>
 80020ac:	4603      	mov	r3, r0
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <usar_valores_padrao+0x7c>)
 80020b2:	4413      	add	r3, r2
 80020b4:	4a16      	ldr	r2, [pc, #88]	; (8002110 <usar_valores_padrao+0x80>)
 80020b6:	6810      	ldr	r0, [r2, #0]
 80020b8:	6018      	str	r0, [r3, #0]
 80020ba:	8891      	ldrh	r1, [r2, #4]
 80020bc:	7992      	ldrb	r2, [r2, #6]
 80020be:	8099      	strh	r1, [r3, #4]
 80020c0:	719a      	strb	r2, [r3, #6]
	TIMEOUT_PING = PING_TIMEOUT_STD;
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <usar_valores_padrao+0x84>)
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	601a      	str	r2, [r3, #0]
	DUTY_CYCLE_FE = PWM_FE_MAX;
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <usar_valores_padrao+0x88>)
 80020cc:	4a13      	ldr	r2, [pc, #76]	; (800211c <usar_valores_padrao+0x8c>)
 80020ce:	601a      	str	r2, [r3, #0]
	DUTY_CYCLE_FE_MIN = PWM_FE_MIN;
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <usar_valores_padrao+0x90>)
 80020d2:	4a14      	ldr	r2, [pc, #80]	; (8002124 <usar_valores_padrao+0x94>)
 80020d4:	601a      	str	r2, [r3, #0]
	DUTY_CYCLE_AC = PWM_AC_MIN;
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <usar_valores_padrao+0x98>)
 80020d8:	4a14      	ldr	r2, [pc, #80]	; (800212c <usar_valores_padrao+0x9c>)
 80020da:	601a      	str	r2, [r3, #0]
	DUTY_CYCLE_AC_MAX = PWM_AC_MAX;
 80020dc:	4b14      	ldr	r3, [pc, #80]	; (8002130 <usar_valores_padrao+0xa0>)
 80020de:	4a15      	ldr	r2, [pc, #84]	; (8002134 <usar_valores_padrao+0xa4>)
 80020e0:	601a      	str	r2, [r3, #0]
	DUTY_CYCLE_FR = PWM_FR_MAX;
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <usar_valores_padrao+0xa8>)
 80020e4:	4a15      	ldr	r2, [pc, #84]	; (800213c <usar_valores_padrao+0xac>)
 80020e6:	601a      	str	r2, [r3, #0]
	DUTY_CYCLE_FR_MIN = PWM_FR_MIN;
 80020e8:	4b15      	ldr	r3, [pc, #84]	; (8002140 <usar_valores_padrao+0xb0>)
 80020ea:	4a16      	ldr	r2, [pc, #88]	; (8002144 <usar_valores_padrao+0xb4>)
 80020ec:	601a      	str	r2, [r3, #0]
	DUTYFE = PERCENT_FE;
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <usar_valores_padrao+0xb8>)
 80020f0:	2264      	movs	r2, #100	; 0x64
 80020f2:	701a      	strb	r2, [r3, #0]
	DUTYACEL = PERCENT_AC;
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <usar_valores_padrao+0xbc>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
	DUTYFR = PERCENT_FR;
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <usar_valores_padrao+0xc0>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
	NUMBER_OF_FEEDBACKS = FEEDBACK_NUM_STD;
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <usar_valores_padrao+0xc4>)
 8002102:	2205      	movs	r2, #5
 8002104:	701a      	strb	r2, [r3, #0]
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000000 	.word	0x20000000
 8002110:	0800f078 	.word	0x0800f078
 8002114:	20000028 	.word	0x20000028
 8002118:	2000000c 	.word	0x2000000c
 800211c:	42aa0000 	.word	0x42aa0000
 8002120:	20000010 	.word	0x20000010
 8002124:	418b3333 	.word	0x418b3333
 8002128:	20000014 	.word	0x20000014
 800212c:	417ccccd 	.word	0x417ccccd
 8002130:	20000018 	.word	0x20000018
 8002134:	42a9999a 	.word	0x42a9999a
 8002138:	2000001c 	.word	0x2000001c
 800213c:	42b00000 	.word	0x42b00000
 8002140:	20000020 	.word	0x20000020
 8002144:	41280000 	.word	0x41280000
 8002148:	20000024 	.word	0x20000024
 800214c:	20000261 	.word	0x20000261
 8002150:	20000262 	.word	0x20000262
 8002154:	20000030 	.word	0x20000030

08002158 <Print_Menu>:
  *
  * @param  none
  *
  * @retval void
  */
void Print_Menu(){
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0

	escreve_USB("\r\n\r\nMENU\r\n");
 800215c:	481d      	ldr	r0, [pc, #116]	; (80021d4 <Print_Menu+0x7c>)
 800215e:	f003 fb67 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rSELECT       Shift + key\n\r");
 8002162:	481d      	ldr	r0, [pc, #116]	; (80021d8 <Print_Menu+0x80>)
 8002164:	f003 fb64 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rID EQUIPAMENTO                 A");
 8002168:	481c      	ldr	r0, [pc, #112]	; (80021dc <Print_Menu+0x84>)
 800216a:	f003 fb61 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rTIMEOUT PING                   B");
 800216e:	481c      	ldr	r0, [pc, #112]	; (80021e0 <Print_Menu+0x88>)
 8002170:	f003 fb5e 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rDUTYCYCLE MAX FREIO EMERG      C");
 8002174:	481b      	ldr	r0, [pc, #108]	; (80021e4 <Print_Menu+0x8c>)
 8002176:	f003 fb5b 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rDUTYCYCLE MIN FREIO EMERG      D");
 800217a:	481b      	ldr	r0, [pc, #108]	; (80021e8 <Print_Menu+0x90>)
 800217c:	f003 fb58 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rDUTYCYCLE MAX ACEL             E");
 8002180:	481a      	ldr	r0, [pc, #104]	; (80021ec <Print_Menu+0x94>)
 8002182:	f003 fb55 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rDUTYCYCLE MIN ACEL             F");
 8002186:	481a      	ldr	r0, [pc, #104]	; (80021f0 <Print_Menu+0x98>)
 8002188:	f003 fb52 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rDUTYCYCLE MAX FREIO RET        G");
 800218c:	4819      	ldr	r0, [pc, #100]	; (80021f4 <Print_Menu+0x9c>)
 800218e:	f003 fb4f 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rDUTYCYCLE MIN FREIO RET        H");
 8002192:	4819      	ldr	r0, [pc, #100]	; (80021f8 <Print_Menu+0xa0>)
 8002194:	f003 fb4c 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rPERCENTUAL PWM FREIO EMERG     I");
 8002198:	4818      	ldr	r0, [pc, #96]	; (80021fc <Print_Menu+0xa4>)
 800219a:	f003 fb49 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rPERCENTUAL PWM ACEL            J");
 800219e:	4818      	ldr	r0, [pc, #96]	; (8002200 <Print_Menu+0xa8>)
 80021a0:	f003 fb46 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rPERCENTUAL PWM FREIO RET       K");
 80021a4:	4817      	ldr	r0, [pc, #92]	; (8002204 <Print_Menu+0xac>)
 80021a6:	f003 fb43 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rNUMERO FEEDBACKS RADIO:        L");
 80021aa:	4817      	ldr	r0, [pc, #92]	; (8002208 <Print_Menu+0xb0>)
 80021ac:	f003 fb40 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rVER PARAMETROS ATUAIS          V");
 80021b0:	4816      	ldr	r0, [pc, #88]	; (800220c <Print_Menu+0xb4>)
 80021b2:	f003 fb3d 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rSALVAR DADOS->MEMORIA          S");
 80021b6:	4816      	ldr	r0, [pc, #88]	; (8002210 <Print_Menu+0xb8>)
 80021b8:	f003 fb3a 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rAPAGAR DADOS DA MEMORIA        Y");
 80021bc:	4815      	ldr	r0, [pc, #84]	; (8002214 <Print_Menu+0xbc>)
 80021be:	f003 fb37 	bl	8005830 <escreve_USB>
	escreve_USB("\n\rSAIR/LEAVE MENU                X");
 80021c2:	4815      	ldr	r0, [pc, #84]	; (8002218 <Print_Menu+0xc0>)
 80021c4:	f003 fb34 	bl	8005830 <escreve_USB>
	escreve_USB("\r");
 80021c8:	4814      	ldr	r0, [pc, #80]	; (800221c <Print_Menu+0xc4>)
 80021ca:	f003 fb31 	bl	8005830 <escreve_USB>
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	0800f080 	.word	0x0800f080
 80021d8:	0800f08c 	.word	0x0800f08c
 80021dc:	0800f0ac 	.word	0x0800f0ac
 80021e0:	0800f0d0 	.word	0x0800f0d0
 80021e4:	0800f0f4 	.word	0x0800f0f4
 80021e8:	0800f118 	.word	0x0800f118
 80021ec:	0800f13c 	.word	0x0800f13c
 80021f0:	0800f160 	.word	0x0800f160
 80021f4:	0800f184 	.word	0x0800f184
 80021f8:	0800f1a8 	.word	0x0800f1a8
 80021fc:	0800f1cc 	.word	0x0800f1cc
 8002200:	0800f1f0 	.word	0x0800f1f0
 8002204:	0800f214 	.word	0x0800f214
 8002208:	0800f238 	.word	0x0800f238
 800220c:	0800f25c 	.word	0x0800f25c
 8002210:	0800f280 	.word	0x0800f280
 8002214:	0800f2a4 	.word	0x0800f2a4
 8002218:	0800f2c8 	.word	0x0800f2c8
 800221c:	0800eef0 	.word	0x0800eef0

08002220 <gravar_parametros>:
  *
  * @param  none
  *
  * @retval void
  */
void gravar_parametros(){
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0

	strcat(BUFFER_FLASH, (char *) ID);
 8002224:	4932      	ldr	r1, [pc, #200]	; (80022f0 <gravar_parametros+0xd0>)
 8002226:	4833      	ldr	r0, [pc, #204]	; (80022f4 <gravar_parametros+0xd4>)
 8002228:	f008 fd3e 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DIV);
 800222c:	4932      	ldr	r1, [pc, #200]	; (80022f8 <gravar_parametros+0xd8>)
 800222e:	4831      	ldr	r0, [pc, #196]	; (80022f4 <gravar_parametros+0xd4>)
 8002230:	f008 fd3a 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, TIMEOUT_PING_CHAR);
 8002234:	4931      	ldr	r1, [pc, #196]	; (80022fc <gravar_parametros+0xdc>)
 8002236:	482f      	ldr	r0, [pc, #188]	; (80022f4 <gravar_parametros+0xd4>)
 8002238:	f008 fd36 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DIV);
 800223c:	492e      	ldr	r1, [pc, #184]	; (80022f8 <gravar_parametros+0xd8>)
 800223e:	482d      	ldr	r0, [pc, #180]	; (80022f4 <gravar_parametros+0xd4>)
 8002240:	f008 fd32 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DUTY_CYCLE_FE_CHAR);
 8002244:	492e      	ldr	r1, [pc, #184]	; (8002300 <gravar_parametros+0xe0>)
 8002246:	482b      	ldr	r0, [pc, #172]	; (80022f4 <gravar_parametros+0xd4>)
 8002248:	f008 fd2e 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DIV);
 800224c:	492a      	ldr	r1, [pc, #168]	; (80022f8 <gravar_parametros+0xd8>)
 800224e:	4829      	ldr	r0, [pc, #164]	; (80022f4 <gravar_parametros+0xd4>)
 8002250:	f008 fd2a 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DUTY_CYCLE_FE_MIN_CHAR);
 8002254:	492b      	ldr	r1, [pc, #172]	; (8002304 <gravar_parametros+0xe4>)
 8002256:	4827      	ldr	r0, [pc, #156]	; (80022f4 <gravar_parametros+0xd4>)
 8002258:	f008 fd26 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DIV);
 800225c:	4926      	ldr	r1, [pc, #152]	; (80022f8 <gravar_parametros+0xd8>)
 800225e:	4825      	ldr	r0, [pc, #148]	; (80022f4 <gravar_parametros+0xd4>)
 8002260:	f008 fd22 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DUTY_CYCLE_FR_CHAR);
 8002264:	4928      	ldr	r1, [pc, #160]	; (8002308 <gravar_parametros+0xe8>)
 8002266:	4823      	ldr	r0, [pc, #140]	; (80022f4 <gravar_parametros+0xd4>)
 8002268:	f008 fd1e 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DIV);
 800226c:	4922      	ldr	r1, [pc, #136]	; (80022f8 <gravar_parametros+0xd8>)
 800226e:	4821      	ldr	r0, [pc, #132]	; (80022f4 <gravar_parametros+0xd4>)
 8002270:	f008 fd1a 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DUTY_CYCLE_FR_MIN_CHAR);
 8002274:	4925      	ldr	r1, [pc, #148]	; (800230c <gravar_parametros+0xec>)
 8002276:	481f      	ldr	r0, [pc, #124]	; (80022f4 <gravar_parametros+0xd4>)
 8002278:	f008 fd16 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DIV);
 800227c:	491e      	ldr	r1, [pc, #120]	; (80022f8 <gravar_parametros+0xd8>)
 800227e:	481d      	ldr	r0, [pc, #116]	; (80022f4 <gravar_parametros+0xd4>)
 8002280:	f008 fd12 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DUTY_CYCLE_AC_CHAR);
 8002284:	4922      	ldr	r1, [pc, #136]	; (8002310 <gravar_parametros+0xf0>)
 8002286:	481b      	ldr	r0, [pc, #108]	; (80022f4 <gravar_parametros+0xd4>)
 8002288:	f008 fd0e 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DIV);
 800228c:	491a      	ldr	r1, [pc, #104]	; (80022f8 <gravar_parametros+0xd8>)
 800228e:	4819      	ldr	r0, [pc, #100]	; (80022f4 <gravar_parametros+0xd4>)
 8002290:	f008 fd0a 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DUTY_CYCLE_AC_MAX_CHAR);
 8002294:	491f      	ldr	r1, [pc, #124]	; (8002314 <gravar_parametros+0xf4>)
 8002296:	4817      	ldr	r0, [pc, #92]	; (80022f4 <gravar_parametros+0xd4>)
 8002298:	f008 fd06 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DIV);
 800229c:	4916      	ldr	r1, [pc, #88]	; (80022f8 <gravar_parametros+0xd8>)
 800229e:	4815      	ldr	r0, [pc, #84]	; (80022f4 <gravar_parametros+0xd4>)
 80022a0:	f008 fd02 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DUTYFE_CHAR);
 80022a4:	491c      	ldr	r1, [pc, #112]	; (8002318 <gravar_parametros+0xf8>)
 80022a6:	4813      	ldr	r0, [pc, #76]	; (80022f4 <gravar_parametros+0xd4>)
 80022a8:	f008 fcfe 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DIV);
 80022ac:	4912      	ldr	r1, [pc, #72]	; (80022f8 <gravar_parametros+0xd8>)
 80022ae:	4811      	ldr	r0, [pc, #68]	; (80022f4 <gravar_parametros+0xd4>)
 80022b0:	f008 fcfa 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DUTYACEL_CHAR);
 80022b4:	4919      	ldr	r1, [pc, #100]	; (800231c <gravar_parametros+0xfc>)
 80022b6:	480f      	ldr	r0, [pc, #60]	; (80022f4 <gravar_parametros+0xd4>)
 80022b8:	f008 fcf6 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DIV);
 80022bc:	490e      	ldr	r1, [pc, #56]	; (80022f8 <gravar_parametros+0xd8>)
 80022be:	480d      	ldr	r0, [pc, #52]	; (80022f4 <gravar_parametros+0xd4>)
 80022c0:	f008 fcf2 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DUTYFR_CHAR);
 80022c4:	4916      	ldr	r1, [pc, #88]	; (8002320 <gravar_parametros+0x100>)
 80022c6:	480b      	ldr	r0, [pc, #44]	; (80022f4 <gravar_parametros+0xd4>)
 80022c8:	f008 fcee 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, DIV);
 80022cc:	490a      	ldr	r1, [pc, #40]	; (80022f8 <gravar_parametros+0xd8>)
 80022ce:	4809      	ldr	r0, [pc, #36]	; (80022f4 <gravar_parametros+0xd4>)
 80022d0:	f008 fcea 	bl	800aca8 <strcat>
	strcat(BUFFER_FLASH, NUMBER_OF_FEEDBACKS_CHAR);
 80022d4:	4913      	ldr	r1, [pc, #76]	; (8002324 <gravar_parametros+0x104>)
 80022d6:	4807      	ldr	r0, [pc, #28]	; (80022f4 <gravar_parametros+0xd4>)
 80022d8:	f008 fce6 	bl	800aca8 <strcat>

	FLASH_apaga(END_INICIAL, 2); // Page 2
 80022dc:	2102      	movs	r1, #2
 80022de:	4812      	ldr	r0, [pc, #72]	; (8002328 <gravar_parametros+0x108>)
 80022e0:	f7fe fe6c 	bl	8000fbc <FLASH_apaga>
	FLASH_escreve_32bits(END_INICIAL, BUFFER_FLASH);
 80022e4:	4903      	ldr	r1, [pc, #12]	; (80022f4 <gravar_parametros+0xd4>)
 80022e6:	4810      	ldr	r0, [pc, #64]	; (8002328 <gravar_parametros+0x108>)
 80022e8:	f7fe fea2 	bl	8001030 <FLASH_escreve_32bits>
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000000 	.word	0x20000000
 80022f4:	200009b0 	.word	0x200009b0
 80022f8:	0800fc34 	.word	0x0800fc34
 80022fc:	200004e0 	.word	0x200004e0
 8002300:	20000694 	.word	0x20000694
 8002304:	2000069c 	.word	0x2000069c
 8002308:	2000055c 	.word	0x2000055c
 800230c:	200007a0 	.word	0x200007a0
 8002310:	200006c4 	.word	0x200006c4
 8002314:	200006f4 	.word	0x200006f4
 8002318:	200002e0 	.word	0x200002e0
 800231c:	200004e8 	.word	0x200004e8
 8002320:	20000c30 	.word	0x20000c30
 8002324:	200006f0 	.word	0x200006f0
 8002328:	08080000 	.word	0x08080000

0800232c <ver_parametros>:
  *
  * @param  none
  *
  * @retval void
  */
void ver_parametros(){
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0

	escreve_USB("\n\r");
 8002330:	4826      	ldr	r0, [pc, #152]	; (80023cc <ver_parametros+0xa0>)
 8002332:	f003 fa7d 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nID EQUIPAMENTO:");
 8002336:	4826      	ldr	r0, [pc, #152]	; (80023d0 <ver_parametros+0xa4>)
 8002338:	f003 fa7a 	bl	8005830 <escreve_USB>
	escreve_USB((char *)ID);
 800233c:	4825      	ldr	r0, [pc, #148]	; (80023d4 <ver_parametros+0xa8>)
 800233e:	f003 fa77 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nTIMEOUT PING:");
 8002342:	4825      	ldr	r0, [pc, #148]	; (80023d8 <ver_parametros+0xac>)
 8002344:	f003 fa74 	bl	8005830 <escreve_USB>
	escreve_USB(TIMEOUT_PING_CHAR);
 8002348:	4824      	ldr	r0, [pc, #144]	; (80023dc <ver_parametros+0xb0>)
 800234a:	f003 fa71 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nDUTYCYCLE MAX FREIO EMERG:");
 800234e:	4824      	ldr	r0, [pc, #144]	; (80023e0 <ver_parametros+0xb4>)
 8002350:	f003 fa6e 	bl	8005830 <escreve_USB>
	escreve_USB(DUTY_CYCLE_FE_CHAR);
 8002354:	4823      	ldr	r0, [pc, #140]	; (80023e4 <ver_parametros+0xb8>)
 8002356:	f003 fa6b 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nDUTYCYCLE MIN FREIO EMERG:");
 800235a:	4823      	ldr	r0, [pc, #140]	; (80023e8 <ver_parametros+0xbc>)
 800235c:	f003 fa68 	bl	8005830 <escreve_USB>
	escreve_USB(DUTY_CYCLE_FE_MIN_CHAR);
 8002360:	4822      	ldr	r0, [pc, #136]	; (80023ec <ver_parametros+0xc0>)
 8002362:	f003 fa65 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nDUTYCYCLE MAX ACEL:");
 8002366:	4822      	ldr	r0, [pc, #136]	; (80023f0 <ver_parametros+0xc4>)
 8002368:	f003 fa62 	bl	8005830 <escreve_USB>
	escreve_USB(DUTY_CYCLE_AC_MAX_CHAR);
 800236c:	4821      	ldr	r0, [pc, #132]	; (80023f4 <ver_parametros+0xc8>)
 800236e:	f003 fa5f 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nDUTYCYCLE MIN ACEL:");
 8002372:	4821      	ldr	r0, [pc, #132]	; (80023f8 <ver_parametros+0xcc>)
 8002374:	f003 fa5c 	bl	8005830 <escreve_USB>
	escreve_USB(DUTY_CYCLE_AC_CHAR);
 8002378:	4820      	ldr	r0, [pc, #128]	; (80023fc <ver_parametros+0xd0>)
 800237a:	f003 fa59 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nDUTYCYCLE MAX FREIO RET:");
 800237e:	4820      	ldr	r0, [pc, #128]	; (8002400 <ver_parametros+0xd4>)
 8002380:	f003 fa56 	bl	8005830 <escreve_USB>
	escreve_USB(DUTY_CYCLE_FR_CHAR);
 8002384:	481f      	ldr	r0, [pc, #124]	; (8002404 <ver_parametros+0xd8>)
 8002386:	f003 fa53 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nDUTYCYCLE MIN FREIO RET:");
 800238a:	481f      	ldr	r0, [pc, #124]	; (8002408 <ver_parametros+0xdc>)
 800238c:	f003 fa50 	bl	8005830 <escreve_USB>
	escreve_USB(DUTY_CYCLE_FR_MIN_CHAR);
 8002390:	481e      	ldr	r0, [pc, #120]	; (800240c <ver_parametros+0xe0>)
 8002392:	f003 fa4d 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nPERCENTUAL PWM FREIO EMERG:");
 8002396:	481e      	ldr	r0, [pc, #120]	; (8002410 <ver_parametros+0xe4>)
 8002398:	f003 fa4a 	bl	8005830 <escreve_USB>
	escreve_USB(DUTYFE_CHAR);
 800239c:	481d      	ldr	r0, [pc, #116]	; (8002414 <ver_parametros+0xe8>)
 800239e:	f003 fa47 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nPERCENTUAL PWM ACEL:");
 80023a2:	481d      	ldr	r0, [pc, #116]	; (8002418 <ver_parametros+0xec>)
 80023a4:	f003 fa44 	bl	8005830 <escreve_USB>
	escreve_USB(DUTYACEL_CHAR);
 80023a8:	481c      	ldr	r0, [pc, #112]	; (800241c <ver_parametros+0xf0>)
 80023aa:	f003 fa41 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nPERCENTUAL PWM FREIO RET:");
 80023ae:	481c      	ldr	r0, [pc, #112]	; (8002420 <ver_parametros+0xf4>)
 80023b0:	f003 fa3e 	bl	8005830 <escreve_USB>
	escreve_USB(DUTYFR_CHAR);
 80023b4:	481b      	ldr	r0, [pc, #108]	; (8002424 <ver_parametros+0xf8>)
 80023b6:	f003 fa3b 	bl	8005830 <escreve_USB>
	escreve_USB("\r\nNUMERO FEEDBACKS RADIO:");
 80023ba:	481b      	ldr	r0, [pc, #108]	; (8002428 <ver_parametros+0xfc>)
 80023bc:	f003 fa38 	bl	8005830 <escreve_USB>
	escreve_USB(NUMBER_OF_FEEDBACKS_CHAR);
 80023c0:	481a      	ldr	r0, [pc, #104]	; (800242c <ver_parametros+0x100>)
 80023c2:	f003 fa35 	bl	8005830 <escreve_USB>

}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	0800efbc 	.word	0x0800efbc
 80023d0:	0800f2ec 	.word	0x0800f2ec
 80023d4:	20000000 	.word	0x20000000
 80023d8:	0800f300 	.word	0x0800f300
 80023dc:	200004e0 	.word	0x200004e0
 80023e0:	0800f310 	.word	0x0800f310
 80023e4:	20000694 	.word	0x20000694
 80023e8:	0800f330 	.word	0x0800f330
 80023ec:	2000069c 	.word	0x2000069c
 80023f0:	0800f350 	.word	0x0800f350
 80023f4:	200006f4 	.word	0x200006f4
 80023f8:	0800f368 	.word	0x0800f368
 80023fc:	200006c4 	.word	0x200006c4
 8002400:	0800f380 	.word	0x0800f380
 8002404:	2000055c 	.word	0x2000055c
 8002408:	0800f39c 	.word	0x0800f39c
 800240c:	200007a0 	.word	0x200007a0
 8002410:	0800f3b8 	.word	0x0800f3b8
 8002414:	200002e0 	.word	0x200002e0
 8002418:	0800f3d8 	.word	0x0800f3d8
 800241c:	200004e8 	.word	0x200004e8
 8002420:	0800f3f0 	.word	0x0800f3f0
 8002424:	20000c30 	.word	0x20000c30
 8002428:	0800f40c 	.word	0x0800f40c
 800242c:	200006f0 	.word	0x200006f0

08002430 <FIRMWARE_BEGIN>:
  *
  * @param  none
  *
  * @retval void
  */
void FIRMWARE_BEGIN(){
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  escreve_USB("\r\nRESET\r\n");
 8002434:	481d      	ldr	r0, [pc, #116]	; (80024ac <FIRMWARE_BEGIN+0x7c>)
 8002436:	f003 f9fb 	bl	8005830 <escreve_USB>
  escreve_USB("\n\rWELCOME to ");
 800243a:	481d      	ldr	r0, [pc, #116]	; (80024b0 <FIRMWARE_BEGIN+0x80>)
 800243c:	f003 f9f8 	bl	8005830 <escreve_USB>
  escreve_USB(SIGLA);
 8002440:	481c      	ldr	r0, [pc, #112]	; (80024b4 <FIRMWARE_BEGIN+0x84>)
 8002442:	f003 f9f5 	bl	8005830 <escreve_USB>
  escreve_USB("!\n\r \n\r");
 8002446:	481c      	ldr	r0, [pc, #112]	; (80024b8 <FIRMWARE_BEGIN+0x88>)
 8002448:	f003 f9f2 	bl	8005830 <escreve_USB>
  escreve_USB(MEANING_1);
 800244c:	481b      	ldr	r0, [pc, #108]	; (80024bc <FIRMWARE_BEGIN+0x8c>)
 800244e:	f003 f9ef 	bl	8005830 <escreve_USB>
  escreve_USB("\n\r");
 8002452:	481b      	ldr	r0, [pc, #108]	; (80024c0 <FIRMWARE_BEGIN+0x90>)
 8002454:	f003 f9ec 	bl	8005830 <escreve_USB>
  escreve_USB(MEANING_2);
 8002458:	481a      	ldr	r0, [pc, #104]	; (80024c4 <FIRMWARE_BEGIN+0x94>)
 800245a:	f003 f9e9 	bl	8005830 <escreve_USB>
  escreve_USB("\n\r\n\r");
 800245e:	481a      	ldr	r0, [pc, #104]	; (80024c8 <FIRMWARE_BEGIN+0x98>)
 8002460:	f003 f9e6 	bl	8005830 <escreve_USB>
  escreve_USB("MCU info:  ");
 8002464:	4819      	ldr	r0, [pc, #100]	; (80024cc <FIRMWARE_BEGIN+0x9c>)
 8002466:	f003 f9e3 	bl	8005830 <escreve_USB>
  escreve_USB(MCU_INFO);
 800246a:	4819      	ldr	r0, [pc, #100]	; (80024d0 <FIRMWARE_BEGIN+0xa0>)
 800246c:	f003 f9e0 	bl	8005830 <escreve_USB>
  escreve_USB("\n\rEquipment ID: ");
 8002470:	4818      	ldr	r0, [pc, #96]	; (80024d4 <FIRMWARE_BEGIN+0xa4>)
 8002472:	f003 f9dd 	bl	8005830 <escreve_USB>
  escreve_USB(ID);
 8002476:	4818      	ldr	r0, [pc, #96]	; (80024d8 <FIRMWARE_BEGIN+0xa8>)
 8002478:	f003 f9da 	bl	8005830 <escreve_USB>
  escreve_USB("\n\rVersao:  ");
 800247c:	4817      	ldr	r0, [pc, #92]	; (80024dc <FIRMWARE_BEGIN+0xac>)
 800247e:	f003 f9d7 	bl	8005830 <escreve_USB>
  escreve_USB(VERSION);
 8002482:	4817      	ldr	r0, [pc, #92]	; (80024e0 <FIRMWARE_BEGIN+0xb0>)
 8002484:	f003 f9d4 	bl	8005830 <escreve_USB>
  escreve_USB("          FIRMWARE DATE: ");
 8002488:	4816      	ldr	r0, [pc, #88]	; (80024e4 <FIRMWARE_BEGIN+0xb4>)
 800248a:	f003 f9d1 	bl	8005830 <escreve_USB>
  escreve_USB(FIRMWARE_DATE);
 800248e:	4816      	ldr	r0, [pc, #88]	; (80024e8 <FIRMWARE_BEGIN+0xb8>)
 8002490:	f003 f9ce 	bl	8005830 <escreve_USB>
  escreve_USB("\n\r\n\r");
 8002494:	480c      	ldr	r0, [pc, #48]	; (80024c8 <FIRMWARE_BEGIN+0x98>)
 8002496:	f003 f9cb 	bl	8005830 <escreve_USB>
  escreve_USB(COPYRIGHT);
 800249a:	4814      	ldr	r0, [pc, #80]	; (80024ec <FIRMWARE_BEGIN+0xbc>)
 800249c:	f003 f9c8 	bl	8005830 <escreve_USB>
  escreve_USB("\n\r");
 80024a0:	4807      	ldr	r0, [pc, #28]	; (80024c0 <FIRMWARE_BEGIN+0x90>)
 80024a2:	f003 f9c5 	bl	8005830 <escreve_USB>
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	0800f428 	.word	0x0800f428
 80024b0:	0800f434 	.word	0x0800f434
 80024b4:	0800f444 	.word	0x0800f444
 80024b8:	0800f44c 	.word	0x0800f44c
 80024bc:	0800f454 	.word	0x0800f454
 80024c0:	0800f47c 	.word	0x0800f47c
 80024c4:	0800f480 	.word	0x0800f480
 80024c8:	0800f48c 	.word	0x0800f48c
 80024cc:	0800f494 	.word	0x0800f494
 80024d0:	0800f4a0 	.word	0x0800f4a0
 80024d4:	0800f4b0 	.word	0x0800f4b0
 80024d8:	20000000 	.word	0x20000000
 80024dc:	0800f4c4 	.word	0x0800f4c4
 80024e0:	0800f4d0 	.word	0x0800f4d0
 80024e4:	0800f4d8 	.word	0x0800f4d8
 80024e8:	0800f4f4 	.word	0x0800f4f4
 80024ec:	0800f500 	.word	0x0800f500

080024f0 <MONITORAMENTO>:
  *
  * @param  IDENTIFIER:	Identificador do status do sistema. 0 -> Sem falhas.
  *
  * @retval void
  */
void MONITORAMENTO(int IDENTIFIER){
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

	/* VALOR ANTERIOR IDENTIFIER */
	static int IDENTIFIER_ANTERIOR = 0;

	/* Verificar estado do ESP e da UPA */
	switch (IDENTIFIER){
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <MONITORAMENTO+0x16>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b05      	cmp	r3, #5
 8002502:	d017      	beq.n	8002534 <MONITORAMENTO+0x44>
 8002504:	e01a      	b.n	800253c <MONITORAMENTO+0x4c>
	case 0:		/* Sistema sem falhas */
		NOTIFICADOR_FALHA = 0;
 8002506:	4b67      	ldr	r3, [pc, #412]	; (80026a4 <MONITORAMENTO+0x1b4>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
		ESP_UPA_OK = 1;
 800250c:	4b66      	ldr	r3, [pc, #408]	; (80026a8 <MONITORAMENTO+0x1b8>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]
		if (!IDENTIFIER_ANTERIOR){}
 8002512:	4b66      	ldr	r3, [pc, #408]	; (80026ac <MONITORAMENTO+0x1bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d014      	beq.n	8002544 <MONITORAMENTO+0x54>
		else if (IDENTIFIER_ANTERIOR > 0){
 800251a:	4b64      	ldr	r3, [pc, #400]	; (80026ac <MONITORAMENTO+0x1bc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	dd10      	ble.n	8002544 <MONITORAMENTO+0x54>
			show_now();
 8002522:	f001 fecf 	bl	80042c4 <show_now>
			SYS_OK_RECOVERED(IDENTIFIER_ANTERIOR);
 8002526:	4b61      	ldr	r3, [pc, #388]	; (80026ac <MONITORAMENTO+0x1bc>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fc57 	bl	8002de0 <SYS_OK_RECOVERED>
		}
		/* else {
			strcat(BUFFER_SERIAL, "\r\nERRO! IDENTIFIER returned -1 or NaN\r\n");
			break;
		}*/
		break;
 8002532:	e007      	b.n	8002544 <MONITORAMENTO+0x54>
	case 5:
		/* Apenas CPU falhou */
		ESP_UPA_OK = 1;
 8002534:	4b5c      	ldr	r3, [pc, #368]	; (80026a8 <MONITORAMENTO+0x1b8>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]
		break;
 800253a:	e004      	b.n	8002546 <MONITORAMENTO+0x56>
	default:
		ESP_UPA_OK = 0;
 800253c:	4b5a      	ldr	r3, [pc, #360]	; (80026a8 <MONITORAMENTO+0x1b8>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
		break;
 8002542:	e000      	b.n	8002546 <MONITORAMENTO+0x56>
		break;
 8002544:	bf00      	nop
	}

	/* Se nao houver falhas, monitorar a rede
	 * ou se falhar, verificar apenas mudancas do IDENTIFIER */
	if (!NOTIFICADOR_FALHA || IDENTIFIER_ANTERIOR ^ IDENTIFIER){
 8002546:	4b57      	ldr	r3, [pc, #348]	; (80026a4 <MONITORAMENTO+0x1b4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <MONITORAMENTO+0x6a>
 800254e:	4b57      	ldr	r3, [pc, #348]	; (80026ac <MONITORAMENTO+0x1bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	f000 809f 	beq.w	8002698 <MONITORAMENTO+0x1a8>

		/*A SEGUINTE VERIFICACAO DEVE SER ARBITRARIA: DE ACORDO COM O NIVEL
		 * DE GRAVIDADE DO IDENTIFIER, DECIDIR SE ACIONA OU NAO O FREIO.
		 * VERIFICACAO PADRAO: SE **PELO MENOS UPA** APRESENTAR FALHA (IDENTIFIER > 1).*/
		bool VERIFICACAO_FREIO = (IDENTIFIER > 1);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b01      	cmp	r3, #1
 800255e:	bfcc      	ite	gt
 8002560:	2301      	movgt	r3, #1
 8002562:	2300      	movle	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	60fb      	str	r3, [r7, #12]

		if (VERIFICACAO_FREIO == true && !BREAK_STATUS){
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d11e      	bne.n	80025ac <MONITORAMENTO+0xbc>
 800256e:	4b50      	ldr	r3, [pc, #320]	; (80026b0 <MONITORAMENTO+0x1c0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d11a      	bne.n	80025ac <MONITORAMENTO+0xbc>
			BREAK_STATUS = 1;
 8002576:	4b4e      	ldr	r3, [pc, #312]	; (80026b0 <MONITORAMENTO+0x1c0>)
 8002578:	2201      	movs	r2, #1
 800257a:	601a      	str	r2, [r3, #0]
			feedback_multiple = 1;
 800257c:	4b4d      	ldr	r3, [pc, #308]	; (80026b4 <MONITORAMENTO+0x1c4>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]
			show_now();
 8002582:	f001 fe9f 	bl	80042c4 <show_now>
			strcat(BUFFER_SERIAL, "\r\nFREIO ACIONADO.\r\n");
 8002586:	484c      	ldr	r0, [pc, #304]	; (80026b8 <MONITORAMENTO+0x1c8>)
 8002588:	f7fd fe2c 	bl	80001e4 <strlen>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	4b49      	ldr	r3, [pc, #292]	; (80026b8 <MONITORAMENTO+0x1c8>)
 8002592:	4413      	add	r3, r2
 8002594:	4a49      	ldr	r2, [pc, #292]	; (80026bc <MONITORAMENTO+0x1cc>)
 8002596:	461d      	mov	r5, r3
 8002598:	4614      	mov	r4, r2
 800259a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800259c:	6028      	str	r0, [r5, #0]
 800259e:	6069      	str	r1, [r5, #4]
 80025a0:	60aa      	str	r2, [r5, #8]
 80025a2:	60eb      	str	r3, [r5, #12]
 80025a4:	6820      	ldr	r0, [r4, #0]
 80025a6:	6128      	str	r0, [r5, #16]
			Acionamento();
 80025a8:	f000 fdc8 	bl	800313c <Acionamento>
		}

		/* Se qualquer falha ocorrer, NOTIFICADOR_FALHA vai para 1 */
		if (IDENTIFIER && !NOTIFICADOR_FALHA){
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <MONITORAMENTO+0xd0>
 80025b2:	4b3c      	ldr	r3, [pc, #240]	; (80026a4 <MONITORAMENTO+0x1b4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d102      	bne.n	80025c0 <MONITORAMENTO+0xd0>
			NOTIFICADOR_FALHA = 1;
 80025ba:	4b3a      	ldr	r3, [pc, #232]	; (80026a4 <MONITORAMENTO+0x1b4>)
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d832      	bhi.n	800262c <MONITORAMENTO+0x13c>
 80025c6:	a201      	add	r2, pc, #4	; (adr r2, 80025cc <MONITORAMENTO+0xdc>)
 80025c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025cc:	0800263d 	.word	0x0800263d
 80025d0:	080025e5 	.word	0x080025e5
 80025d4:	080025f7 	.word	0x080025f7
 80025d8:	08002609 	.word	0x08002609
 80025dc:	0800262d 	.word	0x0800262d
 80025e0:	0800261b 	.word	0x0800261b
		switch (IDENTIFIER){
		case 0:
			break;
		case 1:
			/* FALHA ESP */
			show_now();
 80025e4:	f001 fe6e 	bl	80042c4 <show_now>
			FAIL_ESP(IDENTIFIER_ANTERIOR);
 80025e8:	4b30      	ldr	r3, [pc, #192]	; (80026ac <MONITORAMENTO+0x1bc>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f936 	bl	8002860 <FAIL_ESP>
			break;
 80025f4:	e023      	b.n	800263e <MONITORAMENTO+0x14e>
		case 2:
			/* FALHA UPA */
			show_now();
 80025f6:	f001 fe65 	bl	80042c4 <show_now>
			FAIL_UPA(IDENTIFIER_ANTERIOR);
 80025fa:	4b2c      	ldr	r3, [pc, #176]	; (80026ac <MONITORAMENTO+0x1bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	4618      	mov	r0, r3
 8002602:	f000 f9cb 	bl	800299c <FAIL_UPA>
			break;
 8002606:	e01a      	b.n	800263e <MONITORAMENTO+0x14e>
		case 3:
			/* FALHA ESP e UPA */
			show_now();
 8002608:	f001 fe5c 	bl	80042c4 <show_now>
			FAIL_ESP_UPA(IDENTIFIER_ANTERIOR);
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <MONITORAMENTO+0x1bc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fa60 	bl	8002ad8 <FAIL_ESP_UPA>
			break;
 8002618:	e011      	b.n	800263e <MONITORAMENTO+0x14e>
		case 5:
			/* FALHA CPU APENAS */
			show_now();
 800261a:	f001 fe53 	bl	80042c4 <show_now>
			FAIL_CPU(IDENTIFIER_ANTERIOR);
 800261e:	4b23      	ldr	r3, [pc, #140]	; (80026ac <MONITORAMENTO+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	4618      	mov	r0, r3
 8002626:	f000 faaf 	bl	8002b88 <FAIL_CPU>
			break;
 800262a:	e008      	b.n	800263e <MONITORAMENTO+0x14e>
		default:
			/* FALHA GENERALIZADA, ja que CPU falhou */
			show_now();
 800262c:	f001 fe4a 	bl	80042c4 <show_now>
			FAIL_GENERAL(IDENTIFIER);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fb21 	bl	8002c7c <FAIL_GENERAL>
			break;
 800263a:	e000      	b.n	800263e <MONITORAMENTO+0x14e>
			break;
 800263c:	bf00      	nop
		/* VERIFICACOES DE CONEXAO
		 * ESP -> REDE DESPACHO
		 * STM -> RESPOSTA PING ZIGBEE
		 * */

		if (ESP_UPA_OK && IDENTIFIER <= 5) {
 800263e:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <MONITORAMENTO+0x1b8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d004      	beq.n	8002650 <MONITORAMENTO+0x160>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b05      	cmp	r3, #5
 800264a:	dc01      	bgt.n	8002650 <MONITORAMENTO+0x160>
			MONITORAR_REDE();
 800264c:	f000 f8ca 	bl	80027e4 <MONITORAR_REDE>
		}
		/* Armazenar ao historico o valor de IDENTIFIER atual */
		if (IDENTIFIER_ANTERIOR ^ IDENTIFIER){
 8002650:	4b16      	ldr	r3, [pc, #88]	; (80026ac <MONITORAMENTO+0x1bc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	429a      	cmp	r2, r3
 8002658:	d002      	beq.n	8002660 <MONITORAMENTO+0x170>
			IDENTIFIER_ANTERIOR = IDENTIFIER;
 800265a:	4a14      	ldr	r2, [pc, #80]	; (80026ac <MONITORAMENTO+0x1bc>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6013      	str	r3, [r2, #0]
		}

		/* Atualizar estados logicos do pinos */
		HAL_GPIO_WritePin(CPU_OUT_A_GPIO_Port, CPU_OUT_A_Pin, STATUS_PARA_CPU[0]);
 8002660:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <MONITORAMENTO+0x1d0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800266c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002670:	f004 f86a 	bl	8006748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CPU_OUT_B_GPIO_Port, CPU_OUT_B_Pin, STATUS_PARA_CPU[1]);
 8002674:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <MONITORAMENTO+0x1d0>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002684:	f004 f860 	bl	8006748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CPU_OUT_C_GPIO_Port, CPU_OUT_C_Pin, STATUS_PARA_CPU[2]);
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <MONITORAMENTO+0x1d0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	2101      	movs	r1, #1
 8002692:	480c      	ldr	r0, [pc, #48]	; (80026c4 <MONITORAMENTO+0x1d4>)
 8002694:	f004 f858 	bl	8006748 <HAL_GPIO_WritePin>
	}

	/* DEBUG COMUNICACAO SERIAL */
	COMUNICACAO_SERIAL_DEBUG();
 8002698:	f002 fed0 	bl	800543c <COMUNICACAO_SERIAL_DEBUG>

	/* Fim da funcao */
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bdb0      	pop	{r4, r5, r7, pc}
 80026a4:	200002ac 	.word	0x200002ac
 80026a8:	20000034 	.word	0x20000034
 80026ac:	200002b0 	.word	0x200002b0
 80026b0:	20000264 	.word	0x20000264
 80026b4:	200002a8 	.word	0x200002a8
 80026b8:	200007b0 	.word	0x200007b0
 80026bc:	0800f520 	.word	0x0800f520
 80026c0:	20000298 	.word	0x20000298
 80026c4:	48000800 	.word	0x48000800

080026c8 <SEND_STATUS_TO_CPU>:
  *
  * @param  which:	Identificador do status do sistema.
  *
  * @retval void
  */
void SEND_STATUS_TO_CPU(int which){
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b0a      	cmp	r3, #10
 80026d4:	d87d      	bhi.n	80027d2 <SEND_STATUS_TO_CPU+0x10a>
 80026d6:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <SEND_STATUS_TO_CPU+0x14>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	080027d1 	.word	0x080027d1
 80026e0:	08002709 	.word	0x08002709
 80026e4:	0800271d 	.word	0x0800271d
 80026e8:	08002731 	.word	0x08002731
 80026ec:	08002745 	.word	0x08002745
 80026f0:	08002759 	.word	0x08002759
 80026f4:	0800276d 	.word	0x0800276d
 80026f8:	08002781 	.word	0x08002781
 80026fc:	08002795 	.word	0x08002795
 8002700:	080027a9 	.word	0x080027a9
 8002704:	080027bd 	.word	0x080027bd
	switch(which){
	case ESP_OK_UPA_OK_CPU_FAIL: 	/*ESP OK, UPA OK, CPU FAIL*/
		break;

	case ESP_OK_UPA_FAIL_CPU_OK:	/*ESP OK, UPA FAIL, CPU OK*/
		STATUS_PARA_CPU[0] = 1;
 8002708:	4b35      	ldr	r3, [pc, #212]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]
		STATUS_PARA_CPU[1] = 1;
 800270e:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 8002710:	2201      	movs	r2, #1
 8002712:	605a      	str	r2, [r3, #4]
		STATUS_PARA_CPU[2] = 0;
 8002714:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
		break;
 800271a:	e05a      	b.n	80027d2 <SEND_STATUS_TO_CPU+0x10a>

	case ESP_OK_UPA_FAIL_CPU_FAIL: 	/*ESP OK, UPA FAIL, CPU FAIL*/
		STATUS_PARA_CPU[0] = 1;
 800271c:	4b30      	ldr	r3, [pc, #192]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]
		STATUS_PARA_CPU[1] = 1;
 8002722:	4b2f      	ldr	r3, [pc, #188]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 8002724:	2201      	movs	r2, #1
 8002726:	605a      	str	r2, [r3, #4]
		STATUS_PARA_CPU[2] = 0;
 8002728:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
		break;
 800272e:	e050      	b.n	80027d2 <SEND_STATUS_TO_CPU+0x10a>

	case ESP_FAIL_UPA_OK_CPU_OK: 	/*ESP FAIL, UPA OK, CPU OK*/
		STATUS_PARA_CPU[0] = 1;
 8002730:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]
		STATUS_PARA_CPU[1] = 0;
 8002736:	4b2a      	ldr	r3, [pc, #168]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 8002738:	2200      	movs	r2, #0
 800273a:	605a      	str	r2, [r3, #4]
		STATUS_PARA_CPU[2] = 1;
 800273c:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 800273e:	2201      	movs	r2, #1
 8002740:	609a      	str	r2, [r3, #8]
		break;
 8002742:	e046      	b.n	80027d2 <SEND_STATUS_TO_CPU+0x10a>

	case ESP_FAIL_UPA_OK_CPU_FAIL: 	/*ESP FAIL, UPA OK, CPU FAIL*/
		STATUS_PARA_CPU[0] = 1;
 8002744:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]
		STATUS_PARA_CPU[1] = 0;
 800274a:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 800274c:	2200      	movs	r2, #0
 800274e:	605a      	str	r2, [r3, #4]
		STATUS_PARA_CPU[2] = 1;
 8002750:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 8002752:	2201      	movs	r2, #1
 8002754:	609a      	str	r2, [r3, #8]
		break;
 8002756:	e03c      	b.n	80027d2 <SEND_STATUS_TO_CPU+0x10a>

	case ESP_FAIL_UPA_FAIL_CPU_OK: 	/*ESP FAIL, UPA FAIL, CPU OK*/
		STATUS_PARA_CPU[0] = 1;
 8002758:	4b21      	ldr	r3, [pc, #132]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 800275a:	2201      	movs	r2, #1
 800275c:	601a      	str	r2, [r3, #0]
		STATUS_PARA_CPU[1] = 1;
 800275e:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 8002760:	2201      	movs	r2, #1
 8002762:	605a      	str	r2, [r3, #4]
		STATUS_PARA_CPU[2] = 1;
 8002764:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 8002766:	2201      	movs	r2, #1
 8002768:	609a      	str	r2, [r3, #8]
		break;
 800276a:	e032      	b.n	80027d2 <SEND_STATUS_TO_CPU+0x10a>

	case ALL_FAIL: 					/*ESP FAIL, UPA FAIL, CPU FAIL*/
		STATUS_PARA_CPU[0] = 1;
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]
		STATUS_PARA_CPU[1] = 1;
 8002772:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 8002774:	2201      	movs	r2, #1
 8002776:	605a      	str	r2, [r3, #4]
		STATUS_PARA_CPU[2] = 1;
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 800277a:	2201      	movs	r2, #1
 800277c:	609a      	str	r2, [r3, #8]
		break;
 800277e:	e028      	b.n	80027d2 <SEND_STATUS_TO_CPU+0x10a>

	case STM_ESP_CNCT: 				/*ESP CONNECTED, STM CONNECTED*/
		STATUS_PARA_CPU[0] = 0;
 8002780:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
		STATUS_PARA_CPU[1] = 0;
 8002786:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 8002788:	2200      	movs	r2, #0
 800278a:	605a      	str	r2, [r3, #4]
		STATUS_PARA_CPU[2] = 1;
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 800278e:	2201      	movs	r2, #1
 8002790:	609a      	str	r2, [r3, #8]
		break;
 8002792:	e01e      	b.n	80027d2 <SEND_STATUS_TO_CPU+0x10a>

	case STM_CNCT_ESP_N_CNCT: 		/*ESP NOT CONNECTED, STM CONNECTED*/
		STATUS_PARA_CPU[0] = 0;
 8002794:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
		STATUS_PARA_CPU[1] = 1;
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 800279c:	2201      	movs	r2, #1
 800279e:	605a      	str	r2, [r3, #4]
		STATUS_PARA_CPU[2] = 0;
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
		break;
 80027a6:	e014      	b.n	80027d2 <SEND_STATUS_TO_CPU+0x10a>

	case STM_N_CNCT_ESP_CNCT: 		/*ESP CONNECTED, STM NOT CONNECTED*/
		STATUS_PARA_CPU[0] = 0;
 80027a8:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
		STATUS_PARA_CPU[1] = 1;
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	605a      	str	r2, [r3, #4]
		STATUS_PARA_CPU[2] = 1;
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	609a      	str	r2, [r3, #8]
		break;
 80027ba:	e00a      	b.n	80027d2 <SEND_STATUS_TO_CPU+0x10a>

	case STM_ESP_N_CNCT: 			/*ESP NOT CONNECTED, STM NOT CONNECTED*/
		STATUS_PARA_CPU[0] = 1;
 80027bc:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 80027be:	2201      	movs	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
		STATUS_PARA_CPU[1] = 0;
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	605a      	str	r2, [r3, #4]
		STATUS_PARA_CPU[2] = 0;
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <SEND_STATUS_TO_CPU+0x118>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
		break;
 80027ce:	e000      	b.n	80027d2 <SEND_STATUS_TO_CPU+0x10a>
		break;
 80027d0:	bf00      	nop
	}
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20000298 	.word	0x20000298

080027e4 <MONITORAR_REDE>:
  *
  * @param  none
  *
  * @retval void
  */
void MONITORAR_REDE(){
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0

	/* STM CONECTADO E ESP CONECTADO */
	if (FLAG_XBEE_PING <= TIMEOUT_PING && STATUS_CONNECTION_ESP){
 80027e8:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <MONITORAR_REDE+0x70>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <MONITORAR_REDE+0x74>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d806      	bhi.n	8002802 <MONITORAR_REDE+0x1e>
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <MONITORAR_REDE+0x78>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <MONITORAR_REDE+0x1e>
		SEND_STATUS_TO_CPU(STM_ESP_CNCT);
 80027fc:	2007      	movs	r0, #7
 80027fe:	f7ff ff63 	bl	80026c8 <SEND_STATUS_TO_CPU>
	}

	/* STM CONECTADO E ESP NAO CONECTADO */
	if (FLAG_XBEE_PING <= TIMEOUT_PING && !STATUS_CONNECTION_ESP){
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <MONITORAR_REDE+0x70>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	4b14      	ldr	r3, [pc, #80]	; (8002858 <MONITORAR_REDE+0x74>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d806      	bhi.n	800281c <MONITORAR_REDE+0x38>
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <MONITORAR_REDE+0x78>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <MONITORAR_REDE+0x38>
		SEND_STATUS_TO_CPU(STM_CNCT_ESP_N_CNCT);
 8002816:	2008      	movs	r0, #8
 8002818:	f7ff ff56 	bl	80026c8 <SEND_STATUS_TO_CPU>
	}

	/* STM NAO CONECTADO E ESP CONECTADO */
	if (FLAG_XBEE_PING > TIMEOUT_PING && STATUS_CONNECTION_ESP){
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <MONITORAR_REDE+0x70>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <MONITORAR_REDE+0x74>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d906      	bls.n	8002836 <MONITORAR_REDE+0x52>
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <MONITORAR_REDE+0x78>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <MONITORAR_REDE+0x52>
		SEND_STATUS_TO_CPU(STM_N_CNCT_ESP_CNCT);
 8002830:	2009      	movs	r0, #9
 8002832:	f7ff ff49 	bl	80026c8 <SEND_STATUS_TO_CPU>
	}

	/* STM NAO CONECTADO E ESP NAO CONECTADO */
	if (FLAG_XBEE_PING > TIMEOUT_PING && !STATUS_CONNECTION_ESP){
 8002836:	4b07      	ldr	r3, [pc, #28]	; (8002854 <MONITORAR_REDE+0x70>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <MONITORAR_REDE+0x74>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d906      	bls.n	8002850 <MONITORAR_REDE+0x6c>
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <MONITORAR_REDE+0x78>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d102      	bne.n	8002850 <MONITORAR_REDE+0x6c>
		SEND_STATUS_TO_CPU(STM_ESP_N_CNCT);
 800284a:	200a      	movs	r0, #10
 800284c:	f7ff ff3c 	bl	80026c8 <SEND_STATUS_TO_CPU>
	}
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}
 8002854:	2000027c 	.word	0x2000027c
 8002858:	20000028 	.word	0x20000028
 800285c:	2000002c 	.word	0x2000002c

08002860 <FAIL_ESP>:
  *
  * @param  __ESTADO_ANTERIOR estado anterior
  *
  * @retval void
  */
void FAIL_ESP(uint8_t __ESTADO_ANTERIOR){
 8002860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]

	if (!__ESTADO_ANTERIOR){
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d112      	bne.n	8002896 <FAIL_ESP+0x36>
		strcat(BUFFER_SERIAL, "\r\nFALHA ESP.\r\n");
 8002870:	4844      	ldr	r0, [pc, #272]	; (8002984 <FAIL_ESP+0x124>)
 8002872:	f7fd fcb7 	bl	80001e4 <strlen>
 8002876:	4603      	mov	r3, r0
 8002878:	461a      	mov	r2, r3
 800287a:	4b42      	ldr	r3, [pc, #264]	; (8002984 <FAIL_ESP+0x124>)
 800287c:	4413      	add	r3, r2
 800287e:	4a42      	ldr	r2, [pc, #264]	; (8002988 <FAIL_ESP+0x128>)
 8002880:	461c      	mov	r4, r3
 8002882:	4613      	mov	r3, r2
 8002884:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002886:	6020      	str	r0, [r4, #0]
 8002888:	6061      	str	r1, [r4, #4]
 800288a:	60a2      	str	r2, [r4, #8]
 800288c:	881a      	ldrh	r2, [r3, #0]
 800288e:	789b      	ldrb	r3, [r3, #2]
 8002890:	81a2      	strh	r2, [r4, #12]
 8002892:	73a3      	strb	r3, [r4, #14]
 8002894:	e061      	b.n	800295a <FAIL_ESP+0xfa>
	}
	else if (!(__ESTADO_ANTERIOR ^ 3)){
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	2b03      	cmp	r3, #3
 800289a:	d11c      	bne.n	80028d6 <FAIL_ESP+0x76>
		strcat(BUFFER_SERIAL, "\r\nCOMUNICACAO COM UPA RECUPERADA.\r\n");
 800289c:	4839      	ldr	r0, [pc, #228]	; (8002984 <FAIL_ESP+0x124>)
 800289e:	f7fd fca1 	bl	80001e4 <strlen>
 80028a2:	4603      	mov	r3, r0
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <FAIL_ESP+0x124>)
 80028a8:	4413      	add	r3, r2
 80028aa:	4a38      	ldr	r2, [pc, #224]	; (800298c <FAIL_ESP+0x12c>)
 80028ac:	4614      	mov	r4, r2
 80028ae:	469c      	mov	ip, r3
 80028b0:	f104 0e20 	add.w	lr, r4, #32
 80028b4:	4665      	mov	r5, ip
 80028b6:	4626      	mov	r6, r4
 80028b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80028ba:	6028      	str	r0, [r5, #0]
 80028bc:	6069      	str	r1, [r5, #4]
 80028be:	60aa      	str	r2, [r5, #8]
 80028c0:	60eb      	str	r3, [r5, #12]
 80028c2:	3410      	adds	r4, #16
 80028c4:	f10c 0c10 	add.w	ip, ip, #16
 80028c8:	4574      	cmp	r4, lr
 80028ca:	d1f3      	bne.n	80028b4 <FAIL_ESP+0x54>
 80028cc:	4663      	mov	r3, ip
 80028ce:	4622      	mov	r2, r4
 80028d0:	6810      	ldr	r0, [r2, #0]
 80028d2:	6018      	str	r0, [r3, #0]
 80028d4:	e041      	b.n	800295a <FAIL_ESP+0xfa>
	}
	else if (!(__ESTADO_ANTERIOR ^ 6)){
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	2b06      	cmp	r3, #6
 80028da:	d11c      	bne.n	8002916 <FAIL_ESP+0xb6>
		strcat(BUFFER_SERIAL, "\r\nCOMUNICACAO COM CPU RECUPERADA.\r\n");
 80028dc:	4829      	ldr	r0, [pc, #164]	; (8002984 <FAIL_ESP+0x124>)
 80028de:	f7fd fc81 	bl	80001e4 <strlen>
 80028e2:	4603      	mov	r3, r0
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b27      	ldr	r3, [pc, #156]	; (8002984 <FAIL_ESP+0x124>)
 80028e8:	4413      	add	r3, r2
 80028ea:	4a29      	ldr	r2, [pc, #164]	; (8002990 <FAIL_ESP+0x130>)
 80028ec:	4614      	mov	r4, r2
 80028ee:	469c      	mov	ip, r3
 80028f0:	f104 0e20 	add.w	lr, r4, #32
 80028f4:	4665      	mov	r5, ip
 80028f6:	4626      	mov	r6, r4
 80028f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80028fa:	6028      	str	r0, [r5, #0]
 80028fc:	6069      	str	r1, [r5, #4]
 80028fe:	60aa      	str	r2, [r5, #8]
 8002900:	60eb      	str	r3, [r5, #12]
 8002902:	3410      	adds	r4, #16
 8002904:	f10c 0c10 	add.w	ip, ip, #16
 8002908:	4574      	cmp	r4, lr
 800290a:	d1f3      	bne.n	80028f4 <FAIL_ESP+0x94>
 800290c:	4663      	mov	r3, ip
 800290e:	4622      	mov	r2, r4
 8002910:	6810      	ldr	r0, [r2, #0]
 8002912:	6018      	str	r0, [r3, #0]
 8002914:	e021      	b.n	800295a <FAIL_ESP+0xfa>
	}
	else if (!(__ESTADO_ANTERIOR ^ 8)){
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	2b08      	cmp	r3, #8
 800291a:	d11e      	bne.n	800295a <FAIL_ESP+0xfa>
		strcat(BUFFER_SERIAL, "\r\nCOMUNICACAO COM CPU E UPA RECUPERADA.\r\n");
 800291c:	4819      	ldr	r0, [pc, #100]	; (8002984 <FAIL_ESP+0x124>)
 800291e:	f7fd fc61 	bl	80001e4 <strlen>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	4b17      	ldr	r3, [pc, #92]	; (8002984 <FAIL_ESP+0x124>)
 8002928:	4413      	add	r3, r2
 800292a:	4a1a      	ldr	r2, [pc, #104]	; (8002994 <FAIL_ESP+0x134>)
 800292c:	4614      	mov	r4, r2
 800292e:	469c      	mov	ip, r3
 8002930:	f104 0e20 	add.w	lr, r4, #32
 8002934:	4665      	mov	r5, ip
 8002936:	4626      	mov	r6, r4
 8002938:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800293a:	6028      	str	r0, [r5, #0]
 800293c:	6069      	str	r1, [r5, #4]
 800293e:	60aa      	str	r2, [r5, #8]
 8002940:	60eb      	str	r3, [r5, #12]
 8002942:	3410      	adds	r4, #16
 8002944:	f10c 0c10 	add.w	ip, ip, #16
 8002948:	4574      	cmp	r4, lr
 800294a:	d1f3      	bne.n	8002934 <FAIL_ESP+0xd4>
 800294c:	4662      	mov	r2, ip
 800294e:	4623      	mov	r3, r4
 8002950:	cb03      	ldmia	r3!, {r0, r1}
 8002952:	6010      	str	r0, [r2, #0]
 8002954:	6051      	str	r1, [r2, #4]
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	8113      	strh	r3, [r2, #8]
	}
	strcat(BUFFER_SERIAL, "\r\n=========== !!! SYSTEM STATUS: ESP...FAIL,"
 800295a:	480a      	ldr	r0, [pc, #40]	; (8002984 <FAIL_ESP+0x124>)
 800295c:	f7fd fc42 	bl	80001e4 <strlen>
 8002960:	4603      	mov	r3, r0
 8002962:	461a      	mov	r2, r3
 8002964:	4b07      	ldr	r3, [pc, #28]	; (8002984 <FAIL_ESP+0x124>)
 8002966:	4413      	add	r3, r2
 8002968:	4a0b      	ldr	r2, [pc, #44]	; (8002998 <FAIL_ESP+0x138>)
 800296a:	4618      	mov	r0, r3
 800296c:	4611      	mov	r1, r2
 800296e:	2353      	movs	r3, #83	; 0x53
 8002970:	461a      	mov	r2, r3
 8002972:	f008 f949 	bl	800ac08 <memcpy>
			" UPA...OK, CPU...OK. !!! ===========\r\n");
	SEND_STATUS_TO_CPU(ESP_FAIL_UPA_OK_CPU_OK);
 8002976:	2003      	movs	r0, #3
 8002978:	f7ff fea6 	bl	80026c8 <SEND_STATUS_TO_CPU>
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002984:	200007b0 	.word	0x200007b0
 8002988:	0800f534 	.word	0x0800f534
 800298c:	0800f544 	.word	0x0800f544
 8002990:	0800f568 	.word	0x0800f568
 8002994:	0800f58c 	.word	0x0800f58c
 8002998:	0800f5b8 	.word	0x0800f5b8

0800299c <FAIL_UPA>:
  *
  * @param  __ESTADO_ANTERIOR estado anterior
  *
  * @retval void
  */
void FAIL_UPA(uint8_t __ESTADO_ANTERIOR){
 800299c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]

	if (__ESTADO_ANTERIOR < 2){
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d812      	bhi.n	80029d2 <FAIL_UPA+0x36>
		strcat(BUFFER_SERIAL, "\r\nFALHA UPA.\r\n");
 80029ac:	4844      	ldr	r0, [pc, #272]	; (8002ac0 <FAIL_UPA+0x124>)
 80029ae:	f7fd fc19 	bl	80001e4 <strlen>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b42      	ldr	r3, [pc, #264]	; (8002ac0 <FAIL_UPA+0x124>)
 80029b8:	4413      	add	r3, r2
 80029ba:	4a42      	ldr	r2, [pc, #264]	; (8002ac4 <FAIL_UPA+0x128>)
 80029bc:	461c      	mov	r4, r3
 80029be:	4613      	mov	r3, r2
 80029c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80029c2:	6020      	str	r0, [r4, #0]
 80029c4:	6061      	str	r1, [r4, #4]
 80029c6:	60a2      	str	r2, [r4, #8]
 80029c8:	881a      	ldrh	r2, [r3, #0]
 80029ca:	789b      	ldrb	r3, [r3, #2]
 80029cc:	81a2      	strh	r2, [r4, #12]
 80029ce:	73a3      	strb	r3, [r4, #14]
 80029d0:	e061      	b.n	8002a96 <FAIL_UPA+0xfa>
	}
	else if (!(__ESTADO_ANTERIOR ^ 3)){
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d11c      	bne.n	8002a12 <FAIL_UPA+0x76>
		strcat(BUFFER_SERIAL, "\r\nCOMUNICACAO COM ESP RECUPERADA.\r\n");
 80029d8:	4839      	ldr	r0, [pc, #228]	; (8002ac0 <FAIL_UPA+0x124>)
 80029da:	f7fd fc03 	bl	80001e4 <strlen>
 80029de:	4603      	mov	r3, r0
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b37      	ldr	r3, [pc, #220]	; (8002ac0 <FAIL_UPA+0x124>)
 80029e4:	4413      	add	r3, r2
 80029e6:	4a38      	ldr	r2, [pc, #224]	; (8002ac8 <FAIL_UPA+0x12c>)
 80029e8:	4614      	mov	r4, r2
 80029ea:	469c      	mov	ip, r3
 80029ec:	f104 0e20 	add.w	lr, r4, #32
 80029f0:	4665      	mov	r5, ip
 80029f2:	4626      	mov	r6, r4
 80029f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80029f6:	6028      	str	r0, [r5, #0]
 80029f8:	6069      	str	r1, [r5, #4]
 80029fa:	60aa      	str	r2, [r5, #8]
 80029fc:	60eb      	str	r3, [r5, #12]
 80029fe:	3410      	adds	r4, #16
 8002a00:	f10c 0c10 	add.w	ip, ip, #16
 8002a04:	4574      	cmp	r4, lr
 8002a06:	d1f3      	bne.n	80029f0 <FAIL_UPA+0x54>
 8002a08:	4663      	mov	r3, ip
 8002a0a:	4622      	mov	r2, r4
 8002a0c:	6810      	ldr	r0, [r2, #0]
 8002a0e:	6018      	str	r0, [r3, #0]
 8002a10:	e041      	b.n	8002a96 <FAIL_UPA+0xfa>
	}
	else if (!(__ESTADO_ANTERIOR ^ 7)){
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	2b07      	cmp	r3, #7
 8002a16:	d11c      	bne.n	8002a52 <FAIL_UPA+0xb6>
		strcat(BUFFER_SERIAL, "\r\nCOMUNICACAO COM CPU RECUPERADA.\r\n");
 8002a18:	4829      	ldr	r0, [pc, #164]	; (8002ac0 <FAIL_UPA+0x124>)
 8002a1a:	f7fd fbe3 	bl	80001e4 <strlen>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <FAIL_UPA+0x124>)
 8002a24:	4413      	add	r3, r2
 8002a26:	4a29      	ldr	r2, [pc, #164]	; (8002acc <FAIL_UPA+0x130>)
 8002a28:	4614      	mov	r4, r2
 8002a2a:	469c      	mov	ip, r3
 8002a2c:	f104 0e20 	add.w	lr, r4, #32
 8002a30:	4665      	mov	r5, ip
 8002a32:	4626      	mov	r6, r4
 8002a34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a36:	6028      	str	r0, [r5, #0]
 8002a38:	6069      	str	r1, [r5, #4]
 8002a3a:	60aa      	str	r2, [r5, #8]
 8002a3c:	60eb      	str	r3, [r5, #12]
 8002a3e:	3410      	adds	r4, #16
 8002a40:	f10c 0c10 	add.w	ip, ip, #16
 8002a44:	4574      	cmp	r4, lr
 8002a46:	d1f3      	bne.n	8002a30 <FAIL_UPA+0x94>
 8002a48:	4663      	mov	r3, ip
 8002a4a:	4622      	mov	r2, r4
 8002a4c:	6810      	ldr	r0, [r2, #0]
 8002a4e:	6018      	str	r0, [r3, #0]
 8002a50:	e021      	b.n	8002a96 <FAIL_UPA+0xfa>
	}
	else if (!(__ESTADO_ANTERIOR ^ 8)){
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d11e      	bne.n	8002a96 <FAIL_UPA+0xfa>
		strcat(BUFFER_SERIAL, "\r\nCOMUNICACAO COM CPU E ESP RECUPERADA.\r\n");
 8002a58:	4819      	ldr	r0, [pc, #100]	; (8002ac0 <FAIL_UPA+0x124>)
 8002a5a:	f7fd fbc3 	bl	80001e4 <strlen>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <FAIL_UPA+0x124>)
 8002a64:	4413      	add	r3, r2
 8002a66:	4a1a      	ldr	r2, [pc, #104]	; (8002ad0 <FAIL_UPA+0x134>)
 8002a68:	4614      	mov	r4, r2
 8002a6a:	469c      	mov	ip, r3
 8002a6c:	f104 0e20 	add.w	lr, r4, #32
 8002a70:	4665      	mov	r5, ip
 8002a72:	4626      	mov	r6, r4
 8002a74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a76:	6028      	str	r0, [r5, #0]
 8002a78:	6069      	str	r1, [r5, #4]
 8002a7a:	60aa      	str	r2, [r5, #8]
 8002a7c:	60eb      	str	r3, [r5, #12]
 8002a7e:	3410      	adds	r4, #16
 8002a80:	f10c 0c10 	add.w	ip, ip, #16
 8002a84:	4574      	cmp	r4, lr
 8002a86:	d1f3      	bne.n	8002a70 <FAIL_UPA+0xd4>
 8002a88:	4662      	mov	r2, ip
 8002a8a:	4623      	mov	r3, r4
 8002a8c:	cb03      	ldmia	r3!, {r0, r1}
 8002a8e:	6010      	str	r0, [r2, #0]
 8002a90:	6051      	str	r1, [r2, #4]
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	8113      	strh	r3, [r2, #8]
	}
	strcat(BUFFER_SERIAL, "\r\n=========== !!! SYSTEM STATUS: ESP...OK,"
 8002a96:	480a      	ldr	r0, [pc, #40]	; (8002ac0 <FAIL_UPA+0x124>)
 8002a98:	f7fd fba4 	bl	80001e4 <strlen>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <FAIL_UPA+0x124>)
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a0b      	ldr	r2, [pc, #44]	; (8002ad4 <FAIL_UPA+0x138>)
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	2353      	movs	r3, #83	; 0x53
 8002aac:	461a      	mov	r2, r3
 8002aae:	f008 f8ab 	bl	800ac08 <memcpy>
			" UPA...FAIL, CPU...OK. !!! ===========\r\n");
	SEND_STATUS_TO_CPU(ESP_OK_UPA_FAIL_CPU_OK);
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f7ff fe08 	bl	80026c8 <SEND_STATUS_TO_CPU>

}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ac0:	200007b0 	.word	0x200007b0
 8002ac4:	0800f60c 	.word	0x0800f60c
 8002ac8:	0800f61c 	.word	0x0800f61c
 8002acc:	0800f568 	.word	0x0800f568
 8002ad0:	0800f640 	.word	0x0800f640
 8002ad4:	0800f66c 	.word	0x0800f66c

08002ad8 <FAIL_ESP_UPA>:
  *
  * @param  _ESTADO_ANTERIOR estado anterior
  *
  * @retval void
  */
void FAIL_ESP_UPA(uint8_t _ESTADO_ANTERIOR){
 8002ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]

	if (_ESTADO_ANTERIOR < 3){
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d813      	bhi.n	8002b10 <FAIL_ESP_UPA+0x38>
		strcat(BUFFER_SERIAL, "\r\nFALHA ESP e UPA.\r\n");
 8002ae8:	4823      	ldr	r0, [pc, #140]	; (8002b78 <FAIL_ESP_UPA+0xa0>)
 8002aea:	f7fd fb7b 	bl	80001e4 <strlen>
 8002aee:	4603      	mov	r3, r0
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b21      	ldr	r3, [pc, #132]	; (8002b78 <FAIL_ESP_UPA+0xa0>)
 8002af4:	4413      	add	r3, r2
 8002af6:	4a21      	ldr	r2, [pc, #132]	; (8002b7c <FAIL_ESP_UPA+0xa4>)
 8002af8:	461d      	mov	r5, r3
 8002afa:	4614      	mov	r4, r2
 8002afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afe:	6028      	str	r0, [r5, #0]
 8002b00:	6069      	str	r1, [r5, #4]
 8002b02:	60aa      	str	r2, [r5, #8]
 8002b04:	60eb      	str	r3, [r5, #12]
 8002b06:	6820      	ldr	r0, [r4, #0]
 8002b08:	6128      	str	r0, [r5, #16]
 8002b0a:	7923      	ldrb	r3, [r4, #4]
 8002b0c:	752b      	strb	r3, [r5, #20]
 8002b0e:	e01e      	b.n	8002b4e <FAIL_ESP_UPA+0x76>
	}
	else if (!(_ESTADO_ANTERIOR ^ 8)){
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d11b      	bne.n	8002b4e <FAIL_ESP_UPA+0x76>
		strcat(BUFFER_SERIAL, "\r\nCOMUNICACAO COM CPU RECUPERADA.\r\n");
 8002b16:	4818      	ldr	r0, [pc, #96]	; (8002b78 <FAIL_ESP_UPA+0xa0>)
 8002b18:	f7fd fb64 	bl	80001e4 <strlen>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <FAIL_ESP_UPA+0xa0>)
 8002b22:	4413      	add	r3, r2
 8002b24:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <FAIL_ESP_UPA+0xa8>)
 8002b26:	4614      	mov	r4, r2
 8002b28:	469c      	mov	ip, r3
 8002b2a:	f104 0e20 	add.w	lr, r4, #32
 8002b2e:	4665      	mov	r5, ip
 8002b30:	4626      	mov	r6, r4
 8002b32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b34:	6028      	str	r0, [r5, #0]
 8002b36:	6069      	str	r1, [r5, #4]
 8002b38:	60aa      	str	r2, [r5, #8]
 8002b3a:	60eb      	str	r3, [r5, #12]
 8002b3c:	3410      	adds	r4, #16
 8002b3e:	f10c 0c10 	add.w	ip, ip, #16
 8002b42:	4574      	cmp	r4, lr
 8002b44:	d1f3      	bne.n	8002b2e <FAIL_ESP_UPA+0x56>
 8002b46:	4663      	mov	r3, ip
 8002b48:	4622      	mov	r2, r4
 8002b4a:	6810      	ldr	r0, [r2, #0]
 8002b4c:	6018      	str	r0, [r3, #0]
	}
	strcat(BUFFER_SERIAL, "\r\n=========== !!! SYSTEM STATUS: ESP...FAIL,"
 8002b4e:	480a      	ldr	r0, [pc, #40]	; (8002b78 <FAIL_ESP_UPA+0xa0>)
 8002b50:	f7fd fb48 	bl	80001e4 <strlen>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <FAIL_ESP_UPA+0xa0>)
 8002b5a:	4413      	add	r3, r2
 8002b5c:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <FAIL_ESP_UPA+0xac>)
 8002b5e:	4618      	mov	r0, r3
 8002b60:	4611      	mov	r1, r2
 8002b62:	2355      	movs	r3, #85	; 0x55
 8002b64:	461a      	mov	r2, r3
 8002b66:	f008 f84f 	bl	800ac08 <memcpy>
			" UPA...FAIL, CPU...OK. !!! ===========\r\n");
	SEND_STATUS_TO_CPU(ESP_FAIL_UPA_FAIL_CPU_OK);
 8002b6a:	2005      	movs	r0, #5
 8002b6c:	f7ff fdac 	bl	80026c8 <SEND_STATUS_TO_CPU>
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b78:	200007b0 	.word	0x200007b0
 8002b7c:	0800f6c0 	.word	0x0800f6c0
 8002b80:	0800f568 	.word	0x0800f568
 8002b84:	0800f6d8 	.word	0x0800f6d8

08002b88 <FAIL_CPU>:
  *
  * @param  ESTADO_ANTERIOR estado anterior
  *
  * @retval void
  */
void FAIL_CPU(uint8_t ESTADO_ANTERIOR){
 8002b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]

	if (ESTADO_ANTERIOR < 5){
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d811      	bhi.n	8002bbc <FAIL_CPU+0x34>
		strcat(BUFFER_SERIAL, "\r\nFALHA CPU.\r\n");
 8002b98:	4833      	ldr	r0, [pc, #204]	; (8002c68 <FAIL_CPU+0xe0>)
 8002b9a:	f7fd fb23 	bl	80001e4 <strlen>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b31      	ldr	r3, [pc, #196]	; (8002c68 <FAIL_CPU+0xe0>)
 8002ba4:	4413      	add	r3, r2
 8002ba6:	4a31      	ldr	r2, [pc, #196]	; (8002c6c <FAIL_CPU+0xe4>)
 8002ba8:	461c      	mov	r4, r3
 8002baa:	4613      	mov	r3, r2
 8002bac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002bae:	6020      	str	r0, [r4, #0]
 8002bb0:	6061      	str	r1, [r4, #4]
 8002bb2:	60a2      	str	r2, [r4, #8]
 8002bb4:	881a      	ldrh	r2, [r3, #0]
 8002bb6:	789b      	ldrb	r3, [r3, #2]
 8002bb8:	81a2      	strh	r2, [r4, #12]
 8002bba:	73a3      	strb	r3, [r4, #14]
	}
	if (ESTADO_ANTERIOR == 7 || ESTADO_ANTERIOR == 8){
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	2b07      	cmp	r3, #7
 8002bc0:	d002      	beq.n	8002bc8 <FAIL_CPU+0x40>
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d11b      	bne.n	8002c00 <FAIL_CPU+0x78>
		strcat(BUFFER_SERIAL, "\r\nCOMUNICACAO COM UPA RECUPERADA.\r\n");
 8002bc8:	4827      	ldr	r0, [pc, #156]	; (8002c68 <FAIL_CPU+0xe0>)
 8002bca:	f7fd fb0b 	bl	80001e4 <strlen>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <FAIL_CPU+0xe0>)
 8002bd4:	4413      	add	r3, r2
 8002bd6:	4a26      	ldr	r2, [pc, #152]	; (8002c70 <FAIL_CPU+0xe8>)
 8002bd8:	4614      	mov	r4, r2
 8002bda:	469c      	mov	ip, r3
 8002bdc:	f104 0e20 	add.w	lr, r4, #32
 8002be0:	4665      	mov	r5, ip
 8002be2:	4626      	mov	r6, r4
 8002be4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002be6:	6028      	str	r0, [r5, #0]
 8002be8:	6069      	str	r1, [r5, #4]
 8002bea:	60aa      	str	r2, [r5, #8]
 8002bec:	60eb      	str	r3, [r5, #12]
 8002bee:	3410      	adds	r4, #16
 8002bf0:	f10c 0c10 	add.w	ip, ip, #16
 8002bf4:	4574      	cmp	r4, lr
 8002bf6:	d1f3      	bne.n	8002be0 <FAIL_CPU+0x58>
 8002bf8:	4663      	mov	r3, ip
 8002bfa:	4622      	mov	r2, r4
 8002bfc:	6810      	ldr	r0, [r2, #0]
 8002bfe:	6018      	str	r0, [r3, #0]
	}
	if (ESTADO_ANTERIOR == 6 || ESTADO_ANTERIOR == 8){
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d002      	beq.n	8002c0c <FAIL_CPU+0x84>
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d11b      	bne.n	8002c44 <FAIL_CPU+0xbc>
		strcat(BUFFER_SERIAL, "\r\nCOMUNICACAO COM ESP RECUPERADA.\r\n");
 8002c0c:	4816      	ldr	r0, [pc, #88]	; (8002c68 <FAIL_CPU+0xe0>)
 8002c0e:	f7fd fae9 	bl	80001e4 <strlen>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <FAIL_CPU+0xe0>)
 8002c18:	4413      	add	r3, r2
 8002c1a:	4a16      	ldr	r2, [pc, #88]	; (8002c74 <FAIL_CPU+0xec>)
 8002c1c:	4614      	mov	r4, r2
 8002c1e:	469c      	mov	ip, r3
 8002c20:	f104 0e20 	add.w	lr, r4, #32
 8002c24:	4665      	mov	r5, ip
 8002c26:	4626      	mov	r6, r4
 8002c28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c2a:	6028      	str	r0, [r5, #0]
 8002c2c:	6069      	str	r1, [r5, #4]
 8002c2e:	60aa      	str	r2, [r5, #8]
 8002c30:	60eb      	str	r3, [r5, #12]
 8002c32:	3410      	adds	r4, #16
 8002c34:	f10c 0c10 	add.w	ip, ip, #16
 8002c38:	4574      	cmp	r4, lr
 8002c3a:	d1f3      	bne.n	8002c24 <FAIL_CPU+0x9c>
 8002c3c:	4663      	mov	r3, ip
 8002c3e:	4622      	mov	r2, r4
 8002c40:	6810      	ldr	r0, [r2, #0]
 8002c42:	6018      	str	r0, [r3, #0]
	}
	strcat(BUFFER_SERIAL, "\r\n=========== !!! SYSTEM STATUS: ESP...OK,"
 8002c44:	4808      	ldr	r0, [pc, #32]	; (8002c68 <FAIL_CPU+0xe0>)
 8002c46:	f7fd facd 	bl	80001e4 <strlen>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <FAIL_CPU+0xe0>)
 8002c50:	4413      	add	r3, r2
 8002c52:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <FAIL_CPU+0xf0>)
 8002c54:	4618      	mov	r0, r3
 8002c56:	4611      	mov	r1, r2
 8002c58:	2353      	movs	r3, #83	; 0x53
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f007 ffd4 	bl	800ac08 <memcpy>
			" UPA...OK, CPU...FAIL. !!! ===========\r\n");

}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c68:	200007b0 	.word	0x200007b0
 8002c6c:	0800f730 	.word	0x0800f730
 8002c70:	0800f544 	.word	0x0800f544
 8002c74:	0800f61c 	.word	0x0800f61c
 8002c78:	0800f740 	.word	0x0800f740

08002c7c <FAIL_GENERAL>:
  *
  * @param  __ESTADO_ATUAL estado atual de falha
  *
  * @retval void
  */
void FAIL_GENERAL(uint8_t __ESTADO_ATUAL){
 8002c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]

	strcat(BUFFER_SERIAL, "\r\nFALHA GENERALIZADA. CPU FALHOU.\r\n");
 8002c86:	484e      	ldr	r0, [pc, #312]	; (8002dc0 <FAIL_GENERAL+0x144>)
 8002c88:	f7fd faac 	bl	80001e4 <strlen>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4b4b      	ldr	r3, [pc, #300]	; (8002dc0 <FAIL_GENERAL+0x144>)
 8002c92:	4413      	add	r3, r2
 8002c94:	4a4b      	ldr	r2, [pc, #300]	; (8002dc4 <FAIL_GENERAL+0x148>)
 8002c96:	4614      	mov	r4, r2
 8002c98:	469c      	mov	ip, r3
 8002c9a:	f104 0e20 	add.w	lr, r4, #32
 8002c9e:	4665      	mov	r5, ip
 8002ca0:	4626      	mov	r6, r4
 8002ca2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002ca4:	6028      	str	r0, [r5, #0]
 8002ca6:	6069      	str	r1, [r5, #4]
 8002ca8:	60aa      	str	r2, [r5, #8]
 8002caa:	60eb      	str	r3, [r5, #12]
 8002cac:	3410      	adds	r4, #16
 8002cae:	f10c 0c10 	add.w	ip, ip, #16
 8002cb2:	4574      	cmp	r4, lr
 8002cb4:	d1f3      	bne.n	8002c9e <FAIL_GENERAL+0x22>
 8002cb6:	4663      	mov	r3, ip
 8002cb8:	4622      	mov	r2, r4
 8002cba:	6810      	ldr	r0, [r2, #0]
 8002cbc:	6018      	str	r0, [r3, #0]
	if (!(__ESTADO_ATUAL ^ 8)){
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d12e      	bne.n	8002d22 <FAIL_GENERAL+0xa6>
		strcat(BUFFER_SERIAL, "\r\nTODOS OS COMPONENTES FALHARAM.\r\n");
 8002cc4:	483e      	ldr	r0, [pc, #248]	; (8002dc0 <FAIL_GENERAL+0x144>)
 8002cc6:	f7fd fa8d 	bl	80001e4 <strlen>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b3c      	ldr	r3, [pc, #240]	; (8002dc0 <FAIL_GENERAL+0x144>)
 8002cd0:	4413      	add	r3, r2
 8002cd2:	4a3d      	ldr	r2, [pc, #244]	; (8002dc8 <FAIL_GENERAL+0x14c>)
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	469c      	mov	ip, r3
 8002cd8:	f104 0e20 	add.w	lr, r4, #32
 8002cdc:	4665      	mov	r5, ip
 8002cde:	4626      	mov	r6, r4
 8002ce0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002ce2:	6028      	str	r0, [r5, #0]
 8002ce4:	6069      	str	r1, [r5, #4]
 8002ce6:	60aa      	str	r2, [r5, #8]
 8002ce8:	60eb      	str	r3, [r5, #12]
 8002cea:	3410      	adds	r4, #16
 8002cec:	f10c 0c10 	add.w	ip, ip, #16
 8002cf0:	4574      	cmp	r4, lr
 8002cf2:	d1f3      	bne.n	8002cdc <FAIL_GENERAL+0x60>
 8002cf4:	4663      	mov	r3, ip
 8002cf6:	4622      	mov	r2, r4
 8002cf8:	8811      	ldrh	r1, [r2, #0]
 8002cfa:	7892      	ldrb	r2, [r2, #2]
 8002cfc:	8019      	strh	r1, [r3, #0]
 8002cfe:	709a      	strb	r2, [r3, #2]
		strcat(BUFFER_SERIAL, "\r\n=========== !!! SYSTEM STATUS: ESP..."
 8002d00:	482f      	ldr	r0, [pc, #188]	; (8002dc0 <FAIL_GENERAL+0x144>)
 8002d02:	f7fd fa6f 	bl	80001e4 <strlen>
 8002d06:	4603      	mov	r3, r0
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <FAIL_GENERAL+0x144>)
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4a2f      	ldr	r2, [pc, #188]	; (8002dcc <FAIL_GENERAL+0x150>)
 8002d10:	4618      	mov	r0, r3
 8002d12:	4611      	mov	r1, r2
 8002d14:	2357      	movs	r3, #87	; 0x57
 8002d16:	461a      	mov	r2, r3
 8002d18:	f007 ff76 	bl	800ac08 <memcpy>
				"FAIL, UPA...FAIL, CPU...FAIL. !!! ===========\r\n");
		SEND_STATUS_TO_CPU(ALL_FAIL);
 8002d1c:	2006      	movs	r0, #6
 8002d1e:	f7ff fcd3 	bl	80026c8 <SEND_STATUS_TO_CPU>
	}
	if (!(__ESTADO_ATUAL ^ 6)){
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	2b06      	cmp	r3, #6
 8002d26:	d121      	bne.n	8002d6c <FAIL_GENERAL+0xf0>
		strcat(BUFFER_SERIAL, "\r\nUPA ESTA OK.\r\n");
 8002d28:	4825      	ldr	r0, [pc, #148]	; (8002dc0 <FAIL_GENERAL+0x144>)
 8002d2a:	f7fd fa5b 	bl	80001e4 <strlen>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <FAIL_GENERAL+0x144>)
 8002d34:	4413      	add	r3, r2
 8002d36:	4a26      	ldr	r2, [pc, #152]	; (8002dd0 <FAIL_GENERAL+0x154>)
 8002d38:	461d      	mov	r5, r3
 8002d3a:	4614      	mov	r4, r2
 8002d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3e:	6028      	str	r0, [r5, #0]
 8002d40:	6069      	str	r1, [r5, #4]
 8002d42:	60aa      	str	r2, [r5, #8]
 8002d44:	60eb      	str	r3, [r5, #12]
 8002d46:	7823      	ldrb	r3, [r4, #0]
 8002d48:	742b      	strb	r3, [r5, #16]
		strcat(BUFFER_SERIAL, "\r\n=========== !!! SYSTEM STATUS: ESP..."
 8002d4a:	481d      	ldr	r0, [pc, #116]	; (8002dc0 <FAIL_GENERAL+0x144>)
 8002d4c:	f7fd fa4a 	bl	80001e4 <strlen>
 8002d50:	4603      	mov	r3, r0
 8002d52:	461a      	mov	r2, r3
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <FAIL_GENERAL+0x144>)
 8002d56:	4413      	add	r3, r2
 8002d58:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <FAIL_GENERAL+0x158>)
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	2355      	movs	r3, #85	; 0x55
 8002d60:	461a      	mov	r2, r3
 8002d62:	f007 ff51 	bl	800ac08 <memcpy>
				"FAIL, UPA...OK, CPU...FAIL. !!! ===========\r\n");
		SEND_STATUS_TO_CPU(ESP_FAIL_UPA_OK_CPU_FAIL);
 8002d66:	2004      	movs	r0, #4
 8002d68:	f7ff fcae 	bl	80026c8 <SEND_STATUS_TO_CPU>
	}
	if (!(__ESTADO_ATUAL ^ 7)){
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	2b07      	cmp	r3, #7
 8002d70:	d121      	bne.n	8002db6 <FAIL_GENERAL+0x13a>
		strcat(BUFFER_SERIAL, "\r\nESP ESTA OK.\r\n");
 8002d72:	4813      	ldr	r0, [pc, #76]	; (8002dc0 <FAIL_GENERAL+0x144>)
 8002d74:	f7fd fa36 	bl	80001e4 <strlen>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <FAIL_GENERAL+0x144>)
 8002d7e:	4413      	add	r3, r2
 8002d80:	4a15      	ldr	r2, [pc, #84]	; (8002dd8 <FAIL_GENERAL+0x15c>)
 8002d82:	461d      	mov	r5, r3
 8002d84:	4614      	mov	r4, r2
 8002d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d88:	6028      	str	r0, [r5, #0]
 8002d8a:	6069      	str	r1, [r5, #4]
 8002d8c:	60aa      	str	r2, [r5, #8]
 8002d8e:	60eb      	str	r3, [r5, #12]
 8002d90:	7823      	ldrb	r3, [r4, #0]
 8002d92:	742b      	strb	r3, [r5, #16]
		strcat(BUFFER_SERIAL, "\r\n=========== !!! SYSTEM STATUS: ESP..."
 8002d94:	480a      	ldr	r0, [pc, #40]	; (8002dc0 <FAIL_GENERAL+0x144>)
 8002d96:	f7fd fa25 	bl	80001e4 <strlen>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <FAIL_GENERAL+0x144>)
 8002da0:	4413      	add	r3, r2
 8002da2:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <FAIL_GENERAL+0x160>)
 8002da4:	4618      	mov	r0, r3
 8002da6:	4611      	mov	r1, r2
 8002da8:	2356      	movs	r3, #86	; 0x56
 8002daa:	461a      	mov	r2, r3
 8002dac:	f007 ff2c 	bl	800ac08 <memcpy>
				"OK, UPA...FAIL, CPU...FAIL. !!! =========== \r\n");
		SEND_STATUS_TO_CPU(ESP_OK_UPA_FAIL_CPU_FAIL);
 8002db0:	2002      	movs	r0, #2
 8002db2:	f7ff fc89 	bl	80026c8 <SEND_STATUS_TO_CPU>
	}

}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200007b0 	.word	0x200007b0
 8002dc4:	0800f794 	.word	0x0800f794
 8002dc8:	0800f7b8 	.word	0x0800f7b8
 8002dcc:	0800f7dc 	.word	0x0800f7dc
 8002dd0:	0800f834 	.word	0x0800f834
 8002dd4:	0800f848 	.word	0x0800f848
 8002dd8:	0800f8a0 	.word	0x0800f8a0
 8002ddc:	0800f8b4 	.word	0x0800f8b4

08002de0 <SYS_OK_RECOVERED>:
  *
  * @param  FALHA_ANTERIOR falha anterior ao estado ok
  *
  * @retval void
  */
void SYS_OK_RECOVERED(uint8_t FALHA_ANTERIOR){
 8002de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]

	switch (FALHA_ANTERIOR){
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	2b07      	cmp	r3, #7
 8002df0:	f200 80ea 	bhi.w	8002fc8 <SYS_OK_RECOVERED+0x1e8>
 8002df4:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <SYS_OK_RECOVERED+0x1c>)
 8002df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfa:	bf00      	nop
 8002dfc:	08002f8f 	.word	0x08002f8f
 8002e00:	08002f55 	.word	0x08002f55
 8002e04:	08002f15 	.word	0x08002f15
 8002e08:	08002fc9 	.word	0x08002fc9
 8002e0c:	08002edb 	.word	0x08002edb
 8002e10:	08002e9b 	.word	0x08002e9b
 8002e14:	08002e5b 	.word	0x08002e5b
 8002e18:	08002e1d 	.word	0x08002e1d
	case 8:
		strcat(BUFFER_SERIAL, "\r\nCOMUNICACAO "
 8002e1c:	4874      	ldr	r0, [pc, #464]	; (8002ff0 <SYS_OK_RECOVERED+0x210>)
 8002e1e:	f7fd f9e1 	bl	80001e4 <strlen>
 8002e22:	4603      	mov	r3, r0
 8002e24:	461a      	mov	r2, r3
 8002e26:	4b72      	ldr	r3, [pc, #456]	; (8002ff0 <SYS_OK_RECOVERED+0x210>)
 8002e28:	4413      	add	r3, r2
 8002e2a:	4a72      	ldr	r2, [pc, #456]	; (8002ff4 <SYS_OK_RECOVERED+0x214>)
 8002e2c:	4614      	mov	r4, r2
 8002e2e:	469c      	mov	ip, r3
 8002e30:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002e34:	4665      	mov	r5, ip
 8002e36:	4626      	mov	r6, r4
 8002e38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002e3a:	6028      	str	r0, [r5, #0]
 8002e3c:	6069      	str	r1, [r5, #4]
 8002e3e:	60aa      	str	r2, [r5, #8]
 8002e40:	60eb      	str	r3, [r5, #12]
 8002e42:	3410      	adds	r4, #16
 8002e44:	f10c 0c10 	add.w	ip, ip, #16
 8002e48:	4574      	cmp	r4, lr
 8002e4a:	d1f3      	bne.n	8002e34 <SYS_OK_RECOVERED+0x54>
 8002e4c:	4663      	mov	r3, ip
 8002e4e:	4622      	mov	r2, r4
 8002e50:	6810      	ldr	r0, [r2, #0]
 8002e52:	6018      	str	r0, [r3, #0]
 8002e54:	7912      	ldrb	r2, [r2, #4]
 8002e56:	711a      	strb	r2, [r3, #4]
				"RECUPERADA COM TODOS OS COMPONENTES.\r\n");
		break;
 8002e58:	e0b7      	b.n	8002fca <SYS_OK_RECOVERED+0x1ea>
	case 7:
		strcat(BUFFER_SERIAL, "\r\nCOMUNICACAO COM CPU E "
 8002e5a:	4865      	ldr	r0, [pc, #404]	; (8002ff0 <SYS_OK_RECOVERED+0x210>)
 8002e5c:	f7fd f9c2 	bl	80001e4 <strlen>
 8002e60:	4603      	mov	r3, r0
 8002e62:	461a      	mov	r2, r3
 8002e64:	4b62      	ldr	r3, [pc, #392]	; (8002ff0 <SYS_OK_RECOVERED+0x210>)
 8002e66:	4413      	add	r3, r2
 8002e68:	4a63      	ldr	r2, [pc, #396]	; (8002ff8 <SYS_OK_RECOVERED+0x218>)
 8002e6a:	4614      	mov	r4, r2
 8002e6c:	469c      	mov	ip, r3
 8002e6e:	f104 0e20 	add.w	lr, r4, #32
 8002e72:	4665      	mov	r5, ip
 8002e74:	4626      	mov	r6, r4
 8002e76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002e78:	6028      	str	r0, [r5, #0]
 8002e7a:	6069      	str	r1, [r5, #4]
 8002e7c:	60aa      	str	r2, [r5, #8]
 8002e7e:	60eb      	str	r3, [r5, #12]
 8002e80:	3410      	adds	r4, #16
 8002e82:	f10c 0c10 	add.w	ip, ip, #16
 8002e86:	4574      	cmp	r4, lr
 8002e88:	d1f3      	bne.n	8002e72 <SYS_OK_RECOVERED+0x92>
 8002e8a:	4662      	mov	r2, ip
 8002e8c:	4623      	mov	r3, r4
 8002e8e:	cb03      	ldmia	r3!, {r0, r1}
 8002e90:	6010      	str	r0, [r2, #0]
 8002e92:	6051      	str	r1, [r2, #4]
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	8113      	strh	r3, [r2, #8]
				"UPA RECUPERADA.\r\n");
		break;
 8002e98:	e097      	b.n	8002fca <SYS_OK_RECOVERED+0x1ea>
	case 6:
		strcat(BUFFER_SERIAL, "\r\nCOMUNICACAO COM CPU E"
 8002e9a:	4855      	ldr	r0, [pc, #340]	; (8002ff0 <SYS_OK_RECOVERED+0x210>)
 8002e9c:	f7fd f9a2 	bl	80001e4 <strlen>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4b52      	ldr	r3, [pc, #328]	; (8002ff0 <SYS_OK_RECOVERED+0x210>)
 8002ea6:	4413      	add	r3, r2
 8002ea8:	4a54      	ldr	r2, [pc, #336]	; (8002ffc <SYS_OK_RECOVERED+0x21c>)
 8002eaa:	4614      	mov	r4, r2
 8002eac:	469c      	mov	ip, r3
 8002eae:	f104 0e20 	add.w	lr, r4, #32
 8002eb2:	4665      	mov	r5, ip
 8002eb4:	4626      	mov	r6, r4
 8002eb6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002eb8:	6028      	str	r0, [r5, #0]
 8002eba:	6069      	str	r1, [r5, #4]
 8002ebc:	60aa      	str	r2, [r5, #8]
 8002ebe:	60eb      	str	r3, [r5, #12]
 8002ec0:	3410      	adds	r4, #16
 8002ec2:	f10c 0c10 	add.w	ip, ip, #16
 8002ec6:	4574      	cmp	r4, lr
 8002ec8:	d1f3      	bne.n	8002eb2 <SYS_OK_RECOVERED+0xd2>
 8002eca:	4662      	mov	r2, ip
 8002ecc:	4623      	mov	r3, r4
 8002ece:	cb03      	ldmia	r3!, {r0, r1}
 8002ed0:	6010      	str	r0, [r2, #0]
 8002ed2:	6051      	str	r1, [r2, #4]
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	8113      	strh	r3, [r2, #8]
				" ESP RECUPERADA.\r\n");
		break;
 8002ed8:	e077      	b.n	8002fca <SYS_OK_RECOVERED+0x1ea>
	case 5:
		strcat(BUFFER_SERIAL, "\r\nCOMUNICACAO COM CPU"
 8002eda:	4845      	ldr	r0, [pc, #276]	; (8002ff0 <SYS_OK_RECOVERED+0x210>)
 8002edc:	f7fd f982 	bl	80001e4 <strlen>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4b42      	ldr	r3, [pc, #264]	; (8002ff0 <SYS_OK_RECOVERED+0x210>)
 8002ee6:	4413      	add	r3, r2
 8002ee8:	4a45      	ldr	r2, [pc, #276]	; (8003000 <SYS_OK_RECOVERED+0x220>)
 8002eea:	4614      	mov	r4, r2
 8002eec:	469c      	mov	ip, r3
 8002eee:	f104 0e20 	add.w	lr, r4, #32
 8002ef2:	4665      	mov	r5, ip
 8002ef4:	4626      	mov	r6, r4
 8002ef6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002ef8:	6028      	str	r0, [r5, #0]
 8002efa:	6069      	str	r1, [r5, #4]
 8002efc:	60aa      	str	r2, [r5, #8]
 8002efe:	60eb      	str	r3, [r5, #12]
 8002f00:	3410      	adds	r4, #16
 8002f02:	f10c 0c10 	add.w	ip, ip, #16
 8002f06:	4574      	cmp	r4, lr
 8002f08:	d1f3      	bne.n	8002ef2 <SYS_OK_RECOVERED+0x112>
 8002f0a:	4663      	mov	r3, ip
 8002f0c:	4622      	mov	r2, r4
 8002f0e:	6810      	ldr	r0, [r2, #0]
 8002f10:	6018      	str	r0, [r3, #0]
				" RECUPERADA.\r\n");
		break;
 8002f12:	e05a      	b.n	8002fca <SYS_OK_RECOVERED+0x1ea>
	case 3:
		strcat(BUFFER_SERIAL, "\r\nCOMUNICACAO COM UPA"
 8002f14:	4836      	ldr	r0, [pc, #216]	; (8002ff0 <SYS_OK_RECOVERED+0x210>)
 8002f16:	f7fd f965 	bl	80001e4 <strlen>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b34      	ldr	r3, [pc, #208]	; (8002ff0 <SYS_OK_RECOVERED+0x210>)
 8002f20:	4413      	add	r3, r2
 8002f22:	4a38      	ldr	r2, [pc, #224]	; (8003004 <SYS_OK_RECOVERED+0x224>)
 8002f24:	4614      	mov	r4, r2
 8002f26:	469c      	mov	ip, r3
 8002f28:	f104 0e20 	add.w	lr, r4, #32
 8002f2c:	4665      	mov	r5, ip
 8002f2e:	4626      	mov	r6, r4
 8002f30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002f32:	6028      	str	r0, [r5, #0]
 8002f34:	6069      	str	r1, [r5, #4]
 8002f36:	60aa      	str	r2, [r5, #8]
 8002f38:	60eb      	str	r3, [r5, #12]
 8002f3a:	3410      	adds	r4, #16
 8002f3c:	f10c 0c10 	add.w	ip, ip, #16
 8002f40:	4574      	cmp	r4, lr
 8002f42:	d1f3      	bne.n	8002f2c <SYS_OK_RECOVERED+0x14c>
 8002f44:	4662      	mov	r2, ip
 8002f46:	4623      	mov	r3, r4
 8002f48:	cb03      	ldmia	r3!, {r0, r1}
 8002f4a:	6010      	str	r0, [r2, #0]
 8002f4c:	6051      	str	r1, [r2, #4]
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	8113      	strh	r3, [r2, #8]
				" E ESP RECUPERADA.\r\n");
		break;
 8002f52:	e03a      	b.n	8002fca <SYS_OK_RECOVERED+0x1ea>
	case 2:
		strcat(BUFFER_SERIAL, "\r\nCOMUNICACAO COM"
 8002f54:	4826      	ldr	r0, [pc, #152]	; (8002ff0 <SYS_OK_RECOVERED+0x210>)
 8002f56:	f7fd f945 	bl	80001e4 <strlen>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <SYS_OK_RECOVERED+0x210>)
 8002f60:	4413      	add	r3, r2
 8002f62:	4a29      	ldr	r2, [pc, #164]	; (8003008 <SYS_OK_RECOVERED+0x228>)
 8002f64:	4614      	mov	r4, r2
 8002f66:	469c      	mov	ip, r3
 8002f68:	f104 0e20 	add.w	lr, r4, #32
 8002f6c:	4665      	mov	r5, ip
 8002f6e:	4626      	mov	r6, r4
 8002f70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002f72:	6028      	str	r0, [r5, #0]
 8002f74:	6069      	str	r1, [r5, #4]
 8002f76:	60aa      	str	r2, [r5, #8]
 8002f78:	60eb      	str	r3, [r5, #12]
 8002f7a:	3410      	adds	r4, #16
 8002f7c:	f10c 0c10 	add.w	ip, ip, #16
 8002f80:	4574      	cmp	r4, lr
 8002f82:	d1f3      	bne.n	8002f6c <SYS_OK_RECOVERED+0x18c>
 8002f84:	4663      	mov	r3, ip
 8002f86:	4622      	mov	r2, r4
 8002f88:	6810      	ldr	r0, [r2, #0]
 8002f8a:	6018      	str	r0, [r3, #0]
				" UPA RECUPERADA.\r\n");
		break;
 8002f8c:	e01d      	b.n	8002fca <SYS_OK_RECOVERED+0x1ea>
	case 1:
		strcat(BUFFER_SERIAL, "\r\nCOMUNICACAO COM"
 8002f8e:	4818      	ldr	r0, [pc, #96]	; (8002ff0 <SYS_OK_RECOVERED+0x210>)
 8002f90:	f7fd f928 	bl	80001e4 <strlen>
 8002f94:	4603      	mov	r3, r0
 8002f96:	461a      	mov	r2, r3
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <SYS_OK_RECOVERED+0x210>)
 8002f9a:	4413      	add	r3, r2
 8002f9c:	4a1b      	ldr	r2, [pc, #108]	; (800300c <SYS_OK_RECOVERED+0x22c>)
 8002f9e:	4614      	mov	r4, r2
 8002fa0:	469c      	mov	ip, r3
 8002fa2:	f104 0e20 	add.w	lr, r4, #32
 8002fa6:	4665      	mov	r5, ip
 8002fa8:	4626      	mov	r6, r4
 8002faa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002fac:	6028      	str	r0, [r5, #0]
 8002fae:	6069      	str	r1, [r5, #4]
 8002fb0:	60aa      	str	r2, [r5, #8]
 8002fb2:	60eb      	str	r3, [r5, #12]
 8002fb4:	3410      	adds	r4, #16
 8002fb6:	f10c 0c10 	add.w	ip, ip, #16
 8002fba:	4574      	cmp	r4, lr
 8002fbc:	d1f3      	bne.n	8002fa6 <SYS_OK_RECOVERED+0x1c6>
 8002fbe:	4663      	mov	r3, ip
 8002fc0:	4622      	mov	r2, r4
 8002fc2:	6810      	ldr	r0, [r2, #0]
 8002fc4:	6018      	str	r0, [r3, #0]
				" ESP RECUPERADA.\r\n");
		break;
 8002fc6:	e000      	b.n	8002fca <SYS_OK_RECOVERED+0x1ea>
	default:
		break;
 8002fc8:	bf00      	nop
	}
	strcat(BUFFER_SERIAL, "\r\n=========== !!! SYSTEM STATUS: ESP...OK, UPA"
 8002fca:	4809      	ldr	r0, [pc, #36]	; (8002ff0 <SYS_OK_RECOVERED+0x210>)
 8002fcc:	f7fd f90a 	bl	80001e4 <strlen>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <SYS_OK_RECOVERED+0x210>)
 8002fd6:	4413      	add	r3, r2
 8002fd8:	4a0d      	ldr	r2, [pc, #52]	; (8003010 <SYS_OK_RECOVERED+0x230>)
 8002fda:	4618      	mov	r0, r3
 8002fdc:	4611      	mov	r1, r2
 8002fde:	2352      	movs	r3, #82	; 0x52
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f007 fe11 	bl	800ac08 <memcpy>
			"...OK, CPU...OK. !!! ============\r\n");
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	200007b0 	.word	0x200007b0
 8002ff4:	0800f90c 	.word	0x0800f90c
 8002ff8:	0800f58c 	.word	0x0800f58c
 8002ffc:	0800f640 	.word	0x0800f640
 8003000:	0800f568 	.word	0x0800f568
 8003004:	0800f944 	.word	0x0800f944
 8003008:	0800f544 	.word	0x0800f544
 800300c:	0800f61c 	.word	0x0800f61c
 8003010:	0800f970 	.word	0x0800f970

08003014 <HAL_GetTick>:
  *
  * @param  none
  *
  * @retval uwTick
  */
uint32_t HAL_GetTick(void){
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return uwTick;
 8003018:	4b03      	ldr	r3, [pc, #12]	; (8003028 <HAL_GetTick+0x14>)
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000c54 	.word	0x20000c54

0800302c <SET_SELECTOR>:
  *
  * @param  MODE: ON or OFF.
  *
  * @retval void
  */
void SET_SELECTOR(int MODE){
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

	/* MUX On/Off
	 * 1 -> OFF
	 * 0 -> ON */
	HAL_GPIO_WritePin(ON_OFF_SWITCH_GPIO_Port, ON_OFF_SWITCH_Pin, !MODE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	bf0c      	ite	eq
 800303a:	2301      	moveq	r3, #1
 800303c:	2300      	movne	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	2102      	movs	r1, #2
 8003044:	4803      	ldr	r0, [pc, #12]	; (8003054 <SET_SELECTOR+0x28>)
 8003046:	f003 fb7f 	bl	8006748 <HAL_GPIO_WritePin>

}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	48000800 	.word	0x48000800

08003058 <AB_Position_STM>:
  *
  * @param  none
  *
  * @retval void
  */
void AB_Position_STM(){
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(A_SWITCH_GPIO_Port, A_SWITCH_Pin, HIGH);
 800305c:	2201      	movs	r2, #1
 800305e:	2108      	movs	r1, #8
 8003060:	4804      	ldr	r0, [pc, #16]	; (8003074 <AB_Position_STM+0x1c>)
 8003062:	f003 fb71 	bl	8006748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_SWITCH_GPIO_Port, B_SWITCH_Pin, LOW);
 8003066:	2200      	movs	r2, #0
 8003068:	2104      	movs	r1, #4
 800306a:	4802      	ldr	r0, [pc, #8]	; (8003074 <AB_Position_STM+0x1c>)
 800306c:	f003 fb6c 	bl	8006748 <HAL_GPIO_WritePin>

}
 8003070:	bf00      	nop
 8003072:	bd80      	pop	{r7, pc}
 8003074:	48000800 	.word	0x48000800

08003078 <AB_Position_UPA>:
  *
  * @param  none
  *
  * @retval void
  */
void AB_Position_UPA(){
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(A_SWITCH_GPIO_Port, A_SWITCH_Pin, LOW);
 800307c:	2200      	movs	r2, #0
 800307e:	2108      	movs	r1, #8
 8003080:	4804      	ldr	r0, [pc, #16]	; (8003094 <AB_Position_UPA+0x1c>)
 8003082:	f003 fb61 	bl	8006748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_SWITCH_GPIO_Port, B_SWITCH_Pin, HIGH);
 8003086:	2201      	movs	r2, #1
 8003088:	2104      	movs	r1, #4
 800308a:	4802      	ldr	r0, [pc, #8]	; (8003094 <AB_Position_UPA+0x1c>)
 800308c:	f003 fb5c 	bl	8006748 <HAL_GPIO_WritePin>

}
 8003090:	bf00      	nop
 8003092:	bd80      	pop	{r7, pc}
 8003094:	48000800 	.word	0x48000800

08003098 <Init_Output_Pins>:
  *
  * @param  none
  *
  * @retval void
  */
void Init_Output_Pins(){
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(PWM_OUT_CPU_GPIO_Port, PWM_OUT_CPU_Pin, LOW);
 800309c:	2200      	movs	r2, #0
 800309e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030a6:	f003 fb4f 	bl	8006748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWM_OUT_UPA_GPIO_Port, PWM_OUT_UPA_Pin, LOW);
 80030aa:	2200      	movs	r2, #0
 80030ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030b4:	f003 fb48 	bl	8006748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_PWM_ESP_GPIO_Port, OUT_PWM_ESP_Pin, LOW);
 80030b8:	2200      	movs	r2, #0
 80030ba:	2120      	movs	r1, #32
 80030bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c0:	f003 fb42 	bl	8006748 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RELE_FREIO_STM_GPIO_Port, RELE_FREIO_STM_Pin, LOW);
 80030c4:	2200      	movs	r2, #0
 80030c6:	2140      	movs	r1, #64	; 0x40
 80030c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030cc:	f003 fb3c 	bl	8006748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FEEDBACK_CPU_GPIO_Port, FEEDBACK_CPU_Pin, LOW);
 80030d0:	2200      	movs	r2, #0
 80030d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030d6:	4817      	ldr	r0, [pc, #92]	; (8003134 <Init_Output_Pins+0x9c>)
 80030d8:	f003 fb36 	bl	8006748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, LOW);
 80030dc:	2200      	movs	r2, #0
 80030de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030e2:	4814      	ldr	r0, [pc, #80]	; (8003134 <Init_Output_Pins+0x9c>)
 80030e4:	f003 fb30 	bl	8006748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, LOW);
 80030e8:	2200      	movs	r2, #0
 80030ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030ee:	4811      	ldr	r0, [pc, #68]	; (8003134 <Init_Output_Pins+0x9c>)
 80030f0:	f003 fb2a 	bl	8006748 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(IO_OUT_ESP_1_GPIO_Port, IO_OUT_ESP_1_Pin, LOW);
 80030f4:	2200      	movs	r2, #0
 80030f6:	2101      	movs	r1, #1
 80030f8:	480e      	ldr	r0, [pc, #56]	; (8003134 <Init_Output_Pins+0x9c>)
 80030fa:	f003 fb25 	bl	8006748 <HAL_GPIO_WritePin>

	/* Posicao padrao: MUX Ligado */
	SET_SELECTOR(ON);
 80030fe:	2001      	movs	r0, #1
 8003100:	f7ff ff94 	bl	800302c <SET_SELECTOR>

	/* Posicao padrao: Sinais da UPA */
	AB_Position_UPA();
 8003104:	f7ff ffb8 	bl	8003078 <AB_Position_UPA>

	/*	HAL_GPIO_WritePin(ON_OFF_SWITCH_GPIO_Port, ON_OFF_SWITCH_Pin, LOW); */
	HAL_GPIO_WritePin(CPU_OUT_A_GPIO_Port, CPU_OUT_A_Pin, LOW);
 8003108:	2200      	movs	r2, #0
 800310a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800310e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003112:	f003 fb19 	bl	8006748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CPU_OUT_B_GPIO_Port, CPU_OUT_B_Pin, LOW);
 8003116:	2200      	movs	r2, #0
 8003118:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800311c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003120:	f003 fb12 	bl	8006748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CPU_OUT_C_GPIO_Port, CPU_OUT_C_Pin, LOW);
 8003124:	2200      	movs	r2, #0
 8003126:	2101      	movs	r1, #1
 8003128:	4803      	ldr	r0, [pc, #12]	; (8003138 <Init_Output_Pins+0xa0>)
 800312a:	f003 fb0d 	bl	8006748 <HAL_GPIO_WritePin>

}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	48000400 	.word	0x48000400
 8003138:	48000800 	.word	0x48000800

0800313c <Acionamento>:
  *
  * @param  none
  *
  * @retval void
  */
void Acionamento(){
 800313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313e:	af00      	add	r7, sp, #0

	/* Ligar MUX */
	SET_SELECTOR(ON);
 8003140:	2001      	movs	r0, #1
 8003142:	f7ff ff73 	bl	800302c <SET_SELECTOR>

	/*Acionar por BREAK_STATUS */
	HAL_GPIO_WritePin(RELE_FREIO_STM_GPIO_Port,RELE_FREIO_STM_Pin, BREAK_STATUS);
 8003146:	4b25      	ldr	r3, [pc, #148]	; (80031dc <Acionamento+0xa0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	2140      	movs	r1, #64	; 0x40
 8003150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003154:	f003 faf8 	bl	8006748 <HAL_GPIO_WritePin>

	if (BREAK_STATUS){
 8003158:	4b20      	ldr	r3, [pc, #128]	; (80031dc <Acionamento+0xa0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <Acionamento+0x2a>
		/* Mudar para a posicao STM */
		AB_Position_STM();
 8003160:	f7ff ff7a 	bl	8003058 <AB_Position_STM>
 8003164:	e001      	b.n	800316a <Acionamento+0x2e>
	}
	else {
		AB_Position_UPA();
 8003166:	f7ff ff87 	bl	8003078 <AB_Position_UPA>
	}

	/* Feedback para CPU */
	HAL_GPIO_WritePin(FEEDBACK_CPU_GPIO_Port, FEEDBACK_CPU_Pin, BREAK_STATUS);
 800316a:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <Acionamento+0xa0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003176:	481a      	ldr	r0, [pc, #104]	; (80031e0 <Acionamento+0xa4>)
 8003178:	f003 fae6 	bl	8006748 <HAL_GPIO_WritePin>

	/* Feedback para ESP */
	HAL_GPIO_WritePin(IO_OUT_ESP_1_GPIO_Port, IO_OUT_ESP_1_Pin, BREAK_STATUS);
 800317c:	4b17      	ldr	r3, [pc, #92]	; (80031dc <Acionamento+0xa0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	2101      	movs	r1, #1
 8003186:	4816      	ldr	r0, [pc, #88]	; (80031e0 <Acionamento+0xa4>)
 8003188:	f003 fade 	bl	8006748 <HAL_GPIO_WritePin>

	/* Preencher buffer para enviar feedback ao transmissor */
	PreencherBuffer(BREAK_STATUS);
 800318c:	4b13      	ldr	r3, [pc, #76]	; (80031dc <Acionamento+0xa0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f001 fcbb 	bl	8004b0c <PreencherBuffer>

	/*Informar para monitor serial */
	strcat(BUFFER_SERIAL, "\n\rComando Efetuado. Enviando Feedback...\r\n");
 8003196:	4813      	ldr	r0, [pc, #76]	; (80031e4 <Acionamento+0xa8>)
 8003198:	f7fd f824 	bl	80001e4 <strlen>
 800319c:	4603      	mov	r3, r0
 800319e:	461a      	mov	r2, r3
 80031a0:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <Acionamento+0xa8>)
 80031a2:	4413      	add	r3, r2
 80031a4:	4a10      	ldr	r2, [pc, #64]	; (80031e8 <Acionamento+0xac>)
 80031a6:	4614      	mov	r4, r2
 80031a8:	469c      	mov	ip, r3
 80031aa:	f104 0e20 	add.w	lr, r4, #32
 80031ae:	4665      	mov	r5, ip
 80031b0:	4626      	mov	r6, r4
 80031b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80031b4:	6028      	str	r0, [r5, #0]
 80031b6:	6069      	str	r1, [r5, #4]
 80031b8:	60aa      	str	r2, [r5, #8]
 80031ba:	60eb      	str	r3, [r5, #12]
 80031bc:	3410      	adds	r4, #16
 80031be:	f10c 0c10 	add.w	ip, ip, #16
 80031c2:	4574      	cmp	r4, lr
 80031c4:	d1f3      	bne.n	80031ae <Acionamento+0x72>
 80031c6:	4662      	mov	r2, ip
 80031c8:	4623      	mov	r3, r4
 80031ca:	cb03      	ldmia	r3!, {r0, r1}
 80031cc:	6010      	str	r0, [r2, #0]
 80031ce:	6051      	str	r1, [r2, #4]
 80031d0:	8819      	ldrh	r1, [r3, #0]
 80031d2:	789b      	ldrb	r3, [r3, #2]
 80031d4:	8111      	strh	r1, [r2, #8]
 80031d6:	7293      	strb	r3, [r2, #10]
	//	//HAL_UART_Transmit_DMA(&huart3, BUFFER_TRANSMIT, strlen(BUFFER_TRANSMIT));
	//}

	//strcat(BUFFER_SERIAL, "\n\rFeedback enviado. \r\n");

}
 80031d8:	bf00      	nop
 80031da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031dc:	20000264 	.word	0x20000264
 80031e0:	48000400 	.word	0x48000400
 80031e4:	200007b0 	.word	0x200007b0
 80031e8:	0800f9c4 	.word	0x0800f9c4

080031ec <HAL_UART_RxCpltCallback>:
  *
  * @param  *huart:		Objeto UART.
  *
  * @retval void
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]

	/* Acender LED de dado Serial recebido */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, HIGH);
 80031f4:	2201      	movs	r2, #1
 80031f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031fa:	481b      	ldr	r0, [pc, #108]	; (8003268 <HAL_UART_RxCpltCallback+0x7c>)
 80031fc:	f003 faa4 	bl	8006748 <HAL_GPIO_WritePin>
	/* contador_dados => index */
	static int contador_dados = 0;
	/* Preencher a partir do Start Byte */
	static int HABILITAR_PREENCHIMENTO = 0;

	if (Data[0] == end_byte[0]) {
 8003200:	4b1a      	ldr	r3, [pc, #104]	; (800326c <HAL_UART_RxCpltCallback+0x80>)
 8003202:	781a      	ldrb	r2, [r3, #0]
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_UART_RxCpltCallback+0x84>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d108      	bne.n	800321e <HAL_UART_RxCpltCallback+0x32>
		contador_dados = 0;
 800320c:	4b19      	ldr	r3, [pc, #100]	; (8003274 <HAL_UART_RxCpltCallback+0x88>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
		HABILITAR_PREENCHIMENTO = 0;
 8003212:	4b19      	ldr	r3, [pc, #100]	; (8003278 <HAL_UART_RxCpltCallback+0x8c>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
		VerificarComando();
 8003218:	f001 fd1c 	bl	8004c54 <VerificarComando>
 800321c:	e01b      	b.n	8003256 <HAL_UART_RxCpltCallback+0x6a>
	}
	else {
		if (Data[0] == start_byte[0]){
 800321e:	4b13      	ldr	r3, [pc, #76]	; (800326c <HAL_UART_RxCpltCallback+0x80>)
 8003220:	781a      	ldrb	r2, [r3, #0]
 8003222:	4b16      	ldr	r3, [pc, #88]	; (800327c <HAL_UART_RxCpltCallback+0x90>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d103      	bne.n	8003232 <HAL_UART_RxCpltCallback+0x46>
			HABILITAR_PREENCHIMENTO = 1;
 800322a:	4b13      	ldr	r3, [pc, #76]	; (8003278 <HAL_UART_RxCpltCallback+0x8c>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	e011      	b.n	8003256 <HAL_UART_RxCpltCallback+0x6a>
		}
		else if (HABILITAR_PREENCHIMENTO){
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <HAL_UART_RxCpltCallback+0x8c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00d      	beq.n	8003256 <HAL_UART_RxCpltCallback+0x6a>
			FLAG_XBEE_PING = 0;
 800323a:	4b11      	ldr	r3, [pc, #68]	; (8003280 <HAL_UART_RxCpltCallback+0x94>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
			BUFFER_RECEIVE[contador_dados] = Data[0];
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <HAL_UART_RxCpltCallback+0x88>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a09      	ldr	r2, [pc, #36]	; (800326c <HAL_UART_RxCpltCallback+0x80>)
 8003246:	7811      	ldrb	r1, [r2, #0]
 8003248:	4a0e      	ldr	r2, [pc, #56]	; (8003284 <HAL_UART_RxCpltCallback+0x98>)
 800324a:	54d1      	strb	r1, [r2, r3]
			contador_dados++;
 800324c:	4b09      	ldr	r3, [pc, #36]	; (8003274 <HAL_UART_RxCpltCallback+0x88>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3301      	adds	r3, #1
 8003252:	4a08      	ldr	r2, [pc, #32]	; (8003274 <HAL_UART_RxCpltCallback+0x88>)
 8003254:	6013      	str	r3, [r2, #0]
		}
	}
	/* Manter continuo recebimento */
	HAL_UART_Receive_IT(&huart3, Data, 1);
 8003256:	2201      	movs	r2, #1
 8003258:	4904      	ldr	r1, [pc, #16]	; (800326c <HAL_UART_RxCpltCallback+0x80>)
 800325a:	480b      	ldr	r0, [pc, #44]	; (8003288 <HAL_UART_RxCpltCallback+0x9c>)
 800325c:	f006 f890 	bl	8009380 <HAL_UART_Receive_IT>
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	48000400 	.word	0x48000400
 800326c:	20000564 	.word	0x20000564
 8003270:	0800fc40 	.word	0x0800fc40
 8003274:	200002b4 	.word	0x200002b4
 8003278:	200002b8 	.word	0x200002b8
 800327c:	0800fc28 	.word	0x0800fc28
 8003280:	2000027c 	.word	0x2000027c
 8003284:	200002e4 	.word	0x200002e4
 8003288:	20000434 	.word	0x20000434

0800328c <HAL_UART_TxCpltCallback>:
  *
  * @param  *huart:		Objeto UART.
  *
  * @retval void
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

	if (huart == &huart3){
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a06      	ldr	r2, [pc, #24]	; (80032b0 <HAL_UART_TxCpltCallback+0x24>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d105      	bne.n	80032a8 <HAL_UART_TxCpltCallback+0x1c>
		/* Acender LED de dado Serial enviado */
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, HIGH);
 800329c:	2201      	movs	r2, #1
 800329e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032a2:	4804      	ldr	r0, [pc, #16]	; (80032b4 <HAL_UART_TxCpltCallback+0x28>)
 80032a4:	f003 fa50 	bl	8006748 <HAL_GPIO_WritePin>
	}

}
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20000434 	.word	0x20000434
 80032b4:	48000400 	.word	0x48000400

080032b8 <TOGGLE_STATUS_PINS>:
  *
  * @param  STATUS:		Digital H/L.
  *
  * @retval void
  */
void TOGGLE_STATUS_PINS(bool STATUS){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(PWM_OUT_CPU_GPIO_Port, PWM_OUT_CPU_Pin, STATUS);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032ce:	f003 fa3b 	bl	8006748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWM_OUT_UPA_GPIO_Port, PWM_OUT_UPA_Pin, STATUS);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032e0:	f003 fa32 	bl	8006748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_PWM_ESP_GPIO_Port, OUT_PWM_ESP_Pin, STATUS);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	2120      	movs	r1, #32
 80032ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032f0:	f003 fa2a 	bl	8006748 <HAL_GPIO_WritePin>

}
 80032f4:	bf00      	nop
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <AJUSTAR_DUTY_CYCLE_FR>:
  *
  * @param  none
  *
  * @retval void
  */
void AJUSTAR_DUTY_CYCLE_FR(){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
	 * esta solicitando o controle do FR. Em seguida
	 * o valor correspondente (4 bits) sera calculado
	 * para ajustar a largura do pulso do PWM. */

	/* Variaveis de controle do FR */
	CONTROLE_FR[3] = HAL_GPIO_ReadPin(FR_BIT_1_GPIO_Port, FR_BIT_1_Pin);
 8003302:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003306:	4842      	ldr	r0, [pc, #264]	; (8003410 <AJUSTAR_DUTY_CYCLE_FR+0x114>)
 8003308:	f003 fa06 	bl	8006718 <HAL_GPIO_ReadPin>
 800330c:	4603      	mov	r3, r0
 800330e:	461a      	mov	r2, r3
 8003310:	4b40      	ldr	r3, [pc, #256]	; (8003414 <AJUSTAR_DUTY_CYCLE_FR+0x118>)
 8003312:	60da      	str	r2, [r3, #12]
	CONTROLE_FR[2] = HAL_GPIO_ReadPin(FR_BIT_2_GPIO_Port, FR_BIT_2_Pin);
 8003314:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003318:	483d      	ldr	r0, [pc, #244]	; (8003410 <AJUSTAR_DUTY_CYCLE_FR+0x114>)
 800331a:	f003 f9fd 	bl	8006718 <HAL_GPIO_ReadPin>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	4b3c      	ldr	r3, [pc, #240]	; (8003414 <AJUSTAR_DUTY_CYCLE_FR+0x118>)
 8003324:	609a      	str	r2, [r3, #8]
	CONTROLE_FR[1] = HAL_GPIO_ReadPin(FR_BIT_3_GPIO_Port, FR_BIT_3_Pin);
 8003326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800332a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800332e:	f003 f9f3 	bl	8006718 <HAL_GPIO_ReadPin>
 8003332:	4603      	mov	r3, r0
 8003334:	461a      	mov	r2, r3
 8003336:	4b37      	ldr	r3, [pc, #220]	; (8003414 <AJUSTAR_DUTY_CYCLE_FR+0x118>)
 8003338:	605a      	str	r2, [r3, #4]
	CONTROLE_FR[0] = HAL_GPIO_ReadPin(FR_BIT_4_GPIO_Port, FR_BIT_4_Pin);
 800333a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800333e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003342:	f003 f9e9 	bl	8006718 <HAL_GPIO_ReadPin>
 8003346:	4603      	mov	r3, r0
 8003348:	461a      	mov	r2, r3
 800334a:	4b32      	ldr	r3, [pc, #200]	; (8003414 <AJUSTAR_DUTY_CYCLE_FR+0x118>)
 800334c:	601a      	str	r2, [r3, #0]

	int VALOR_FR = CONTROLE_FR[3] + 2*CONTROLE_FR[2] + 4*CONTROLE_FR[1] +
 800334e:	4b31      	ldr	r3, [pc, #196]	; (8003414 <AJUSTAR_DUTY_CYCLE_FR+0x118>)
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	4b30      	ldr	r3, [pc, #192]	; (8003414 <AJUSTAR_DUTY_CYCLE_FR+0x118>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	441a      	add	r2, r3
 800335a:	4b2e      	ldr	r3, [pc, #184]	; (8003414 <AJUSTAR_DUTY_CYCLE_FR+0x118>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	441a      	add	r2, r3
			8*CONTROLE_FR[0];
 8003362:	4b2c      	ldr	r3, [pc, #176]	; (8003414 <AJUSTAR_DUTY_CYCLE_FR+0x118>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	00db      	lsls	r3, r3, #3
	int VALOR_FR = CONTROLE_FR[3] + 2*CONTROLE_FR[2] + 4*CONTROLE_FR[1] +
 8003368:	4413      	add	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]

	static int VALOR_FR_ANTERIOR = 30 /*UM VALOR QUALQUER DIFERENTE DE FR*/;

	/* Desnecessario reajuste se o valor for o mesmo do anterior */
	if (VALOR_FR != VALOR_FR_ANTERIOR){
 800336c:	4b2a      	ldr	r3, [pc, #168]	; (8003418 <AJUSTAR_DUTY_CYCLE_FR+0x11c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	429a      	cmp	r2, r3
 8003374:	d048      	beq.n	8003408 <AJUSTAR_DUTY_CYCLE_FR+0x10c>
		int VALUE_INT = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]

		/* TAXA = (VALOR_FR/VALOR_FR maximo), VALOR_FR maximo = 15 */
		float TAXA = (float) (VALOR_FR*100/15)/100;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2264      	movs	r2, #100	; 0x64
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	4a26      	ldr	r2, [pc, #152]	; (800341c <AJUSTAR_DUTY_CYCLE_FR+0x120>)
 8003384:	fb82 1203 	smull	r1, r2, r2, r3
 8003388:	441a      	add	r2, r3
 800338a:	10d2      	asrs	r2, r2, #3
 800338c:	17db      	asrs	r3, r3, #31
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	ee07 3a90 	vmov	s15, r3
 8003394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003398:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003420 <AJUSTAR_DUTY_CYCLE_FR+0x124>
 800339c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033a0:	edc7 7a01 	vstr	s15, [r7, #4]

		/* VALUE_INT = TAXA*(LARGURA DE PULSO MAXIMA) */
		VALUE_INT = (int) (TAXA*((DUTY_CYCLE_FR - DUTY_CYCLE_FR_MIN)*(200-1)/100));
 80033a4:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <AJUSTAR_DUTY_CYCLE_FR+0x128>)
 80033a6:	ed93 7a00 	vldr	s14, [r3]
 80033aa:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <AJUSTAR_DUTY_CYCLE_FR+0x12c>)
 80033ac:	edd3 7a00 	vldr	s15, [r3]
 80033b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800342c <AJUSTAR_DUTY_CYCLE_FR+0x130>
 80033b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033bc:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003420 <AJUSTAR_DUTY_CYCLE_FR+0x124>
 80033c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80033c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033d0:	ee17 3a90 	vmov	r3, s15
 80033d4:	60bb      	str	r3, [r7, #8]
		VALUE_INT = VALUE_INT + (int)(DUTY_CYCLE_FR_MIN*(200-1)/100);
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <AJUSTAR_DUTY_CYCLE_FR+0x12c>)
 80033d8:	edd3 7a00 	vldr	s15, [r3]
 80033dc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800342c <AJUSTAR_DUTY_CYCLE_FR+0x130>
 80033e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033e4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003420 <AJUSTAR_DUTY_CYCLE_FR+0x124>
 80033e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033f0:	ee17 2a90 	vmov	r2, s15
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4413      	add	r3, r2
 80033f8:	60bb      	str	r3, [r7, #8]

		htim4.Instance -> CCR1 = VALUE_INT;
 80033fa:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <AJUSTAR_DUTY_CYCLE_FR+0x134>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	635a      	str	r2, [r3, #52]	; 0x34

		/* Historico */
		VALOR_FR_ANTERIOR = VALOR_FR;
 8003402:	4a05      	ldr	r2, [pc, #20]	; (8003418 <AJUSTAR_DUTY_CYCLE_FR+0x11c>)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6013      	str	r3, [r2, #0]
	}
}
 8003408:	bf00      	nop
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	48000800 	.word	0x48000800
 8003414:	20000284 	.word	0x20000284
 8003418:	20000038 	.word	0x20000038
 800341c:	88888889 	.word	0x88888889
 8003420:	42c80000 	.word	0x42c80000
 8003424:	2000001c 	.word	0x2000001c
 8003428:	20000020 	.word	0x20000020
 800342c:	43470000 	.word	0x43470000
 8003430:	200003e4 	.word	0x200003e4

08003434 <LEITURA_INPUT_PINS>:
  *
  * @param  none
  *
  * @retval void
  */
void LEITURA_INPUT_PINS(){
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	af00      	add	r7, sp, #0

	/* LEITURA HABILITAR CONTROLE FREIO RETARDO */
	GATE_FR = HAL_GPIO_ReadPin(GATE_FR_GPIO_Port, GATE_FR_Pin);
 8003438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800343c:	4838      	ldr	r0, [pc, #224]	; (8003520 <LEITURA_INPUT_PINS+0xec>)
 800343e:	f003 f96b 	bl	8006718 <HAL_GPIO_ReadPin>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	4b37      	ldr	r3, [pc, #220]	; (8003524 <LEITURA_INPUT_PINS+0xf0>)
 8003448:	601a      	str	r2, [r3, #0]
	HAL_GPIO_ReadPin(IN_EXTRA_3_GPIO_Port, IN_EXTRA_3_Pin);
	HAL_GPIO_ReadPin(IN_CPU_6_GPIO_Port, IN_CPU_6_Pin);
	HAL_GPIO_ReadPin(IN_CPU_7_GPIO_Port, IN_CPU_7_Pin);
	*/

	STATUS_CONNECTION_ESP = HAL_GPIO_ReadPin(CONNECT_ESP_IN_GPIO_Port, CONNECT_ESP_IN_Pin);
 800344a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800344e:	4836      	ldr	r0, [pc, #216]	; (8003528 <LEITURA_INPUT_PINS+0xf4>)
 8003450:	f003 f962 	bl	8006718 <HAL_GPIO_ReadPin>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	4b34      	ldr	r3, [pc, #208]	; (800352c <LEITURA_INPUT_PINS+0xf8>)
 800345a:	601a      	str	r2, [r3, #0]
	STATUS_CLIENTS_ESP = HAL_GPIO_ReadPin(ESP_IN_CLIENT_GPIO_Port, ESP_IN_CLIENT_Pin);
 800345c:	2104      	movs	r1, #4
 800345e:	4832      	ldr	r0, [pc, #200]	; (8003528 <LEITURA_INPUT_PINS+0xf4>)
 8003460:	f003 f95a 	bl	8006718 <HAL_GPIO_ReadPin>
 8003464:	4603      	mov	r3, r0
 8003466:	461a      	mov	r2, r3
 8003468:	4b31      	ldr	r3, [pc, #196]	; (8003530 <LEITURA_INPUT_PINS+0xfc>)
 800346a:	601a      	str	r2, [r3, #0]

	/* Armazenar leitura anterior clientes. */
	static int LEITURA_ANTERIOR_CLIENTES = 0;

	if (STATUS_CLIENTS_ESP && !LEITURA_ANTERIOR_CLIENTES){
 800346c:	4b30      	ldr	r3, [pc, #192]	; (8003530 <LEITURA_INPUT_PINS+0xfc>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d027      	beq.n	80034c4 <LEITURA_INPUT_PINS+0x90>
 8003474:	4b2f      	ldr	r3, [pc, #188]	; (8003534 <LEITURA_INPUT_PINS+0x100>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d123      	bne.n	80034c4 <LEITURA_INPUT_PINS+0x90>
		/* ADVERTER QUE PELO MENOS 1 CLIENTE CONECTOU */
		LEITURA_ANTERIOR_CLIENTES = 1;
 800347c:	4b2d      	ldr	r3, [pc, #180]	; (8003534 <LEITURA_INPUT_PINS+0x100>)
 800347e:	2201      	movs	r2, #1
 8003480:	601a      	str	r2, [r3, #0]
		show_now();
 8003482:	f000 ff1f 	bl	80042c4 <show_now>
		strcat(BUFFER_SERIAL, "\r\nPelo menos um cliente conectado ao servidor ESP.");
 8003486:	482c      	ldr	r0, [pc, #176]	; (8003538 <LEITURA_INPUT_PINS+0x104>)
 8003488:	f7fc feac 	bl	80001e4 <strlen>
 800348c:	4603      	mov	r3, r0
 800348e:	461a      	mov	r2, r3
 8003490:	4b29      	ldr	r3, [pc, #164]	; (8003538 <LEITURA_INPUT_PINS+0x104>)
 8003492:	4413      	add	r3, r2
 8003494:	4a29      	ldr	r2, [pc, #164]	; (800353c <LEITURA_INPUT_PINS+0x108>)
 8003496:	4614      	mov	r4, r2
 8003498:	469c      	mov	ip, r3
 800349a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800349e:	4665      	mov	r5, ip
 80034a0:	4626      	mov	r6, r4
 80034a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80034a4:	6028      	str	r0, [r5, #0]
 80034a6:	6069      	str	r1, [r5, #4]
 80034a8:	60aa      	str	r2, [r5, #8]
 80034aa:	60eb      	str	r3, [r5, #12]
 80034ac:	3410      	adds	r4, #16
 80034ae:	f10c 0c10 	add.w	ip, ip, #16
 80034b2:	4574      	cmp	r4, lr
 80034b4:	d1f3      	bne.n	800349e <LEITURA_INPUT_PINS+0x6a>
 80034b6:	4663      	mov	r3, ip
 80034b8:	4622      	mov	r2, r4
 80034ba:	8811      	ldrh	r1, [r2, #0]
 80034bc:	7892      	ldrb	r2, [r2, #2]
 80034be:	8019      	strh	r1, [r3, #0]
 80034c0:	709a      	strb	r2, [r3, #2]
		LEITURA_ANTERIOR_CLIENTES = 0;
		show_now();
		strcat(BUFFER_SERIAL, "\r\nNenhum cliente conectado ao servidor ESP.");
	}

}
 80034c2:	e02a      	b.n	800351a <LEITURA_INPUT_PINS+0xe6>
	else if (!STATUS_CLIENTS_ESP && LEITURA_ANTERIOR_CLIENTES){
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <LEITURA_INPUT_PINS+0xfc>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d126      	bne.n	800351a <LEITURA_INPUT_PINS+0xe6>
 80034cc:	4b19      	ldr	r3, [pc, #100]	; (8003534 <LEITURA_INPUT_PINS+0x100>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d022      	beq.n	800351a <LEITURA_INPUT_PINS+0xe6>
		LEITURA_ANTERIOR_CLIENTES = 0;
 80034d4:	4b17      	ldr	r3, [pc, #92]	; (8003534 <LEITURA_INPUT_PINS+0x100>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
		show_now();
 80034da:	f000 fef3 	bl	80042c4 <show_now>
		strcat(BUFFER_SERIAL, "\r\nNenhum cliente conectado ao servidor ESP.");
 80034de:	4816      	ldr	r0, [pc, #88]	; (8003538 <LEITURA_INPUT_PINS+0x104>)
 80034e0:	f7fc fe80 	bl	80001e4 <strlen>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	4b13      	ldr	r3, [pc, #76]	; (8003538 <LEITURA_INPUT_PINS+0x104>)
 80034ea:	4413      	add	r3, r2
 80034ec:	4a14      	ldr	r2, [pc, #80]	; (8003540 <LEITURA_INPUT_PINS+0x10c>)
 80034ee:	4614      	mov	r4, r2
 80034f0:	469c      	mov	ip, r3
 80034f2:	f104 0e20 	add.w	lr, r4, #32
 80034f6:	4665      	mov	r5, ip
 80034f8:	4626      	mov	r6, r4
 80034fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80034fc:	6028      	str	r0, [r5, #0]
 80034fe:	6069      	str	r1, [r5, #4]
 8003500:	60aa      	str	r2, [r5, #8]
 8003502:	60eb      	str	r3, [r5, #12]
 8003504:	3410      	adds	r4, #16
 8003506:	f10c 0c10 	add.w	ip, ip, #16
 800350a:	4574      	cmp	r4, lr
 800350c:	d1f3      	bne.n	80034f6 <LEITURA_INPUT_PINS+0xc2>
 800350e:	4665      	mov	r5, ip
 8003510:	4623      	mov	r3, r4
 8003512:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003514:	6028      	str	r0, [r5, #0]
 8003516:	6069      	str	r1, [r5, #4]
 8003518:	60aa      	str	r2, [r5, #8]
}
 800351a:	bf00      	nop
 800351c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800351e:	bf00      	nop
 8003520:	48000800 	.word	0x48000800
 8003524:	20000280 	.word	0x20000280
 8003528:	48000400 	.word	0x48000400
 800352c:	2000002c 	.word	0x2000002c
 8003530:	20000294 	.word	0x20000294
 8003534:	200002bc 	.word	0x200002bc
 8003538:	200007b0 	.word	0x200007b0
 800353c:	0800f9f0 	.word	0x0800f9f0
 8003540:	0800fa24 	.word	0x0800fa24

08003544 <HAL_TIM_PeriodElapsedCallback>:
  *
  * @param  * htim: timer 16.
  *
  * @retval void
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

	/* Somar as flags. Se nao houver interrupcao externa, nao zera */
	FLAG_SOMA_ESP++;
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x78>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3301      	adds	r3, #1
 8003552:	4a1a      	ldr	r2, [pc, #104]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003554:	6013      	str	r3, [r2, #0]
	FLAG_SOMA_UPA++;
 8003556:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3301      	adds	r3, #1
 800355c:	4a18      	ldr	r2, [pc, #96]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800355e:	6013      	str	r3, [r2, #0]
	FLAG_SOMA_CPU++;
 8003560:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3301      	adds	r3, #1
 8003566:	4a17      	ldr	r2, [pc, #92]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003568:	6013      	str	r3, [r2, #0]
	FLAG_XBEE_PING++;
 800356a:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3301      	adds	r3, #1
 8003570:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003572:	6013      	str	r3, [r2, #0]

	/* FALHA EM QUAL EQUIPAMENTO
	 * (1 -> ESP, 2 -> UPA, 5 -> CPU) */
	int status_identifier = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]

	if (FLAG_SOMA_ESP > TIMEOUT_TIMER){
 8003578:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x78>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003580:	4293      	cmp	r3, r2
 8003582:	d902      	bls.n	800358a <HAL_TIM_PeriodElapsedCallback+0x46>
		status_identifier++;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	3301      	adds	r3, #1
 8003588:	60fb      	str	r3, [r7, #12]
	}
	if (FLAG_SOMA_UPA > TIMEOUT_TIMER){
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003592:	4293      	cmp	r3, r2
 8003594:	d902      	bls.n	800359c <HAL_TIM_PeriodElapsedCallback+0x58>
		status_identifier = status_identifier + 2;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3302      	adds	r3, #2
 800359a:	60fb      	str	r3, [r7, #12]
	}
	if (FLAG_SOMA_CPU > TIMEOUT_TIMER){
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d902      	bls.n	80035ae <HAL_TIM_PeriodElapsedCallback+0x6a>
		status_identifier = status_identifier + 5;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	3305      	adds	r3, #5
 80035ac:	60fb      	str	r3, [r7, #12]
	}

	MONITORAMENTO(status_identifier);
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f7fe ff9e 	bl	80024f0 <MONITORAMENTO>
}
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000274 	.word	0x20000274
 80035c0:	20000270 	.word	0x20000270
 80035c4:	20000278 	.word	0x20000278
 80035c8:	2000027c 	.word	0x2000027c

080035cc <CPU_Handler>:
  *
  * @param  none
  *
  * @retval void
  */
void CPU_Handler(){
 80035cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0

	static int count_cpu_orders = 0;
	static uint32_t time_last_order = 0;
	uint32_t time_interval = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]
	static uint32_t sum_intervals = 0;

	/* Secao para evitar freio loop - bug do cpu */
	if (count_cpu_orders > 5 && sum_intervals < 20000){
 80035d6:	4b5c      	ldr	r3, [pc, #368]	; (8003748 <CPU_Handler+0x17c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b05      	cmp	r3, #5
 80035dc:	dd2f      	ble.n	800363e <CPU_Handler+0x72>
 80035de:	4b5b      	ldr	r3, [pc, #364]	; (800374c <CPU_Handler+0x180>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d829      	bhi.n	800363e <CPU_Handler+0x72>
		show_now();
 80035ea:	f000 fe6b 	bl	80042c4 <show_now>
		strcat(BUFFER_SERIAL, "\r\nABORTAR COMANDO CPU. FREIO ACIONADO.\r\n");
 80035ee:	4858      	ldr	r0, [pc, #352]	; (8003750 <CPU_Handler+0x184>)
 80035f0:	f7fc fdf8 	bl	80001e4 <strlen>
 80035f4:	4603      	mov	r3, r0
 80035f6:	461a      	mov	r2, r3
 80035f8:	4b55      	ldr	r3, [pc, #340]	; (8003750 <CPU_Handler+0x184>)
 80035fa:	4413      	add	r3, r2
 80035fc:	4a55      	ldr	r2, [pc, #340]	; (8003754 <CPU_Handler+0x188>)
 80035fe:	4614      	mov	r4, r2
 8003600:	469c      	mov	ip, r3
 8003602:	f104 0e20 	add.w	lr, r4, #32
 8003606:	4665      	mov	r5, ip
 8003608:	4626      	mov	r6, r4
 800360a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800360c:	6028      	str	r0, [r5, #0]
 800360e:	6069      	str	r1, [r5, #4]
 8003610:	60aa      	str	r2, [r5, #8]
 8003612:	60eb      	str	r3, [r5, #12]
 8003614:	3410      	adds	r4, #16
 8003616:	f10c 0c10 	add.w	ip, ip, #16
 800361a:	4574      	cmp	r4, lr
 800361c:	d1f3      	bne.n	8003606 <CPU_Handler+0x3a>
 800361e:	4662      	mov	r2, ip
 8003620:	4623      	mov	r3, r4
 8003622:	cb03      	ldmia	r3!, {r0, r1}
 8003624:	6010      	str	r0, [r2, #0]
 8003626:	6051      	str	r1, [r2, #4]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	7213      	strb	r3, [r2, #8]
		BREAK_STATUS = 1;
 800362c:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <CPU_Handler+0x18c>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]
		feedback_multiple = 0;
 8003632:	4b4a      	ldr	r3, [pc, #296]	; (800375c <CPU_Handler+0x190>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
		Acionamento();
 8003638:	f7ff fd80 	bl	800313c <Acionamento>
		return;
 800363c:	e080      	b.n	8003740 <CPU_Handler+0x174>
	}

	if (time_last_order != 0){
 800363e:	4b48      	ldr	r3, [pc, #288]	; (8003760 <CPU_Handler+0x194>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00c      	beq.n	8003660 <CPU_Handler+0x94>
		time_interval = HAL_GetTick() - time_last_order;
 8003646:	f7ff fce5 	bl	8003014 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	4b44      	ldr	r3, [pc, #272]	; (8003760 <CPU_Handler+0x194>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	607b      	str	r3, [r7, #4]
		sum_intervals += time_interval;
 8003654:	4b3d      	ldr	r3, [pc, #244]	; (800374c <CPU_Handler+0x180>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4413      	add	r3, r2
 800365c:	4a3b      	ldr	r2, [pc, #236]	; (800374c <CPU_Handler+0x180>)
 800365e:	6013      	str	r3, [r2, #0]
	}
	if (sum_intervals > 30000){
 8003660:	4b3a      	ldr	r3, [pc, #232]	; (800374c <CPU_Handler+0x180>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f247 5230 	movw	r2, #30000	; 0x7530
 8003668:	4293      	cmp	r3, r2
 800366a:	d905      	bls.n	8003678 <CPU_Handler+0xac>
		sum_intervals = 0;
 800366c:	4b37      	ldr	r3, [pc, #220]	; (800374c <CPU_Handler+0x180>)
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
		count_cpu_orders = 0;
 8003672:	4b35      	ldr	r3, [pc, #212]	; (8003748 <CPU_Handler+0x17c>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
	}
	time_last_order = HAL_GetTick();
 8003678:	f7ff fccc 	bl	8003014 <HAL_GetTick>
 800367c:	4603      	mov	r3, r0
 800367e:	4a38      	ldr	r2, [pc, #224]	; (8003760 <CPU_Handler+0x194>)
 8003680:	6013      	str	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(IN_CPU_6_GPIO_Port, IN_CPU_6_Pin) && !BREAK_STATUS){
 8003682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003686:	4837      	ldr	r0, [pc, #220]	; (8003764 <CPU_Handler+0x198>)
 8003688:	f003 f846 	bl	8006718 <HAL_GPIO_ReadPin>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d023      	beq.n	80036da <CPU_Handler+0x10e>
 8003692:	4b31      	ldr	r3, [pc, #196]	; (8003758 <CPU_Handler+0x18c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d11f      	bne.n	80036da <CPU_Handler+0x10e>
		show_now();
 800369a:	f000 fe13 	bl	80042c4 <show_now>
		strcat(BUFFER_SERIAL, "\r\nFREIO ACIONADO PELA CPU.\r\n");
 800369e:	482c      	ldr	r0, [pc, #176]	; (8003750 <CPU_Handler+0x184>)
 80036a0:	f7fc fda0 	bl	80001e4 <strlen>
 80036a4:	4603      	mov	r3, r0
 80036a6:	461a      	mov	r2, r3
 80036a8:	4b29      	ldr	r3, [pc, #164]	; (8003750 <CPU_Handler+0x184>)
 80036aa:	4413      	add	r3, r2
 80036ac:	4a2e      	ldr	r2, [pc, #184]	; (8003768 <CPU_Handler+0x19c>)
 80036ae:	461d      	mov	r5, r3
 80036b0:	4614      	mov	r4, r2
 80036b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b4:	6028      	str	r0, [r5, #0]
 80036b6:	6069      	str	r1, [r5, #4]
 80036b8:	60aa      	str	r2, [r5, #8]
 80036ba:	60eb      	str	r3, [r5, #12]
 80036bc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80036be:	6128      	str	r0, [r5, #16]
 80036c0:	6169      	str	r1, [r5, #20]
 80036c2:	61aa      	str	r2, [r5, #24]
 80036c4:	7823      	ldrb	r3, [r4, #0]
 80036c6:	772b      	strb	r3, [r5, #28]
		BREAK_STATUS = 1;
 80036c8:	4b23      	ldr	r3, [pc, #140]	; (8003758 <CPU_Handler+0x18c>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
		count_cpu_orders++;
 80036ce:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <CPU_Handler+0x17c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3301      	adds	r3, #1
 80036d4:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <CPU_Handler+0x17c>)
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	e02d      	b.n	8003736 <CPU_Handler+0x16a>
	}
	else if (!HAL_GPIO_ReadPin(IN_CPU_6_GPIO_Port, IN_CPU_6_Pin) && BREAK_STATUS){
 80036da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036de:	4821      	ldr	r0, [pc, #132]	; (8003764 <CPU_Handler+0x198>)
 80036e0:	f003 f81a 	bl	8006718 <HAL_GPIO_ReadPin>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d125      	bne.n	8003736 <CPU_Handler+0x16a>
 80036ea:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <CPU_Handler+0x18c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d021      	beq.n	8003736 <CPU_Handler+0x16a>
		show_now();
 80036f2:	f000 fde7 	bl	80042c4 <show_now>
		strcat(BUFFER_SERIAL, "\r\nFREIO DESATIVADO PELA CPU.\r\n");
 80036f6:	4816      	ldr	r0, [pc, #88]	; (8003750 <CPU_Handler+0x184>)
 80036f8:	f7fc fd74 	bl	80001e4 <strlen>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	4b13      	ldr	r3, [pc, #76]	; (8003750 <CPU_Handler+0x184>)
 8003702:	4413      	add	r3, r2
 8003704:	4a19      	ldr	r2, [pc, #100]	; (800376c <CPU_Handler+0x1a0>)
 8003706:	461d      	mov	r5, r3
 8003708:	4614      	mov	r4, r2
 800370a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800370c:	6028      	str	r0, [r5, #0]
 800370e:	6069      	str	r1, [r5, #4]
 8003710:	60aa      	str	r2, [r5, #8]
 8003712:	60eb      	str	r3, [r5, #12]
 8003714:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003716:	6128      	str	r0, [r5, #16]
 8003718:	6169      	str	r1, [r5, #20]
 800371a:	61aa      	str	r2, [r5, #24]
 800371c:	8823      	ldrh	r3, [r4, #0]
 800371e:	78a2      	ldrb	r2, [r4, #2]
 8003720:	83ab      	strh	r3, [r5, #28]
 8003722:	4613      	mov	r3, r2
 8003724:	77ab      	strb	r3, [r5, #30]
		BREAK_STATUS = 0;
 8003726:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <CPU_Handler+0x18c>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
		count_cpu_orders++;
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <CPU_Handler+0x17c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3301      	adds	r3, #1
 8003732:	4a05      	ldr	r2, [pc, #20]	; (8003748 <CPU_Handler+0x17c>)
 8003734:	6013      	str	r3, [r2, #0]
	}

	/* Ativar multiplos feedbacks para radio */
	feedback_multiple = 1;
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <CPU_Handler+0x190>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]

	Acionamento();
 800373c:	f7ff fcfe 	bl	800313c <Acionamento>

}
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003746:	bf00      	nop
 8003748:	200002c0 	.word	0x200002c0
 800374c:	200002c4 	.word	0x200002c4
 8003750:	200007b0 	.word	0x200007b0
 8003754:	0800fa50 	.word	0x0800fa50
 8003758:	20000264 	.word	0x20000264
 800375c:	200002a8 	.word	0x200002a8
 8003760:	200002c8 	.word	0x200002c8
 8003764:	48000800 	.word	0x48000800
 8003768:	0800fa7c 	.word	0x0800fa7c
 800376c:	0800fa9c 	.word	0x0800fa9c

08003770 <ESP_Handler>:
  *
  * @param  none
  *
  * @retval void
  */
void ESP_Handler(){
 8003770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003772:	af00      	add	r7, sp, #0

	static bool initialized = false;

	if (HAL_GPIO_ReadPin(IO_OUT_ESP_2_GPIO_Port, IO_OUT_ESP_2_Pin)){
 8003774:	2102      	movs	r1, #2
 8003776:	4824      	ldr	r0, [pc, #144]	; (8003808 <ESP_Handler+0x98>)
 8003778:	f002 ffce 	bl	8006718 <HAL_GPIO_ReadPin>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d01a      	beq.n	80037b8 <ESP_Handler+0x48>
		show_now();
 8003782:	f000 fd9f 	bl	80042c4 <show_now>
		strcat(BUFFER_SERIAL, "\r\nFREIO ACIONADO PELO ESP32.\r\n");
 8003786:	4821      	ldr	r0, [pc, #132]	; (800380c <ESP_Handler+0x9c>)
 8003788:	f7fc fd2c 	bl	80001e4 <strlen>
 800378c:	4603      	mov	r3, r0
 800378e:	461a      	mov	r2, r3
 8003790:	4b1e      	ldr	r3, [pc, #120]	; (800380c <ESP_Handler+0x9c>)
 8003792:	4413      	add	r3, r2
 8003794:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <ESP_Handler+0xa0>)
 8003796:	461d      	mov	r5, r3
 8003798:	4614      	mov	r4, r2
 800379a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800379c:	6028      	str	r0, [r5, #0]
 800379e:	6069      	str	r1, [r5, #4]
 80037a0:	60aa      	str	r2, [r5, #8]
 80037a2:	60eb      	str	r3, [r5, #12]
 80037a4:	cc07      	ldmia	r4!, {r0, r1, r2}
 80037a6:	6128      	str	r0, [r5, #16]
 80037a8:	6169      	str	r1, [r5, #20]
 80037aa:	61aa      	str	r2, [r5, #24]
 80037ac:	8823      	ldrh	r3, [r4, #0]
 80037ae:	78a2      	ldrb	r2, [r4, #2]
 80037b0:	83ab      	strh	r3, [r5, #28]
 80037b2:	4613      	mov	r3, r2
 80037b4:	77ab      	strb	r3, [r5, #30]
		else {
			show_now();
			strcat(BUFFER_SERIAL, "\r\nFREIO DESATIVADO PELO ESP32. \r\n");
		}
	}
}
 80037b6:	e025      	b.n	8003804 <ESP_Handler+0x94>
		if (!initialized){
 80037b8:	4b16      	ldr	r3, [pc, #88]	; (8003814 <ESP_Handler+0xa4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d103      	bne.n	80037c8 <ESP_Handler+0x58>
			initialized = true;
 80037c0:	4b14      	ldr	r3, [pc, #80]	; (8003814 <ESP_Handler+0xa4>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]
}
 80037c6:	e01d      	b.n	8003804 <ESP_Handler+0x94>
			show_now();
 80037c8:	f000 fd7c 	bl	80042c4 <show_now>
			strcat(BUFFER_SERIAL, "\r\nFREIO DESATIVADO PELO ESP32. \r\n");
 80037cc:	480f      	ldr	r0, [pc, #60]	; (800380c <ESP_Handler+0x9c>)
 80037ce:	f7fc fd09 	bl	80001e4 <strlen>
 80037d2:	4603      	mov	r3, r0
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b0d      	ldr	r3, [pc, #52]	; (800380c <ESP_Handler+0x9c>)
 80037d8:	4413      	add	r3, r2
 80037da:	4a0f      	ldr	r2, [pc, #60]	; (8003818 <ESP_Handler+0xa8>)
 80037dc:	4614      	mov	r4, r2
 80037de:	469c      	mov	ip, r3
 80037e0:	f104 0e20 	add.w	lr, r4, #32
 80037e4:	4665      	mov	r5, ip
 80037e6:	4626      	mov	r6, r4
 80037e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80037ea:	6028      	str	r0, [r5, #0]
 80037ec:	6069      	str	r1, [r5, #4]
 80037ee:	60aa      	str	r2, [r5, #8]
 80037f0:	60eb      	str	r3, [r5, #12]
 80037f2:	3410      	adds	r4, #16
 80037f4:	f10c 0c10 	add.w	ip, ip, #16
 80037f8:	4574      	cmp	r4, lr
 80037fa:	d1f3      	bne.n	80037e4 <ESP_Handler+0x74>
 80037fc:	4662      	mov	r2, ip
 80037fe:	4623      	mov	r3, r4
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	8013      	strh	r3, [r2, #0]
}
 8003804:	bf00      	nop
 8003806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003808:	48000400 	.word	0x48000400
 800380c:	200007b0 	.word	0x200007b0
 8003810:	0800fabc 	.word	0x0800fabc
 8003814:	200002cc 	.word	0x200002cc
 8003818:	0800fadc 	.word	0x0800fadc

0800381c <HAL_GPIO_EXTI_Callback>:
  *
  * @param  GPIO_Pin: Pino em que houve interrupcao.
  *
  * @retval void
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	80fb      	strh	r3, [r7, #6]

	/* STATUS - Verificar apenas borda de subida */
	if (GPIO_Pin == IN_PWM_ESP_Pin){
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	2b08      	cmp	r3, #8
 800382a:	d103      	bne.n	8003834 <HAL_GPIO_EXTI_Callback+0x18>
		FLAG_SOMA_ESP = 0;
 800382c:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <HAL_GPIO_EXTI_Callback+0x98>)
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
			PreencherBuffer(FRAME_BATTERY_RETURN);
		}

		HAL_UART_Transmit_IT(&huart3, BUFFER_TRANSMIT, strlen(BUFFER_TRANSMIT));
	}
}
 8003832:	e03b      	b.n	80038ac <HAL_GPIO_EXTI_Callback+0x90>
	else if (GPIO_Pin == IN_PWM_UPA_Pin){
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	2b80      	cmp	r3, #128	; 0x80
 8003838:	d103      	bne.n	8003842 <HAL_GPIO_EXTI_Callback+0x26>
		FLAG_SOMA_UPA = 0;
 800383a:	4b1f      	ldr	r3, [pc, #124]	; (80038b8 <HAL_GPIO_EXTI_Callback+0x9c>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
}
 8003840:	e034      	b.n	80038ac <HAL_GPIO_EXTI_Callback+0x90>
	else if (GPIO_Pin == IN_PWM_CPU_Pin){
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d103      	bne.n	8003850 <HAL_GPIO_EXTI_Callback+0x34>
		FLAG_SOMA_CPU = 0;
 8003848:	4b1c      	ldr	r3, [pc, #112]	; (80038bc <HAL_GPIO_EXTI_Callback+0xa0>)
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
}
 800384e:	e02d      	b.n	80038ac <HAL_GPIO_EXTI_Callback+0x90>
	else if (GPIO_Pin == IN_CPU_6_Pin){
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003856:	d102      	bne.n	800385e <HAL_GPIO_EXTI_Callback+0x42>
		CPU_Handler();
 8003858:	f7ff feb8 	bl	80035cc <CPU_Handler>
}
 800385c:	e026      	b.n	80038ac <HAL_GPIO_EXTI_Callback+0x90>
	else if (GPIO_Pin == IO_OUT_ESP_2_Pin){
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d102      	bne.n	800386a <HAL_GPIO_EXTI_Callback+0x4e>
		ESP_Handler();
 8003864:	f7ff ff84 	bl	8003770 <ESP_Handler>
}
 8003868:	e020      	b.n	80038ac <HAL_GPIO_EXTI_Callback+0x90>
	else if (GPIO_Pin == CHECK_FONTE_Pin){
 800386a:	88fb      	ldrh	r3, [r7, #6]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d11d      	bne.n	80038ac <HAL_GPIO_EXTI_Callback+0x90>
		if (HAL_GPIO_ReadPin(CHECK_FONTE_GPIO_Port, CHECK_FONTE_Pin)){
 8003870:	2101      	movs	r1, #1
 8003872:	4813      	ldr	r0, [pc, #76]	; (80038c0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8003874:	f002 ff50 	bl	8006718 <HAL_GPIO_ReadPin>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_GPIO_EXTI_Callback+0x68>
			PreencherBuffer(FRAME_BATTERY_FAIL);
 800387e:	2003      	movs	r0, #3
 8003880:	f001 f944 	bl	8004b0c <PreencherBuffer>
		if (!HAL_GPIO_ReadPin(CHECK_FONTE_GPIO_Port, CHECK_FONTE_Pin)){
 8003884:	2101      	movs	r1, #1
 8003886:	480e      	ldr	r0, [pc, #56]	; (80038c0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8003888:	f002 ff46 	bl	8006718 <HAL_GPIO_ReadPin>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <HAL_GPIO_EXTI_Callback+0x7c>
			PreencherBuffer(FRAME_BATTERY_RETURN);
 8003892:	2004      	movs	r0, #4
 8003894:	f001 f93a 	bl	8004b0c <PreencherBuffer>
		HAL_UART_Transmit_IT(&huart3, BUFFER_TRANSMIT, strlen(BUFFER_TRANSMIT));
 8003898:	480a      	ldr	r0, [pc, #40]	; (80038c4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800389a:	f7fc fca3 	bl	80001e4 <strlen>
 800389e:	4603      	mov	r3, r0
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	4907      	ldr	r1, [pc, #28]	; (80038c4 <HAL_GPIO_EXTI_Callback+0xa8>)
 80038a6:	4808      	ldr	r0, [pc, #32]	; (80038c8 <HAL_GPIO_EXTI_Callback+0xac>)
 80038a8:	f005 fcfc 	bl	80092a4 <HAL_UART_Transmit_IT>
}
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20000274 	.word	0x20000274
 80038b8:	20000270 	.word	0x20000270
 80038bc:	20000278 	.word	0x20000278
 80038c0:	48001c00 	.word	0x48001c00
 80038c4:	20000adc 	.word	0x20000adc
 80038c8:	20000434 	.word	0x20000434

080038cc <Multiple_Feedback>:
  *
  * @param  none
  *
  * @retval void
  */
void Multiple_Feedback(){
 80038cc:	b5b0      	push	{r4, r5, r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0

	int num_of_tries = NUMBER_OF_FEEDBACKS;
 80038d2:	4b23      	ldr	r3, [pc, #140]	; (8003960 <Multiple_Feedback+0x94>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	617b      	str	r3, [r7, #20]
	static int counter = 0;
	char num_of_tries_STR[16];

	if (counter < num_of_tries){
 80038d8:	4b22      	ldr	r3, [pc, #136]	; (8003964 <Multiple_Feedback+0x98>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	429a      	cmp	r2, r3
 80038e0:	dd33      	ble.n	800394a <Multiple_Feedback+0x7e>
		strcat(BUFFER_SERIAL, "\r\nTentativa de feedback: ");
 80038e2:	4821      	ldr	r0, [pc, #132]	; (8003968 <Multiple_Feedback+0x9c>)
 80038e4:	f7fc fc7e 	bl	80001e4 <strlen>
 80038e8:	4603      	mov	r3, r0
 80038ea:	461a      	mov	r2, r3
 80038ec:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <Multiple_Feedback+0x9c>)
 80038ee:	4413      	add	r3, r2
 80038f0:	4a1e      	ldr	r2, [pc, #120]	; (800396c <Multiple_Feedback+0xa0>)
 80038f2:	461d      	mov	r5, r3
 80038f4:	4614      	mov	r4, r2
 80038f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f8:	6028      	str	r0, [r5, #0]
 80038fa:	6069      	str	r1, [r5, #4]
 80038fc:	60aa      	str	r2, [r5, #8]
 80038fe:	60eb      	str	r3, [r5, #12]
 8003900:	cc03      	ldmia	r4!, {r0, r1}
 8003902:	6128      	str	r0, [r5, #16]
 8003904:	6169      	str	r1, [r5, #20]
 8003906:	8823      	ldrh	r3, [r4, #0]
 8003908:	832b      	strh	r3, [r5, #24]
		IntParaString(counter + 1, num_of_tries_STR, 10);
 800390a:	4b16      	ldr	r3, [pc, #88]	; (8003964 <Multiple_Feedback+0x98>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3301      	adds	r3, #1
 8003910:	4618      	mov	r0, r3
 8003912:	1d3b      	adds	r3, r7, #4
 8003914:	220a      	movs	r2, #10
 8003916:	4619      	mov	r1, r3
 8003918:	f001 fdac 	bl	8005474 <IntParaString>
		strcat(BUFFER_SERIAL, num_of_tries_STR);
 800391c:	1d3b      	adds	r3, r7, #4
 800391e:	4619      	mov	r1, r3
 8003920:	4811      	ldr	r0, [pc, #68]	; (8003968 <Multiple_Feedback+0x9c>)
 8003922:	f007 f9c1 	bl	800aca8 <strcat>
		strcat(BUFFER_SERIAL, "\n\r");
 8003926:	4810      	ldr	r0, [pc, #64]	; (8003968 <Multiple_Feedback+0x9c>)
 8003928:	f7fc fc5c 	bl	80001e4 <strlen>
 800392c:	4603      	mov	r3, r0
 800392e:	461a      	mov	r2, r3
 8003930:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <Multiple_Feedback+0x9c>)
 8003932:	4413      	add	r3, r2
 8003934:	4a0e      	ldr	r2, [pc, #56]	; (8003970 <Multiple_Feedback+0xa4>)
 8003936:	8811      	ldrh	r1, [r2, #0]
 8003938:	7892      	ldrb	r2, [r2, #2]
 800393a:	8019      	strh	r1, [r3, #0]
 800393c:	709a      	strb	r2, [r3, #2]
		counter++;
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <Multiple_Feedback+0x98>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3301      	adds	r3, #1
 8003944:	4a07      	ldr	r2, [pc, #28]	; (8003964 <Multiple_Feedback+0x98>)
 8003946:	6013      	str	r3, [r2, #0]
	}
	else {
		feedback_multiple = 0;
		counter = 0;
	}
}
 8003948:	e005      	b.n	8003956 <Multiple_Feedback+0x8a>
		feedback_multiple = 0;
 800394a:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <Multiple_Feedback+0xa8>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
		counter = 0;
 8003950:	4b04      	ldr	r3, [pc, #16]	; (8003964 <Multiple_Feedback+0x98>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
}
 8003956:	bf00      	nop
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bdb0      	pop	{r4, r5, r7, pc}
 800395e:	bf00      	nop
 8003960:	20000030 	.word	0x20000030
 8003964:	200002d0 	.word	0x200002d0
 8003968:	200007b0 	.word	0x200007b0
 800396c:	0800fb00 	.word	0x0800fb00
 8003970:	0800fb1c 	.word	0x0800fb1c
 8003974:	200002a8 	.word	0x200002a8

08003978 <PWM_DEFINITION>:
  *
  * @param  none
  *
  * @retval void
  */
void PWM_DEFINITION() {
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0

  DUTYCYCLE_FE = (float)DUTYFE*(DUTY_CYCLE_FE - DUTY_CYCLE_FE_MIN);
 800397c:	4b5f      	ldr	r3, [pc, #380]	; (8003afc <PWM_DEFINITION+0x184>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800398a:	4b5d      	ldr	r3, [pc, #372]	; (8003b00 <PWM_DEFINITION+0x188>)
 800398c:	edd3 6a00 	vldr	s13, [r3]
 8003990:	4b5c      	ldr	r3, [pc, #368]	; (8003b04 <PWM_DEFINITION+0x18c>)
 8003992:	edd3 7a00 	vldr	s15, [r3]
 8003996:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800399a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399e:	4b5a      	ldr	r3, [pc, #360]	; (8003b08 <PWM_DEFINITION+0x190>)
 80039a0:	edc3 7a00 	vstr	s15, [r3]
  DUTYCYCLE_FE += DUTY_CYCLE_FE_MIN*100;
 80039a4:	4b57      	ldr	r3, [pc, #348]	; (8003b04 <PWM_DEFINITION+0x18c>)
 80039a6:	edd3 7a00 	vldr	s15, [r3]
 80039aa:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003b0c <PWM_DEFINITION+0x194>
 80039ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039b2:	4b55      	ldr	r3, [pc, #340]	; (8003b08 <PWM_DEFINITION+0x190>)
 80039b4:	edd3 7a00 	vldr	s15, [r3]
 80039b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039bc:	4b52      	ldr	r3, [pc, #328]	; (8003b08 <PWM_DEFINITION+0x190>)
 80039be:	edc3 7a00 	vstr	s15, [r3]
  DUTYCYCLE_FE = DUTYCYCLE_FE/100;
 80039c2:	4b51      	ldr	r3, [pc, #324]	; (8003b08 <PWM_DEFINITION+0x190>)
 80039c4:	ed93 7a00 	vldr	s14, [r3]
 80039c8:	eddf 6a50 	vldr	s13, [pc, #320]	; 8003b0c <PWM_DEFINITION+0x194>
 80039cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039d0:	4b4d      	ldr	r3, [pc, #308]	; (8003b08 <PWM_DEFINITION+0x190>)
 80039d2:	edc3 7a00 	vstr	s15, [r3]

  DUTYCYCLE_AC = (float)DUTYACEL*(DUTY_CYCLE_AC_MAX - DUTY_CYCLE_AC);
 80039d6:	4b4e      	ldr	r3, [pc, #312]	; (8003b10 <PWM_DEFINITION+0x198>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	ee07 3a90 	vmov	s15, r3
 80039e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039e4:	4b4b      	ldr	r3, [pc, #300]	; (8003b14 <PWM_DEFINITION+0x19c>)
 80039e6:	edd3 6a00 	vldr	s13, [r3]
 80039ea:	4b4b      	ldr	r3, [pc, #300]	; (8003b18 <PWM_DEFINITION+0x1a0>)
 80039ec:	edd3 7a00 	vldr	s15, [r3]
 80039f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80039f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f8:	4b48      	ldr	r3, [pc, #288]	; (8003b1c <PWM_DEFINITION+0x1a4>)
 80039fa:	edc3 7a00 	vstr	s15, [r3]
  DUTYCYCLE_AC += DUTY_CYCLE_AC*100;
 80039fe:	4b46      	ldr	r3, [pc, #280]	; (8003b18 <PWM_DEFINITION+0x1a0>)
 8003a00:	edd3 7a00 	vldr	s15, [r3]
 8003a04:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003b0c <PWM_DEFINITION+0x194>
 8003a08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a0c:	4b43      	ldr	r3, [pc, #268]	; (8003b1c <PWM_DEFINITION+0x1a4>)
 8003a0e:	edd3 7a00 	vldr	s15, [r3]
 8003a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a16:	4b41      	ldr	r3, [pc, #260]	; (8003b1c <PWM_DEFINITION+0x1a4>)
 8003a18:	edc3 7a00 	vstr	s15, [r3]
  DUTYCYCLE_AC = DUTYCYCLE_AC/100;
 8003a1c:	4b3f      	ldr	r3, [pc, #252]	; (8003b1c <PWM_DEFINITION+0x1a4>)
 8003a1e:	ed93 7a00 	vldr	s14, [r3]
 8003a22:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8003b0c <PWM_DEFINITION+0x194>
 8003a26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a2a:	4b3c      	ldr	r3, [pc, #240]	; (8003b1c <PWM_DEFINITION+0x1a4>)
 8003a2c:	edc3 7a00 	vstr	s15, [r3]

  DUTYCYCLE_FR = (float)DUTYFR*(DUTY_CYCLE_FR - DUTY_CYCLE_FR_MIN);
 8003a30:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <PWM_DEFINITION+0x1a8>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a3e:	4b39      	ldr	r3, [pc, #228]	; (8003b24 <PWM_DEFINITION+0x1ac>)
 8003a40:	edd3 6a00 	vldr	s13, [r3]
 8003a44:	4b38      	ldr	r3, [pc, #224]	; (8003b28 <PWM_DEFINITION+0x1b0>)
 8003a46:	edd3 7a00 	vldr	s15, [r3]
 8003a4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a52:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <PWM_DEFINITION+0x1b4>)
 8003a54:	edc3 7a00 	vstr	s15, [r3]
  DUTYCYCLE_FR += DUTY_CYCLE_FR_MIN*100;
 8003a58:	4b33      	ldr	r3, [pc, #204]	; (8003b28 <PWM_DEFINITION+0x1b0>)
 8003a5a:	edd3 7a00 	vldr	s15, [r3]
 8003a5e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003b0c <PWM_DEFINITION+0x194>
 8003a62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a66:	4b31      	ldr	r3, [pc, #196]	; (8003b2c <PWM_DEFINITION+0x1b4>)
 8003a68:	edd3 7a00 	vldr	s15, [r3]
 8003a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a70:	4b2e      	ldr	r3, [pc, #184]	; (8003b2c <PWM_DEFINITION+0x1b4>)
 8003a72:	edc3 7a00 	vstr	s15, [r3]
  DUTYCYCLE_FR = DUTYCYCLE_FR/100;
 8003a76:	4b2d      	ldr	r3, [pc, #180]	; (8003b2c <PWM_DEFINITION+0x1b4>)
 8003a78:	ed93 7a00 	vldr	s14, [r3]
 8003a7c:	eddf 6a23 	vldr	s13, [pc, #140]	; 8003b0c <PWM_DEFINITION+0x194>
 8003a80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a84:	4b29      	ldr	r3, [pc, #164]	; (8003b2c <PWM_DEFINITION+0x1b4>)
 8003a86:	edc3 7a00 	vstr	s15, [r3]

    /* FREIO DE EMERGENCIA */
  PWM_FE = (int) (DUTYCYCLE_FE*(200-1)/100);
 8003a8a:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <PWM_DEFINITION+0x190>)
 8003a8c:	edd3 7a00 	vldr	s15, [r3]
 8003a90:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003b30 <PWM_DEFINITION+0x1b8>
 8003a94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a98:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8003b0c <PWM_DEFINITION+0x194>
 8003a9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003aa4:	ee17 2a90 	vmov	r2, s15
 8003aa8:	4b22      	ldr	r3, [pc, #136]	; (8003b34 <PWM_DEFINITION+0x1bc>)
 8003aaa:	601a      	str	r2, [r3, #0]

  /* ACELERADOR */
  PWM_AC = (int)(DUTYCYCLE_AC*(200-1)/100);
 8003aac:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <PWM_DEFINITION+0x1a4>)
 8003aae:	edd3 7a00 	vldr	s15, [r3]
 8003ab2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003b30 <PWM_DEFINITION+0x1b8>
 8003ab6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003aba:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003b0c <PWM_DEFINITION+0x194>
 8003abe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ac6:	ee17 2a90 	vmov	r2, s15
 8003aca:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <PWM_DEFINITION+0x1c0>)
 8003acc:	601a      	str	r2, [r3, #0]

  /* FREIO DE RETARDO */
  PWM_FR = (int) (DUTYCYCLE_FR*(200-1)/100);
 8003ace:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <PWM_DEFINITION+0x1b4>)
 8003ad0:	edd3 7a00 	vldr	s15, [r3]
 8003ad4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003b30 <PWM_DEFINITION+0x1b8>
 8003ad8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003adc:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003b0c <PWM_DEFINITION+0x194>
 8003ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ae8:	ee17 2a90 	vmov	r2, s15
 8003aec:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <PWM_DEFINITION+0x1c4>)
 8003aee:	601a      	str	r2, [r3, #0]

}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20000024 	.word	0x20000024
 8003b00:	2000000c 	.word	0x2000000c
 8003b04:	20000010 	.word	0x20000010
 8003b08:	200006cc 	.word	0x200006cc
 8003b0c:	42c80000 	.word	0x42c80000
 8003b10:	20000261 	.word	0x20000261
 8003b14:	20000018 	.word	0x20000018
 8003b18:	20000014 	.word	0x20000014
 8003b1c:	200004b8 	.word	0x200004b8
 8003b20:	20000262 	.word	0x20000262
 8003b24:	2000001c 	.word	0x2000001c
 8003b28:	20000020 	.word	0x20000020
 8003b2c:	20000430 	.word	0x20000430
 8003b30:	43470000 	.word	0x43470000
 8003b34:	200004dc 	.word	0x200004dc
 8003b38:	20000c28 	.word	0x20000c28
 8003b3c:	20000538 	.word	0x20000538

08003b40 <TOGGLE_PWM_STATUS>:
  *
  * @param  none
  *
  * @retval void
  */
void TOGGLE_PWM_STATUS(){
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0

	CONT_LOOP++;
 8003b44:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <TOGGLE_PWM_STATUS+0x64>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	4a16      	ldr	r2, [pc, #88]	; (8003ba4 <TOGGLE_PWM_STATUS+0x64>)
 8003b4c:	6013      	str	r3, [r2, #0]
	if (CONT_LOOP > MAX_LOOP){
 8003b4e:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <TOGGLE_PWM_STATUS+0x64>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	dd23      	ble.n	8003b9e <TOGGLE_PWM_STATUS+0x5e>
		Toggle_Pins = !Toggle_Pins;
 8003b56:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <TOGGLE_PWM_STATUS+0x68>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bf0c      	ite	eq
 8003b5e:	2301      	moveq	r3, #1
 8003b60:	2300      	movne	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <TOGGLE_PWM_STATUS+0x68>)
 8003b68:	601a      	str	r2, [r3, #0]
		TOGGLE_STATUS_PINS(Toggle_Pins);
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <TOGGLE_PWM_STATUS+0x68>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fba2 	bl	80032b8 <TOGGLE_STATUS_PINS>

		/* Apagar LEDs de indicacao de transmissao */
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, LOW);
 8003b74:	2200      	movs	r2, #0
 8003b76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b7a:	480c      	ldr	r0, [pc, #48]	; (8003bac <TOGGLE_PWM_STATUS+0x6c>)
 8003b7c:	f002 fde4 	bl	8006748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, LOW);
 8003b80:	2200      	movs	r2, #0
 8003b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b86:	4809      	ldr	r0, [pc, #36]	; (8003bac <TOGGLE_PWM_STATUS+0x6c>)
 8003b88:	f002 fdde 	bl	8006748 <HAL_GPIO_WritePin>

		CONT_LOOP = 0;
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <TOGGLE_PWM_STATUS+0x64>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
		if (feedback_multiple){
 8003b92:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <TOGGLE_PWM_STATUS+0x70>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <TOGGLE_PWM_STATUS+0x5e>
			Multiple_Feedback();
 8003b9a:	f7ff fe97 	bl	80038cc <Multiple_Feedback>
		}
	}
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000268 	.word	0x20000268
 8003ba8:	2000026c 	.word	0x2000026c
 8003bac:	48000400 	.word	0x48000400
 8003bb0:	200002a8 	.word	0x200002a8

08003bb4 <inicializar_parametros>:
  *
  * @param  none
  *
  * @retval void
  */
void inicializar_parametros(){
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b0a4      	sub	sp, #144	; 0x90
 8003bb8:	af00      	add	r7, sp, #0
	uint8_t DUTYFE_INT_READ;
	uint8_t DUTYACEL_INT_READ;
	uint8_t DUTYFR_INT_READ;
	uint8_t NUMBER_FEEDBACKS_INT_READ;

	FLASH_le_string_0xFF(END_STG, BUFFER_FLASH_L);
 8003bba:	49d9      	ldr	r1, [pc, #868]	; (8003f20 <inicializar_parametros+0x36c>)
 8003bbc:	48d9      	ldr	r0, [pc, #868]	; (8003f24 <inicializar_parametros+0x370>)
 8003bbe:	f7fd fa7b 	bl	80010b8 <FLASH_le_string_0xFF>

	if (strlen(BUFFER_FLASH_L)){
 8003bc2:	4bd7      	ldr	r3, [pc, #860]	; (8003f20 <inicializar_parametros+0x36c>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 8264 	beq.w	8004094 <inicializar_parametros+0x4e0>

		/* Se ha dados na memoria flash */

		escreve_USB("\n\r\n\rDados armazenados na Flash:\n\r");
 8003bcc:	48d6      	ldr	r0, [pc, #856]	; (8003f28 <inicializar_parametros+0x374>)
 8003bce:	f001 fe2f 	bl	8005830 <escreve_USB>
		escreve_USB(BUFFER_FLASH_L);
 8003bd2:	48d3      	ldr	r0, [pc, #844]	; (8003f20 <inicializar_parametros+0x36c>)
 8003bd4:	f001 fe2c 	bl	8005830 <escreve_USB>

		/* Capturar dados */
		token1 = strtok(BUFFER_FLASH_L, ","); strcpy(ID_READ, token1);
 8003bd8:	49d4      	ldr	r1, [pc, #848]	; (8003f2c <inicializar_parametros+0x378>)
 8003bda:	48d1      	ldr	r0, [pc, #836]	; (8003f20 <inicializar_parametros+0x36c>)
 8003bdc:	f007 febe 	bl	800b95c <strtok>
 8003be0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8003be4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003be8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003bec:	4618      	mov	r0, r3
 8003bee:	f007 f86a 	bl	800acc6 <strcpy>
		token1 = strtok(NULL, ","); strcpy(TIMEOUT_PING_CHAR_READ, token1);
 8003bf2:	49ce      	ldr	r1, [pc, #824]	; (8003f2c <inicializar_parametros+0x378>)
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	f007 feb1 	bl	800b95c <strtok>
 8003bfa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8003bfe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c02:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003c06:	4618      	mov	r0, r3
 8003c08:	f007 f85d 	bl	800acc6 <strcpy>
		token1 = strtok(NULL, ","); strcpy(DUTY_CYCLE_FE_CHAR_READ, token1);
 8003c0c:	49c7      	ldr	r1, [pc, #796]	; (8003f2c <inicializar_parametros+0x378>)
 8003c0e:	2000      	movs	r0, #0
 8003c10:	f007 fea4 	bl	800b95c <strtok>
 8003c14:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8003c18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c1c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003c20:	4618      	mov	r0, r3
 8003c22:	f007 f850 	bl	800acc6 <strcpy>
		token1 = strtok(NULL, ","); strcpy(DUTY_CYCLE_FE_MIN_CHAR_READ, token1);
 8003c26:	49c1      	ldr	r1, [pc, #772]	; (8003f2c <inicializar_parametros+0x378>)
 8003c28:	2000      	movs	r0, #0
 8003c2a:	f007 fe97 	bl	800b95c <strtok>
 8003c2e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8003c32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c36:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f007 f843 	bl	800acc6 <strcpy>
		token1 = strtok(NULL, ","); strcpy(DUTY_CYCLE_FR_CHAR_READ, token1);
 8003c40:	49ba      	ldr	r1, [pc, #744]	; (8003f2c <inicializar_parametros+0x378>)
 8003c42:	2000      	movs	r0, #0
 8003c44:	f007 fe8a 	bl	800b95c <strtok>
 8003c48:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8003c4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c50:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003c54:	4618      	mov	r0, r3
 8003c56:	f007 f836 	bl	800acc6 <strcpy>
		token1 = strtok(NULL, ","); strcpy(DUTY_CYCLE_FR_MIN_CHAR_READ, token1);
 8003c5a:	49b4      	ldr	r1, [pc, #720]	; (8003f2c <inicializar_parametros+0x378>)
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	f007 fe7d 	bl	800b95c <strtok>
 8003c62:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8003c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c6a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f007 f829 	bl	800acc6 <strcpy>
		token1 = strtok(NULL, ","); strcpy(DUTY_CYCLE_AC_CHAR_READ, token1);
 8003c74:	49ad      	ldr	r1, [pc, #692]	; (8003f2c <inicializar_parametros+0x378>)
 8003c76:	2000      	movs	r0, #0
 8003c78:	f007 fe70 	bl	800b95c <strtok>
 8003c7c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8003c80:	f107 031c 	add.w	r3, r7, #28
 8003c84:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f007 f81c 	bl	800acc6 <strcpy>
		token1 = strtok(NULL, ","); strcpy(DUTY_CYCLE_AC_MAX_CHAR_READ, token1);
 8003c8e:	49a7      	ldr	r1, [pc, #668]	; (8003f2c <inicializar_parametros+0x378>)
 8003c90:	2000      	movs	r0, #0
 8003c92:	f007 fe63 	bl	800b95c <strtok>
 8003c96:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8003c9a:	f107 0314 	add.w	r3, r7, #20
 8003c9e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f007 f80f 	bl	800acc6 <strcpy>
		token1 = strtok(NULL, ","); strcpy(DUTYFE_CHAR_READ, token1);
 8003ca8:	49a0      	ldr	r1, [pc, #640]	; (8003f2c <inicializar_parametros+0x378>)
 8003caa:	2000      	movs	r0, #0
 8003cac:	f007 fe56 	bl	800b95c <strtok>
 8003cb0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8003cb4:	f107 0310 	add.w	r3, r7, #16
 8003cb8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f007 f802 	bl	800acc6 <strcpy>
		token1 = strtok(NULL, ","); strcpy(DUTYACEL_CHAR_READ, token1);
 8003cc2:	499a      	ldr	r1, [pc, #616]	; (8003f2c <inicializar_parametros+0x378>)
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f007 fe49 	bl	800b95c <strtok>
 8003cca:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8003cce:	f107 030c 	add.w	r3, r7, #12
 8003cd2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f006 fff5 	bl	800acc6 <strcpy>
		token1 = strtok(NULL, ","); strcpy(DUTYFR_CHAR_READ, token1);
 8003cdc:	4993      	ldr	r1, [pc, #588]	; (8003f2c <inicializar_parametros+0x378>)
 8003cde:	2000      	movs	r0, #0
 8003ce0:	f007 fe3c 	bl	800b95c <strtok>
 8003ce4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8003ce8:	f107 0308 	add.w	r3, r7, #8
 8003cec:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f006 ffe8 	bl	800acc6 <strcpy>
		token1 = strtok(NULL, ","); strcpy(NUMBER_FEEDBACKS_CHAR_READ, token1);
 8003cf6:	498d      	ldr	r1, [pc, #564]	; (8003f2c <inicializar_parametros+0x378>)
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	f007 fe2f 	bl	800b95c <strtok>
 8003cfe:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8003d02:	1d3b      	adds	r3, r7, #4
 8003d04:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f006 ffdc 	bl	800acc6 <strcpy>

		TIMEOUT_PING_INT_READ = atoi(TIMEOUT_PING_CHAR_READ);
 8003d0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003d12:	4618      	mov	r0, r3
 8003d14:	f006 ff4a 	bl	800abac <atoi>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		DUTY_CYCLE_FE_INT_READ = atof(DUTY_CYCLE_FE_CHAR_READ);
 8003d1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d22:	4618      	mov	r0, r3
 8003d24:	f006 ff3f 	bl	800aba6 <atof>
 8003d28:	ec53 2b10 	vmov	r2, r3, d0
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	4619      	mov	r1, r3
 8003d30:	f7fc ff42 	bl	8000bb8 <__aeabi_d2f>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		DUTY_CYCLE_FE_MIN_INT_READ = atof(DUTY_CYCLE_FE_MIN_CHAR_READ);
 8003d3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f006 ff31 	bl	800aba6 <atof>
 8003d44:	ec53 2b10 	vmov	r2, r3, d0
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f7fc ff34 	bl	8000bb8 <__aeabi_d2f>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		DUTY_CYCLE_FR_INT_READ = atof(DUTY_CYCLE_FR_CHAR_READ);
 8003d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f006 ff23 	bl	800aba6 <atof>
 8003d60:	ec53 2b10 	vmov	r2, r3, d0
 8003d64:	4610      	mov	r0, r2
 8003d66:	4619      	mov	r1, r3
 8003d68:	f7fc ff26 	bl	8000bb8 <__aeabi_d2f>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	67fb      	str	r3, [r7, #124]	; 0x7c
		DUTY_CYCLE_FR_MIN_INT_READ = atof(DUTY_CYCLE_FR_MIN_CHAR_READ);
 8003d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d74:	4618      	mov	r0, r3
 8003d76:	f006 ff16 	bl	800aba6 <atof>
 8003d7a:	ec53 2b10 	vmov	r2, r3, d0
 8003d7e:	4610      	mov	r0, r2
 8003d80:	4619      	mov	r1, r3
 8003d82:	f7fc ff19 	bl	8000bb8 <__aeabi_d2f>
 8003d86:	4603      	mov	r3, r0
 8003d88:	67bb      	str	r3, [r7, #120]	; 0x78
		DUTY_CYCLE_AC_INT_READ = atof(DUTY_CYCLE_AC_CHAR_READ);
 8003d8a:	f107 031c 	add.w	r3, r7, #28
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f006 ff09 	bl	800aba6 <atof>
 8003d94:	ec53 2b10 	vmov	r2, r3, d0
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	f7fc ff0c 	bl	8000bb8 <__aeabi_d2f>
 8003da0:	4603      	mov	r3, r0
 8003da2:	677b      	str	r3, [r7, #116]	; 0x74
		DUTY_CYCLE_AC_MAX_INT_READ = atof(DUTY_CYCLE_AC_MAX_CHAR_READ);
 8003da4:	f107 0314 	add.w	r3, r7, #20
 8003da8:	4618      	mov	r0, r3
 8003daa:	f006 fefc 	bl	800aba6 <atof>
 8003dae:	ec53 2b10 	vmov	r2, r3, d0
 8003db2:	4610      	mov	r0, r2
 8003db4:	4619      	mov	r1, r3
 8003db6:	f7fc feff 	bl	8000bb8 <__aeabi_d2f>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	673b      	str	r3, [r7, #112]	; 0x70
		DUTYFE_INT_READ = atoi(DUTYFE_CHAR_READ);
 8003dbe:	f107 0310 	add.w	r3, r7, #16
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f006 fef2 	bl	800abac <atoi>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		DUTYACEL_INT_READ = atoi(DUTYACEL_CHAR_READ);
 8003dce:	f107 030c 	add.w	r3, r7, #12
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f006 feea 	bl	800abac <atoi>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		DUTYFR_INT_READ = atoi(DUTYFR_CHAR_READ);
 8003dde:	f107 0308 	add.w	r3, r7, #8
 8003de2:	4618      	mov	r0, r3
 8003de4:	f006 fee2 	bl	800abac <atoi>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		NUMBER_FEEDBACKS_INT_READ = atoi(NUMBER_FEEDBACKS_CHAR_READ);
 8003dee:	1d3b      	adds	r3, r7, #4
 8003df0:	4618      	mov	r0, r3
 8003df2:	f006 fedb 	bl	800abac <atoi>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

		/* Verificar se dados nao estao corrompidos */
		if(strlen(ID_READ) < 20 && strlen(ID_READ) > 0){ memset(ID,0,strlen(ID)); strcat(ID, ID_READ); }
 8003dfc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fc f9ef 	bl	80001e4 <strlen>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b13      	cmp	r3, #19
 8003e0a:	d813      	bhi.n	8003e34 <inicializar_parametros+0x280>
 8003e0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00e      	beq.n	8003e34 <inicializar_parametros+0x280>
 8003e16:	4846      	ldr	r0, [pc, #280]	; (8003f30 <inicializar_parametros+0x37c>)
 8003e18:	f7fc f9e4 	bl	80001e4 <strlen>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2100      	movs	r1, #0
 8003e22:	4843      	ldr	r0, [pc, #268]	; (8003f30 <inicializar_parametros+0x37c>)
 8003e24:	f006 ff18 	bl	800ac58 <memset>
 8003e28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4840      	ldr	r0, [pc, #256]	; (8003f30 <inicializar_parametros+0x37c>)
 8003e30:	f006 ff3a 	bl	800aca8 <strcat>
		if(!((TIMEOUT_PING_INT_READ > 10000) || (TIMEOUT_PING_INT_READ < 1000))){ TIMEOUT_PING = TIMEOUT_PING_INT_READ;}
 8003e34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e38:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d808      	bhi.n	8003e52 <inicializar_parametros+0x29e>
 8003e40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e48:	d303      	bcc.n	8003e52 <inicializar_parametros+0x29e>
 8003e4a:	4a3a      	ldr	r2, [pc, #232]	; (8003f34 <inicializar_parametros+0x380>)
 8003e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e50:	6013      	str	r3, [r2, #0]
		if(!((DUTY_CYCLE_FE_INT_READ > 100) || (DUTY_CYCLE_FE_INT_READ < 60))){ DUTY_CYCLE_FE = DUTY_CYCLE_FE_INT_READ;}
 8003e52:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003e56:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003f38 <inicializar_parametros+0x384>
 8003e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e62:	bfcc      	ite	gt
 8003e64:	2301      	movgt	r3, #1
 8003e66:	2300      	movle	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f083 0301 	eor.w	r3, r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d014      	beq.n	8003e9e <inicializar_parametros+0x2ea>
 8003e74:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003e78:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003f3c <inicializar_parametros+0x388>
 8003e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e84:	bf4c      	ite	mi
 8003e86:	2301      	movmi	r3, #1
 8003e88:	2300      	movpl	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f083 0301 	eor.w	r3, r3, #1
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <inicializar_parametros+0x2ea>
 8003e96:	4a2a      	ldr	r2, [pc, #168]	; (8003f40 <inicializar_parametros+0x38c>)
 8003e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e9c:	6013      	str	r3, [r2, #0]
		if(!((DUTY_CYCLE_FE_MIN_INT_READ > 40) || (DUTY_CYCLE_FE_MIN_INT_READ <= 0))){ DUTY_CYCLE_FE_MIN = DUTY_CYCLE_FE_MIN_INT_READ;}
 8003e9e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003ea2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003f44 <inicializar_parametros+0x390>
 8003ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eae:	bfcc      	ite	gt
 8003eb0:	2301      	movgt	r3, #1
 8003eb2:	2300      	movle	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f083 0301 	eor.w	r3, r3, #1
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d012      	beq.n	8003ee6 <inicializar_parametros+0x332>
 8003ec0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003ec4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ecc:	bf94      	ite	ls
 8003ece:	2301      	movls	r3, #1
 8003ed0:	2300      	movhi	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f083 0301 	eor.w	r3, r3, #1
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <inicializar_parametros+0x332>
 8003ede:	4a1a      	ldr	r2, [pc, #104]	; (8003f48 <inicializar_parametros+0x394>)
 8003ee0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ee4:	6013      	str	r3, [r2, #0]
		if(!((DUTY_CYCLE_FR_INT_READ > 100) || (DUTY_CYCLE_FR_INT_READ < 50))){ DUTY_CYCLE_FR = DUTY_CYCLE_FR_INT_READ;}
 8003ee6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003eea:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003f38 <inicializar_parametros+0x384>
 8003eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef6:	bfcc      	ite	gt
 8003ef8:	2301      	movgt	r3, #1
 8003efa:	2300      	movle	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f083 0301 	eor.w	r3, r3, #1
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d02e      	beq.n	8003f66 <inicializar_parametros+0x3b2>
 8003f08:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003f0c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003f4c <inicializar_parametros+0x398>
 8003f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f18:	bf48      	it	mi
 8003f1a:	2301      	movmi	r3, #1
 8003f1c:	e018      	b.n	8003f50 <inicializar_parametros+0x39c>
 8003f1e:	bf00      	nop
 8003f20:	20000568 	.word	0x20000568
 8003f24:	08080000 	.word	0x08080000
 8003f28:	0800fb20 	.word	0x0800fb20
 8003f2c:	0800fb44 	.word	0x0800fb44
 8003f30:	20000000 	.word	0x20000000
 8003f34:	20000028 	.word	0x20000028
 8003f38:	42c80000 	.word	0x42c80000
 8003f3c:	42700000 	.word	0x42700000
 8003f40:	2000000c 	.word	0x2000000c
 8003f44:	42200000 	.word	0x42200000
 8003f48:	20000010 	.word	0x20000010
 8003f4c:	42480000 	.word	0x42480000
 8003f50:	bf58      	it	pl
 8003f52:	2300      	movpl	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f083 0301 	eor.w	r3, r3, #1
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <inicializar_parametros+0x3b2>
 8003f60:	4aae      	ldr	r2, [pc, #696]	; (800421c <inicializar_parametros+0x668>)
 8003f62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f64:	6013      	str	r3, [r2, #0]
		if(!((DUTY_CYCLE_FR_MIN_INT_READ > 50) || (DUTY_CYCLE_FR_MIN_INT_READ <= 0))){ DUTY_CYCLE_FR_MIN = DUTY_CYCLE_FR_MIN_INT_READ;}
 8003f66:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003f6a:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8004220 <inicializar_parametros+0x66c>
 8003f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f76:	bfcc      	ite	gt
 8003f78:	2301      	movgt	r3, #1
 8003f7a:	2300      	movle	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f083 0301 	eor.w	r3, r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d011      	beq.n	8003fac <inicializar_parametros+0x3f8>
 8003f88:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003f8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f94:	bf94      	ite	ls
 8003f96:	2301      	movls	r3, #1
 8003f98:	2300      	movhi	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f083 0301 	eor.w	r3, r3, #1
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <inicializar_parametros+0x3f8>
 8003fa6:	4a9f      	ldr	r2, [pc, #636]	; (8004224 <inicializar_parametros+0x670>)
 8003fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003faa:	6013      	str	r3, [r2, #0]
		if(!((DUTY_CYCLE_AC_INT_READ > 40) || (DUTY_CYCLE_AC_INT_READ <= 0))){ DUTY_CYCLE_AC = DUTY_CYCLE_AC_INT_READ;}
 8003fac:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003fb0:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8004228 <inicializar_parametros+0x674>
 8003fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fbc:	bfcc      	ite	gt
 8003fbe:	2301      	movgt	r3, #1
 8003fc0:	2300      	movle	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	f083 0301 	eor.w	r3, r3, #1
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d011      	beq.n	8003ff2 <inicializar_parametros+0x43e>
 8003fce:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003fd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fda:	bf94      	ite	ls
 8003fdc:	2301      	movls	r3, #1
 8003fde:	2300      	movhi	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f083 0301 	eor.w	r3, r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <inicializar_parametros+0x43e>
 8003fec:	4a8f      	ldr	r2, [pc, #572]	; (800422c <inicializar_parametros+0x678>)
 8003fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ff0:	6013      	str	r3, [r2, #0]
		if(!((DUTY_CYCLE_AC_MAX_INT_READ > 100) || (DUTY_CYCLE_AC_MAX_INT_READ < 30))){ DUTY_CYCLE_AC_MAX = DUTY_CYCLE_AC_MAX_INT_READ;}
 8003ff2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003ff6:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8004230 <inicializar_parametros+0x67c>
 8003ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004002:	bfcc      	ite	gt
 8004004:	2301      	movgt	r3, #1
 8004006:	2300      	movle	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f083 0301 	eor.w	r3, r3, #1
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d013      	beq.n	800403c <inicializar_parametros+0x488>
 8004014:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8004018:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800401c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004024:	bf4c      	ite	mi
 8004026:	2301      	movmi	r3, #1
 8004028:	2300      	movpl	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f083 0301 	eor.w	r3, r3, #1
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <inicializar_parametros+0x488>
 8004036:	4a7f      	ldr	r2, [pc, #508]	; (8004234 <inicializar_parametros+0x680>)
 8004038:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800403a:	6013      	str	r3, [r2, #0]
		if(!((DUTYFE_INT_READ > 100) || (DUTYFE_INT_READ < 50))){ DUTYFE = DUTYFE_INT_READ;}
 800403c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004040:	2b64      	cmp	r3, #100	; 0x64
 8004042:	d807      	bhi.n	8004054 <inicializar_parametros+0x4a0>
 8004044:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004048:	2b31      	cmp	r3, #49	; 0x31
 800404a:	d903      	bls.n	8004054 <inicializar_parametros+0x4a0>
 800404c:	4a7a      	ldr	r2, [pc, #488]	; (8004238 <inicializar_parametros+0x684>)
 800404e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004052:	7013      	strb	r3, [r2, #0]
		if(!((DUTYACEL_INT_READ > 50) || (DUTYACEL_INT_READ < 0))){ DUTYACEL = DUTYACEL_INT_READ;}
 8004054:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8004058:	2b32      	cmp	r3, #50	; 0x32
 800405a:	d803      	bhi.n	8004064 <inicializar_parametros+0x4b0>
 800405c:	4a77      	ldr	r2, [pc, #476]	; (800423c <inicializar_parametros+0x688>)
 800405e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8004062:	7013      	strb	r3, [r2, #0]
		if(!((DUTYFR_INT_READ > 100) || (DUTYFR_INT_READ < 50))){ DUTYFR = DUTYFR_INT_READ;}
 8004064:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8004068:	2b64      	cmp	r3, #100	; 0x64
 800406a:	d807      	bhi.n	800407c <inicializar_parametros+0x4c8>
 800406c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8004070:	2b31      	cmp	r3, #49	; 0x31
 8004072:	d903      	bls.n	800407c <inicializar_parametros+0x4c8>
 8004074:	4a72      	ldr	r2, [pc, #456]	; (8004240 <inicializar_parametros+0x68c>)
 8004076:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800407a:	7013      	strb	r3, [r2, #0]
		if(!((NUMBER_FEEDBACKS_INT_READ > 30) || (NUMBER_FEEDBACKS_INT_READ <= 0))){ NUMBER_OF_FEEDBACKS = NUMBER_FEEDBACKS_INT_READ;}
 800407c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8004080:	2b1e      	cmp	r3, #30
 8004082:	d807      	bhi.n	8004094 <inicializar_parametros+0x4e0>
 8004084:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <inicializar_parametros+0x4e0>
 800408c:	4a6d      	ldr	r2, [pc, #436]	; (8004244 <inicializar_parametros+0x690>)
 800408e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8004092:	7013      	strb	r3, [r2, #0]

	}

	/* Apagar as variaveis CHAR atuais */
	memset(TIMEOUT_PING_CHAR, 0, strlen(TIMEOUT_PING_CHAR));
 8004094:	486c      	ldr	r0, [pc, #432]	; (8004248 <inicializar_parametros+0x694>)
 8004096:	f7fc f8a5 	bl	80001e4 <strlen>
 800409a:	4603      	mov	r3, r0
 800409c:	461a      	mov	r2, r3
 800409e:	2100      	movs	r1, #0
 80040a0:	4869      	ldr	r0, [pc, #420]	; (8004248 <inicializar_parametros+0x694>)
 80040a2:	f006 fdd9 	bl	800ac58 <memset>
	memset(DUTY_CYCLE_FE_CHAR, 0, strlen(DUTY_CYCLE_FE_CHAR));
 80040a6:	4869      	ldr	r0, [pc, #420]	; (800424c <inicializar_parametros+0x698>)
 80040a8:	f7fc f89c 	bl	80001e4 <strlen>
 80040ac:	4603      	mov	r3, r0
 80040ae:	461a      	mov	r2, r3
 80040b0:	2100      	movs	r1, #0
 80040b2:	4866      	ldr	r0, [pc, #408]	; (800424c <inicializar_parametros+0x698>)
 80040b4:	f006 fdd0 	bl	800ac58 <memset>
	memset(DUTY_CYCLE_FE_MIN_CHAR, 0, strlen(DUTY_CYCLE_FE_MIN_CHAR));
 80040b8:	4865      	ldr	r0, [pc, #404]	; (8004250 <inicializar_parametros+0x69c>)
 80040ba:	f7fc f893 	bl	80001e4 <strlen>
 80040be:	4603      	mov	r3, r0
 80040c0:	461a      	mov	r2, r3
 80040c2:	2100      	movs	r1, #0
 80040c4:	4862      	ldr	r0, [pc, #392]	; (8004250 <inicializar_parametros+0x69c>)
 80040c6:	f006 fdc7 	bl	800ac58 <memset>
	memset(DUTY_CYCLE_FR_CHAR, 0, strlen(DUTY_CYCLE_FR_CHAR));
 80040ca:	4862      	ldr	r0, [pc, #392]	; (8004254 <inicializar_parametros+0x6a0>)
 80040cc:	f7fc f88a 	bl	80001e4 <strlen>
 80040d0:	4603      	mov	r3, r0
 80040d2:	461a      	mov	r2, r3
 80040d4:	2100      	movs	r1, #0
 80040d6:	485f      	ldr	r0, [pc, #380]	; (8004254 <inicializar_parametros+0x6a0>)
 80040d8:	f006 fdbe 	bl	800ac58 <memset>
	memset(DUTY_CYCLE_FR_MIN_CHAR, 0, strlen(DUTY_CYCLE_FR_MIN_CHAR));
 80040dc:	485e      	ldr	r0, [pc, #376]	; (8004258 <inicializar_parametros+0x6a4>)
 80040de:	f7fc f881 	bl	80001e4 <strlen>
 80040e2:	4603      	mov	r3, r0
 80040e4:	461a      	mov	r2, r3
 80040e6:	2100      	movs	r1, #0
 80040e8:	485b      	ldr	r0, [pc, #364]	; (8004258 <inicializar_parametros+0x6a4>)
 80040ea:	f006 fdb5 	bl	800ac58 <memset>
	memset(DUTY_CYCLE_AC_CHAR, 0, strlen(DUTY_CYCLE_AC_CHAR));
 80040ee:	485b      	ldr	r0, [pc, #364]	; (800425c <inicializar_parametros+0x6a8>)
 80040f0:	f7fc f878 	bl	80001e4 <strlen>
 80040f4:	4603      	mov	r3, r0
 80040f6:	461a      	mov	r2, r3
 80040f8:	2100      	movs	r1, #0
 80040fa:	4858      	ldr	r0, [pc, #352]	; (800425c <inicializar_parametros+0x6a8>)
 80040fc:	f006 fdac 	bl	800ac58 <memset>
	memset(DUTY_CYCLE_AC_MAX_CHAR, 0, strlen(DUTY_CYCLE_AC_MAX_CHAR));
 8004100:	4857      	ldr	r0, [pc, #348]	; (8004260 <inicializar_parametros+0x6ac>)
 8004102:	f7fc f86f 	bl	80001e4 <strlen>
 8004106:	4603      	mov	r3, r0
 8004108:	461a      	mov	r2, r3
 800410a:	2100      	movs	r1, #0
 800410c:	4854      	ldr	r0, [pc, #336]	; (8004260 <inicializar_parametros+0x6ac>)
 800410e:	f006 fda3 	bl	800ac58 <memset>
	memset(DUTYFE_CHAR, 0, strlen(DUTYFE_CHAR));
 8004112:	4854      	ldr	r0, [pc, #336]	; (8004264 <inicializar_parametros+0x6b0>)
 8004114:	f7fc f866 	bl	80001e4 <strlen>
 8004118:	4603      	mov	r3, r0
 800411a:	461a      	mov	r2, r3
 800411c:	2100      	movs	r1, #0
 800411e:	4851      	ldr	r0, [pc, #324]	; (8004264 <inicializar_parametros+0x6b0>)
 8004120:	f006 fd9a 	bl	800ac58 <memset>
	memset(DUTYACEL_CHAR, 0, strlen(DUTYACEL_CHAR));
 8004124:	4850      	ldr	r0, [pc, #320]	; (8004268 <inicializar_parametros+0x6b4>)
 8004126:	f7fc f85d 	bl	80001e4 <strlen>
 800412a:	4603      	mov	r3, r0
 800412c:	461a      	mov	r2, r3
 800412e:	2100      	movs	r1, #0
 8004130:	484d      	ldr	r0, [pc, #308]	; (8004268 <inicializar_parametros+0x6b4>)
 8004132:	f006 fd91 	bl	800ac58 <memset>
	memset(DUTYFR_CHAR, 0, strlen(DUTYFR_CHAR));
 8004136:	484d      	ldr	r0, [pc, #308]	; (800426c <inicializar_parametros+0x6b8>)
 8004138:	f7fc f854 	bl	80001e4 <strlen>
 800413c:	4603      	mov	r3, r0
 800413e:	461a      	mov	r2, r3
 8004140:	2100      	movs	r1, #0
 8004142:	484a      	ldr	r0, [pc, #296]	; (800426c <inicializar_parametros+0x6b8>)
 8004144:	f006 fd88 	bl	800ac58 <memset>
	memset(NUMBER_OF_FEEDBACKS_CHAR, 0, strlen(NUMBER_OF_FEEDBACKS_CHAR));
 8004148:	4849      	ldr	r0, [pc, #292]	; (8004270 <inicializar_parametros+0x6bc>)
 800414a:	f7fc f84b 	bl	80001e4 <strlen>
 800414e:	4603      	mov	r3, r0
 8004150:	461a      	mov	r2, r3
 8004152:	2100      	movs	r1, #0
 8004154:	4846      	ldr	r0, [pc, #280]	; (8004270 <inicializar_parametros+0x6bc>)
 8004156:	f006 fd7f 	bl	800ac58 <memset>

	/* Atualizar as variaveis CHAR */
	sprintf(TIMEOUT_PING_CHAR, "%d", TIMEOUT_PING);
 800415a:	4b46      	ldr	r3, [pc, #280]	; (8004274 <inicializar_parametros+0x6c0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	4945      	ldr	r1, [pc, #276]	; (8004278 <inicializar_parametros+0x6c4>)
 8004162:	4839      	ldr	r0, [pc, #228]	; (8004248 <inicializar_parametros+0x694>)
 8004164:	f006 fd80 	bl	800ac68 <siprintf>
	sprintf(DUTYFE_CHAR, "%d", DUTYFE);
 8004168:	4b33      	ldr	r3, [pc, #204]	; (8004238 <inicializar_parametros+0x684>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	4941      	ldr	r1, [pc, #260]	; (8004278 <inicializar_parametros+0x6c4>)
 8004172:	483c      	ldr	r0, [pc, #240]	; (8004264 <inicializar_parametros+0x6b0>)
 8004174:	f006 fd78 	bl	800ac68 <siprintf>
	sprintf(DUTYACEL_CHAR, "%d", DUTYACEL);
 8004178:	4b30      	ldr	r3, [pc, #192]	; (800423c <inicializar_parametros+0x688>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	493d      	ldr	r1, [pc, #244]	; (8004278 <inicializar_parametros+0x6c4>)
 8004182:	4839      	ldr	r0, [pc, #228]	; (8004268 <inicializar_parametros+0x6b4>)
 8004184:	f006 fd70 	bl	800ac68 <siprintf>
	sprintf(DUTYFR_CHAR, "%d", DUTYFR);
 8004188:	4b2d      	ldr	r3, [pc, #180]	; (8004240 <inicializar_parametros+0x68c>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	4939      	ldr	r1, [pc, #228]	; (8004278 <inicializar_parametros+0x6c4>)
 8004192:	4836      	ldr	r0, [pc, #216]	; (800426c <inicializar_parametros+0x6b8>)
 8004194:	f006 fd68 	bl	800ac68 <siprintf>
	sprintf(NUMBER_OF_FEEDBACKS_CHAR, "%d", NUMBER_OF_FEEDBACKS);
 8004198:	4b2a      	ldr	r3, [pc, #168]	; (8004244 <inicializar_parametros+0x690>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	4936      	ldr	r1, [pc, #216]	; (8004278 <inicializar_parametros+0x6c4>)
 80041a0:	4833      	ldr	r0, [pc, #204]	; (8004270 <inicializar_parametros+0x6bc>)
 80041a2:	f006 fd61 	bl	800ac68 <siprintf>

	ftoa(DUTY_CYCLE_FE, DUTY_CYCLE_FE_CHAR, 2);
 80041a6:	4b35      	ldr	r3, [pc, #212]	; (800427c <inicializar_parametros+0x6c8>)
 80041a8:	edd3 7a00 	vldr	s15, [r3]
 80041ac:	2102      	movs	r1, #2
 80041ae:	4827      	ldr	r0, [pc, #156]	; (800424c <inicializar_parametros+0x698>)
 80041b0:	eeb0 0a67 	vmov.f32	s0, s15
 80041b4:	f001 fbc8 	bl	8005948 <ftoa>
	ftoa(DUTY_CYCLE_FE_MIN, DUTY_CYCLE_FE_MIN_CHAR, 2);
 80041b8:	4b31      	ldr	r3, [pc, #196]	; (8004280 <inicializar_parametros+0x6cc>)
 80041ba:	edd3 7a00 	vldr	s15, [r3]
 80041be:	2102      	movs	r1, #2
 80041c0:	4823      	ldr	r0, [pc, #140]	; (8004250 <inicializar_parametros+0x69c>)
 80041c2:	eeb0 0a67 	vmov.f32	s0, s15
 80041c6:	f001 fbbf 	bl	8005948 <ftoa>
	ftoa(DUTY_CYCLE_FR, DUTY_CYCLE_FR_CHAR, 2);
 80041ca:	4b14      	ldr	r3, [pc, #80]	; (800421c <inicializar_parametros+0x668>)
 80041cc:	edd3 7a00 	vldr	s15, [r3]
 80041d0:	2102      	movs	r1, #2
 80041d2:	4820      	ldr	r0, [pc, #128]	; (8004254 <inicializar_parametros+0x6a0>)
 80041d4:	eeb0 0a67 	vmov.f32	s0, s15
 80041d8:	f001 fbb6 	bl	8005948 <ftoa>
	ftoa(DUTY_CYCLE_FR_MIN, DUTY_CYCLE_FR_MIN_CHAR, 2);
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <inicializar_parametros+0x670>)
 80041de:	edd3 7a00 	vldr	s15, [r3]
 80041e2:	2102      	movs	r1, #2
 80041e4:	481c      	ldr	r0, [pc, #112]	; (8004258 <inicializar_parametros+0x6a4>)
 80041e6:	eeb0 0a67 	vmov.f32	s0, s15
 80041ea:	f001 fbad 	bl	8005948 <ftoa>
	ftoa(DUTY_CYCLE_AC, DUTY_CYCLE_AC_CHAR, 2);
 80041ee:	4b0f      	ldr	r3, [pc, #60]	; (800422c <inicializar_parametros+0x678>)
 80041f0:	edd3 7a00 	vldr	s15, [r3]
 80041f4:	2102      	movs	r1, #2
 80041f6:	4819      	ldr	r0, [pc, #100]	; (800425c <inicializar_parametros+0x6a8>)
 80041f8:	eeb0 0a67 	vmov.f32	s0, s15
 80041fc:	f001 fba4 	bl	8005948 <ftoa>
	ftoa(DUTY_CYCLE_AC_MAX, DUTY_CYCLE_AC_MAX_CHAR, 2);
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <inicializar_parametros+0x680>)
 8004202:	edd3 7a00 	vldr	s15, [r3]
 8004206:	2102      	movs	r1, #2
 8004208:	4815      	ldr	r0, [pc, #84]	; (8004260 <inicializar_parametros+0x6ac>)
 800420a:	eeb0 0a67 	vmov.f32	s0, s15
 800420e:	f001 fb9b 	bl	8005948 <ftoa>

}
 8004212:	bf00      	nop
 8004214:	3790      	adds	r7, #144	; 0x90
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	2000001c 	.word	0x2000001c
 8004220:	42480000 	.word	0x42480000
 8004224:	20000020 	.word	0x20000020
 8004228:	42200000 	.word	0x42200000
 800422c:	20000014 	.word	0x20000014
 8004230:	42c80000 	.word	0x42c80000
 8004234:	20000018 	.word	0x20000018
 8004238:	20000024 	.word	0x20000024
 800423c:	20000261 	.word	0x20000261
 8004240:	20000262 	.word	0x20000262
 8004244:	20000030 	.word	0x20000030
 8004248:	200004e0 	.word	0x200004e0
 800424c:	20000694 	.word	0x20000694
 8004250:	2000069c 	.word	0x2000069c
 8004254:	2000055c 	.word	0x2000055c
 8004258:	200007a0 	.word	0x200007a0
 800425c:	200006c4 	.word	0x200006c4
 8004260:	200006f4 	.word	0x200006f4
 8004264:	200002e0 	.word	0x200002e0
 8004268:	200004e8 	.word	0x200004e8
 800426c:	20000c30 	.word	0x20000c30
 8004270:	200006f0 	.word	0x200006f0
 8004274:	20000028 	.word	0x20000028
 8004278:	0800fb48 	.word	0x0800fb48
 800427c:	2000000c 	.word	0x2000000c
 8004280:	20000010 	.word	0x20000010

08004284 <atuar_PWMs>:
  *
  * @param  none
  *
  * @retval void
  */
void atuar_PWMs(){
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0

	htim3.Instance -> CCR1 = PWM_FE;
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <atuar_PWMs+0x2c>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <atuar_PWMs+0x30>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance -> CCR2 = PWM_AC;
 8004292:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <atuar_PWMs+0x34>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <atuar_PWMs+0x30>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance -> CCR1 = PWM_FR;
 800429c:	4b07      	ldr	r3, [pc, #28]	; (80042bc <atuar_PWMs+0x38>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <atuar_PWMs+0x3c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	635a      	str	r2, [r3, #52]	; 0x34

}
 80042a6:	bf00      	nop
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	200004dc 	.word	0x200004dc
 80042b4:	200004ec 	.word	0x200004ec
 80042b8:	20000c28 	.word	0x20000c28
 80042bc:	20000538 	.word	0x20000538
 80042c0:	200003e4 	.word	0x200003e4

080042c4 <show_now>:
  *
  * @param  none
  *
  * @retval void
  */
void show_now(){
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
	millis = HAL_GetTick();
 80042c8:	f7fe fea4 	bl	8003014 <HAL_GetTick>
 80042cc:	4603      	mov	r3, r0
 80042ce:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <show_now+0x1c>)
 80042d0:	6013      	str	r3, [r2, #0]
	MILLIS_INFORMAR_HORARIO(millis);
 80042d2:	4b03      	ldr	r3, [pc, #12]	; (80042e0 <show_now+0x1c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f001 f91a 	bl	8005510 <MILLIS_INFORMAR_HORARIO>
}
 80042dc:	bf00      	nop
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	200002a4 	.word	0x200002a4

080042e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042e8:	f001 fbb3 	bl	8005a52 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042ec:	f000 f858 	bl	80043a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Aguardar inicializacao do CPU */
  while(HAL_GetTick() < 27000);
 80042f0:	bf00      	nop
 80042f2:	f7fe fe8f 	bl	8003014 <HAL_GetTick>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f646 1277 	movw	r2, #26999	; 0x6977
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d9f8      	bls.n	80042f2 <main+0xe>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004300:	f000 f9e6 	bl	80046d0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8004304:	f000 f89e 	bl	8004444 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004308:	f000 f902 	bl	8004510 <MX_TIM4_Init>
  MX_UART4_Init();
 800430c:	f000 f980 	bl	8004610 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8004310:	f000 f9ae 	bl	8004670 <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8004314:	f000 f956 	bl	80045c4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  /* INICIALIZAR SAIDAS GPIO DIGITAIS */
  Init_Output_Pins();
 8004318:	f7fe febe 	bl	8003098 <Init_Output_Pins>

  /* Verificar dados salvos na flash */
  inicializar_parametros();
 800431c:	f7ff fc4a 	bl	8003bb4 <inicializar_parametros>

  /* PRESENT FIRMWARE INFORMATION */
  FIRMWARE_BEGIN();
 8004320:	f7fe f886 	bl	8002430 <FIRMWARE_BEGIN>

  /* GERAR FRAMES DE COMUNICACAO COM O RADIO */
  GerarFrames();
 8004324:	f000 fb0e 	bl	8004944 <GerarFrames>

  /* Largura de pulso dos PWMs */
  PWM_DEFINITION();
 8004328:	f7ff fb26 	bl	8003978 <PWM_DEFINITION>

  /* Indicacao Reset */
  HAL_UART_Transmit_IT(&huart4, "\n\r=========== !!! SYSTEM STATUS: ESP...OK,"
 800432c:	224e      	movs	r2, #78	; 0x4e
 800432e:	4914      	ldr	r1, [pc, #80]	; (8004380 <main+0x9c>)
 8004330:	4814      	ldr	r0, [pc, #80]	; (8004384 <main+0xa0>)
 8004332:	f004 ffb7 	bl	80092a4 <HAL_UART_Transmit_IT>
		  " UPA...OK, CPU...OK. !!! ===========\r\n", 78);

  /* Inicializar PWMs */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004336:	2100      	movs	r1, #0
 8004338:	4813      	ldr	r0, [pc, #76]	; (8004388 <main+0xa4>)
 800433a:	f003 fe61 	bl	8008000 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800433e:	2104      	movs	r1, #4
 8004340:	4811      	ldr	r0, [pc, #68]	; (8004388 <main+0xa4>)
 8004342:	f003 fe5d 	bl	8008000 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004346:	2100      	movs	r1, #0
 8004348:	4810      	ldr	r0, [pc, #64]	; (800438c <main+0xa8>)
 800434a:	f003 fe59 	bl	8008000 <HAL_TIM_PWM_Start>

  atuar_PWMs();
 800434e:	f7ff ff99 	bl	8004284 <atuar_PWMs>

  /* DAR INICIO AO TIMER 16 para monitoramento */
  HAL_TIM_Base_Start_IT(&htim16);
 8004352:	480f      	ldr	r0, [pc, #60]	; (8004390 <main+0xac>)
 8004354:	f003 fd8c 	bl	8007e70 <HAL_TIM_Base_Start_IT>

  /* Receber dados do radio por serial */
  HAL_UART_Receive_IT(&huart3, Data, 1);
 8004358:	2201      	movs	r2, #1
 800435a:	490e      	ldr	r1, [pc, #56]	; (8004394 <main+0xb0>)
 800435c:	480e      	ldr	r0, [pc, #56]	; (8004398 <main+0xb4>)
 800435e:	f005 f80f 	bl	8009380 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* LEITURA DOS PINOS DIGITAIS */
	  LEITURA_INPUT_PINS();
 8004362:	f7ff f867 	bl	8003434 <LEITURA_INPUT_PINS>

	  /* GERACAO DO SINAL STATUS */
	  TOGGLE_PWM_STATUS();
 8004366:	f7ff fbeb 	bl	8003b40 <TOGGLE_PWM_STATUS>

	  /* AJUSTE FREIO RETARDO */
	  if (GATE_FR){
 800436a:	4b0c      	ldr	r3, [pc, #48]	; (800439c <main+0xb8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <main+0x92>
		  AJUSTAR_DUTY_CYCLE_FR();
 8004372:	f7fe ffc3 	bl	80032fc <AJUSTAR_DUTY_CYCLE_FR>
	  }

	  /* Aguardar solicitacoes do usuario */
	  Handle_user(100 /*time ms*/);
 8004376:	2064      	movs	r0, #100	; 0x64
 8004378:	f7fc ff22 	bl	80011c0 <Handle_user>
	  LEITURA_INPUT_PINS();
 800437c:	e7f1      	b.n	8004362 <main+0x7e>
 800437e:	bf00      	nop
 8004380:	0800fb4c 	.word	0x0800fb4c
 8004384:	2000071c 	.word	0x2000071c
 8004388:	200004ec 	.word	0x200004ec
 800438c:	200003e4 	.word	0x200003e4
 8004390:	20000bdc 	.word	0x20000bdc
 8004394:	20000564 	.word	0x20000564
 8004398:	20000434 	.word	0x20000434
 800439c:	20000280 	.word	0x20000280

080043a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b096      	sub	sp, #88	; 0x58
 80043a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043a6:	f107 0314 	add.w	r3, r7, #20
 80043aa:	2244      	movs	r2, #68	; 0x44
 80043ac:	2100      	movs	r1, #0
 80043ae:	4618      	mov	r0, r3
 80043b0:	f006 fc52 	bl	800ac58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043b4:	463b      	mov	r3, r7
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	609a      	str	r2, [r3, #8]
 80043be:	60da      	str	r2, [r3, #12]
 80043c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80043c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80043c6:	f002 f9fd 	bl	80067c4 <HAL_PWREx_ControlVoltageScaling>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80043d0:	f000 fab2 	bl	8004938 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80043d4:	2310      	movs	r3, #16
 80043d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80043d8:	2301      	movs	r3, #1
 80043da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80043e0:	2360      	movs	r3, #96	; 0x60
 80043e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043e4:	2302      	movs	r3, #2
 80043e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80043e8:	2301      	movs	r3, #1
 80043ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80043ec:	2301      	movs	r3, #1
 80043ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 80043f0:	2324      	movs	r3, #36	; 0x24
 80043f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80043f4:	2307      	movs	r3, #7
 80043f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80043f8:	2302      	movs	r3, #2
 80043fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80043fc:	2302      	movs	r3, #2
 80043fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004400:	f107 0314 	add.w	r3, r7, #20
 8004404:	4618      	mov	r0, r3
 8004406:	f002 fa33 	bl	8006870 <HAL_RCC_OscConfig>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8004410:	f000 fa92 	bl	8004938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004414:	230f      	movs	r3, #15
 8004416:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004418:	2303      	movs	r3, #3
 800441a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800441c:	2300      	movs	r3, #0
 800441e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004428:	463b      	mov	r3, r7
 800442a:	2104      	movs	r1, #4
 800442c:	4618      	mov	r0, r3
 800442e:	f002 fe05 	bl	800703c <HAL_RCC_ClockConfig>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004438:	f000 fa7e 	bl	8004938 <Error_Handler>
  }
}
 800443c:	bf00      	nop
 800443e:	3758      	adds	r7, #88	; 0x58
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08a      	sub	sp, #40	; 0x28
 8004448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800444a:	f107 031c 	add.w	r3, r7, #28
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	605a      	str	r2, [r3, #4]
 8004454:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004456:	463b      	mov	r3, r7
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	609a      	str	r2, [r3, #8]
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	611a      	str	r2, [r3, #16]
 8004464:	615a      	str	r2, [r3, #20]
 8004466:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004468:	4b27      	ldr	r3, [pc, #156]	; (8004508 <MX_TIM3_Init+0xc4>)
 800446a:	4a28      	ldr	r2, [pc, #160]	; (800450c <MX_TIM3_Init+0xc8>)
 800446c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 800446e:	4b26      	ldr	r3, [pc, #152]	; (8004508 <MX_TIM3_Init+0xc4>)
 8004470:	f240 22cf 	movw	r2, #719	; 0x2cf
 8004474:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004476:	4b24      	ldr	r3, [pc, #144]	; (8004508 <MX_TIM3_Init+0xc4>)
 8004478:	2200      	movs	r2, #0
 800447a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 800447c:	4b22      	ldr	r3, [pc, #136]	; (8004508 <MX_TIM3_Init+0xc4>)
 800447e:	22c7      	movs	r2, #199	; 0xc7
 8004480:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004482:	4b21      	ldr	r3, [pc, #132]	; (8004508 <MX_TIM3_Init+0xc4>)
 8004484:	2200      	movs	r2, #0
 8004486:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004488:	4b1f      	ldr	r3, [pc, #124]	; (8004508 <MX_TIM3_Init+0xc4>)
 800448a:	2200      	movs	r2, #0
 800448c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800448e:	481e      	ldr	r0, [pc, #120]	; (8004508 <MX_TIM3_Init+0xc4>)
 8004490:	f003 fd5e 	bl	8007f50 <HAL_TIM_PWM_Init>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800449a:	f000 fa4d 	bl	8004938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80044a6:	f107 031c 	add.w	r3, r7, #28
 80044aa:	4619      	mov	r1, r3
 80044ac:	4816      	ldr	r0, [pc, #88]	; (8004508 <MX_TIM3_Init+0xc4>)
 80044ae:	f004 fc9f 	bl	8008df0 <HAL_TIMEx_MasterConfigSynchronization>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80044b8:	f000 fa3e 	bl	8004938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044bc:	2360      	movs	r3, #96	; 0x60
 80044be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044cc:	463b      	mov	r3, r7
 80044ce:	2200      	movs	r2, #0
 80044d0:	4619      	mov	r1, r3
 80044d2:	480d      	ldr	r0, [pc, #52]	; (8004508 <MX_TIM3_Init+0xc4>)
 80044d4:	f003 ffba 	bl	800844c <HAL_TIM_PWM_ConfigChannel>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80044de:	f000 fa2b 	bl	8004938 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80044e2:	463b      	mov	r3, r7
 80044e4:	2204      	movs	r2, #4
 80044e6:	4619      	mov	r1, r3
 80044e8:	4807      	ldr	r0, [pc, #28]	; (8004508 <MX_TIM3_Init+0xc4>)
 80044ea:	f003 ffaf 	bl	800844c <HAL_TIM_PWM_ConfigChannel>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80044f4:	f000 fa20 	bl	8004938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80044f8:	4803      	ldr	r0, [pc, #12]	; (8004508 <MX_TIM3_Init+0xc4>)
 80044fa:	f000 fd35 	bl	8004f68 <HAL_TIM_MspPostInit>

}
 80044fe:	bf00      	nop
 8004500:	3728      	adds	r7, #40	; 0x28
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	200004ec 	.word	0x200004ec
 800450c:	40000400 	.word	0x40000400

08004510 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08a      	sub	sp, #40	; 0x28
 8004514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004516:	f107 031c 	add.w	r3, r7, #28
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	605a      	str	r2, [r3, #4]
 8004520:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004522:	463b      	mov	r3, r7
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	605a      	str	r2, [r3, #4]
 800452a:	609a      	str	r2, [r3, #8]
 800452c:	60da      	str	r2, [r3, #12]
 800452e:	611a      	str	r2, [r3, #16]
 8004530:	615a      	str	r2, [r3, #20]
 8004532:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004534:	4b21      	ldr	r3, [pc, #132]	; (80045bc <MX_TIM4_Init+0xac>)
 8004536:	4a22      	ldr	r2, [pc, #136]	; (80045c0 <MX_TIM4_Init+0xb0>)
 8004538:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720-1;
 800453a:	4b20      	ldr	r3, [pc, #128]	; (80045bc <MX_TIM4_Init+0xac>)
 800453c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8004540:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004542:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <MX_TIM4_Init+0xac>)
 8004544:	2200      	movs	r2, #0
 8004546:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 8004548:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <MX_TIM4_Init+0xac>)
 800454a:	22c7      	movs	r2, #199	; 0xc7
 800454c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800454e:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <MX_TIM4_Init+0xac>)
 8004550:	2200      	movs	r2, #0
 8004552:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004554:	4b19      	ldr	r3, [pc, #100]	; (80045bc <MX_TIM4_Init+0xac>)
 8004556:	2200      	movs	r2, #0
 8004558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800455a:	4818      	ldr	r0, [pc, #96]	; (80045bc <MX_TIM4_Init+0xac>)
 800455c:	f003 fcf8 	bl	8007f50 <HAL_TIM_PWM_Init>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8004566:	f000 f9e7 	bl	8004938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800456e:	2300      	movs	r3, #0
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004572:	f107 031c 	add.w	r3, r7, #28
 8004576:	4619      	mov	r1, r3
 8004578:	4810      	ldr	r0, [pc, #64]	; (80045bc <MX_TIM4_Init+0xac>)
 800457a:	f004 fc39 	bl	8008df0 <HAL_TIMEx_MasterConfigSynchronization>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8004584:	f000 f9d8 	bl	8004938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004588:	2360      	movs	r3, #96	; 0x60
 800458a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004590:	2300      	movs	r3, #0
 8004592:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004594:	2300      	movs	r3, #0
 8004596:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004598:	463b      	mov	r3, r7
 800459a:	2200      	movs	r2, #0
 800459c:	4619      	mov	r1, r3
 800459e:	4807      	ldr	r0, [pc, #28]	; (80045bc <MX_TIM4_Init+0xac>)
 80045a0:	f003 ff54 	bl	800844c <HAL_TIM_PWM_ConfigChannel>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80045aa:	f000 f9c5 	bl	8004938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80045ae:	4803      	ldr	r0, [pc, #12]	; (80045bc <MX_TIM4_Init+0xac>)
 80045b0:	f000 fcda 	bl	8004f68 <HAL_TIM_MspPostInit>

}
 80045b4:	bf00      	nop
 80045b6:	3728      	adds	r7, #40	; 0x28
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	200003e4 	.word	0x200003e4
 80045c0:	40000800 	.word	0x40000800

080045c4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80045c8:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <MX_TIM16_Init+0x44>)
 80045ca:	4a10      	ldr	r2, [pc, #64]	; (800460c <MX_TIM16_Init+0x48>)
 80045cc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 720-1;
 80045ce:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <MX_TIM16_Init+0x44>)
 80045d0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80045d4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <MX_TIM16_Init+0x44>)
 80045d8:	2200      	movs	r2, #0
 80045da:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100-1;
 80045dc:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <MX_TIM16_Init+0x44>)
 80045de:	2263      	movs	r2, #99	; 0x63
 80045e0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045e2:	4b09      	ldr	r3, [pc, #36]	; (8004608 <MX_TIM16_Init+0x44>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80045e8:	4b07      	ldr	r3, [pc, #28]	; (8004608 <MX_TIM16_Init+0x44>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045ee:	4b06      	ldr	r3, [pc, #24]	; (8004608 <MX_TIM16_Init+0x44>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80045f4:	4804      	ldr	r0, [pc, #16]	; (8004608 <MX_TIM16_Init+0x44>)
 80045f6:	f003 fbe3 	bl	8007dc0 <HAL_TIM_Base_Init>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004600:	f000 f99a 	bl	8004938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004604:	bf00      	nop
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20000bdc 	.word	0x20000bdc
 800460c:	40014400 	.word	0x40014400

08004610 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004614:	4b14      	ldr	r3, [pc, #80]	; (8004668 <MX_UART4_Init+0x58>)
 8004616:	4a15      	ldr	r2, [pc, #84]	; (800466c <MX_UART4_Init+0x5c>)
 8004618:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800461a:	4b13      	ldr	r3, [pc, #76]	; (8004668 <MX_UART4_Init+0x58>)
 800461c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004620:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004622:	4b11      	ldr	r3, [pc, #68]	; (8004668 <MX_UART4_Init+0x58>)
 8004624:	2200      	movs	r2, #0
 8004626:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004628:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <MX_UART4_Init+0x58>)
 800462a:	2200      	movs	r2, #0
 800462c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800462e:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <MX_UART4_Init+0x58>)
 8004630:	2200      	movs	r2, #0
 8004632:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004634:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <MX_UART4_Init+0x58>)
 8004636:	220c      	movs	r2, #12
 8004638:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800463a:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <MX_UART4_Init+0x58>)
 800463c:	2200      	movs	r2, #0
 800463e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004640:	4b09      	ldr	r3, [pc, #36]	; (8004668 <MX_UART4_Init+0x58>)
 8004642:	2200      	movs	r2, #0
 8004644:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004646:	4b08      	ldr	r3, [pc, #32]	; (8004668 <MX_UART4_Init+0x58>)
 8004648:	2200      	movs	r2, #0
 800464a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <MX_UART4_Init+0x58>)
 800464e:	2200      	movs	r2, #0
 8004650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004652:	4805      	ldr	r0, [pc, #20]	; (8004668 <MX_UART4_Init+0x58>)
 8004654:	f004 fc72 	bl	8008f3c <HAL_UART_Init>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800465e:	f000 f96b 	bl	8004938 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004662:	bf00      	nop
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	2000071c 	.word	0x2000071c
 800466c:	40004c00 	.word	0x40004c00

08004670 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004674:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <MX_USART3_UART_Init+0x58>)
 8004676:	4a15      	ldr	r2, [pc, #84]	; (80046cc <MX_USART3_UART_Init+0x5c>)
 8004678:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800467a:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <MX_USART3_UART_Init+0x58>)
 800467c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004680:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004682:	4b11      	ldr	r3, [pc, #68]	; (80046c8 <MX_USART3_UART_Init+0x58>)
 8004684:	2200      	movs	r2, #0
 8004686:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <MX_USART3_UART_Init+0x58>)
 800468a:	2200      	movs	r2, #0
 800468c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800468e:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <MX_USART3_UART_Init+0x58>)
 8004690:	2200      	movs	r2, #0
 8004692:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004694:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <MX_USART3_UART_Init+0x58>)
 8004696:	220c      	movs	r2, #12
 8004698:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800469a:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <MX_USART3_UART_Init+0x58>)
 800469c:	2200      	movs	r2, #0
 800469e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <MX_USART3_UART_Init+0x58>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046a6:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <MX_USART3_UART_Init+0x58>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <MX_USART3_UART_Init+0x58>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80046b2:	4805      	ldr	r0, [pc, #20]	; (80046c8 <MX_USART3_UART_Init+0x58>)
 80046b4:	f004 fc42 	bl	8008f3c <HAL_UART_Init>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80046be:	f000 f93b 	bl	8004938 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000434 	.word	0x20000434
 80046cc:	40004800 	.word	0x40004800

080046d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	; 0x28
 80046d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d6:	f107 0314 	add.w	r3, r7, #20
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	605a      	str	r2, [r3, #4]
 80046e0:	609a      	str	r2, [r3, #8]
 80046e2:	60da      	str	r2, [r3, #12]
 80046e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046e6:	4b8f      	ldr	r3, [pc, #572]	; (8004924 <MX_GPIO_Init+0x254>)
 80046e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ea:	4a8e      	ldr	r2, [pc, #568]	; (8004924 <MX_GPIO_Init+0x254>)
 80046ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046f2:	4b8c      	ldr	r3, [pc, #560]	; (8004924 <MX_GPIO_Init+0x254>)
 80046f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046fe:	4b89      	ldr	r3, [pc, #548]	; (8004924 <MX_GPIO_Init+0x254>)
 8004700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004702:	4a88      	ldr	r2, [pc, #544]	; (8004924 <MX_GPIO_Init+0x254>)
 8004704:	f043 0304 	orr.w	r3, r3, #4
 8004708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800470a:	4b86      	ldr	r3, [pc, #536]	; (8004924 <MX_GPIO_Init+0x254>)
 800470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004716:	4b83      	ldr	r3, [pc, #524]	; (8004924 <MX_GPIO_Init+0x254>)
 8004718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471a:	4a82      	ldr	r2, [pc, #520]	; (8004924 <MX_GPIO_Init+0x254>)
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004722:	4b80      	ldr	r3, [pc, #512]	; (8004924 <MX_GPIO_Init+0x254>)
 8004724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800472e:	4b7d      	ldr	r3, [pc, #500]	; (8004924 <MX_GPIO_Init+0x254>)
 8004730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004732:	4a7c      	ldr	r2, [pc, #496]	; (8004924 <MX_GPIO_Init+0x254>)
 8004734:	f043 0302 	orr.w	r3, r3, #2
 8004738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800473a:	4b7a      	ldr	r3, [pc, #488]	; (8004924 <MX_GPIO_Init+0x254>)
 800473c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	607b      	str	r3, [r7, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004746:	4b77      	ldr	r3, [pc, #476]	; (8004924 <MX_GPIO_Init+0x254>)
 8004748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800474a:	4a76      	ldr	r2, [pc, #472]	; (8004924 <MX_GPIO_Init+0x254>)
 800474c:	f043 0308 	orr.w	r3, r3, #8
 8004750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004752:	4b74      	ldr	r3, [pc, #464]	; (8004924 <MX_GPIO_Init+0x254>)
 8004754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CPU_OUT_C_Pin|ON_OFF_SWITCH_Pin|B_SWITCH_Pin|A_SWITCH_Pin, GPIO_PIN_RESET);
 800475e:	2200      	movs	r2, #0
 8004760:	210f      	movs	r1, #15
 8004762:	4871      	ldr	r0, [pc, #452]	; (8004928 <MX_GPIO_Init+0x258>)
 8004764:	f001 fff0 	bl	8006748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_PWM_ESP_Pin|RELE_FREIO_STM_Pin|CPU_OUT_B_Pin|PWM_OUT_UPA_Pin
 8004768:	2200      	movs	r2, #0
 800476a:	f649 4160 	movw	r1, #40032	; 0x9c60
 800476e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004772:	f001 ffe9 	bl	8006748 <HAL_GPIO_WritePin>
                          |CPU_OUT_A_Pin|PWM_OUT_CPU_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IO_OUT_ESP_1_Pin|FEEDBACK_CPU_Pin|LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8004776:	2200      	movs	r2, #0
 8004778:	f243 4101 	movw	r1, #13313	; 0x3401
 800477c:	486b      	ldr	r0, [pc, #428]	; (800492c <MX_GPIO_Init+0x25c>)
 800477e:	f001 ffe3 	bl	8006748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CHECK_FONTE_Pin */
  GPIO_InitStruct.Pin = CHECK_FONTE_Pin;
 8004782:	2301      	movs	r3, #1
 8004784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004786:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800478a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478c:	2300      	movs	r3, #0
 800478e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHECK_FONTE_GPIO_Port, &GPIO_InitStruct);
 8004790:	f107 0314 	add.w	r3, r7, #20
 8004794:	4619      	mov	r1, r3
 8004796:	4866      	ldr	r0, [pc, #408]	; (8004930 <MX_GPIO_Init+0x260>)
 8004798:	f001 fe14 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CPU_OUT_C_Pin ON_OFF_SWITCH_Pin B_SWITCH_Pin A_SWITCH_Pin */
  GPIO_InitStruct.Pin = CPU_OUT_C_Pin|ON_OFF_SWITCH_Pin|B_SWITCH_Pin|A_SWITCH_Pin;
 800479c:	230f      	movs	r3, #15
 800479e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047a0:	2301      	movs	r3, #1
 80047a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a8:	2300      	movs	r3, #0
 80047aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047ac:	f107 0314 	add.w	r3, r7, #20
 80047b0:	4619      	mov	r1, r3
 80047b2:	485d      	ldr	r0, [pc, #372]	; (8004928 <MX_GPIO_Init+0x258>)
 80047b4:	f001 fe06 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PWM_ESP_Pin */
  GPIO_InitStruct.Pin = IN_PWM_ESP_Pin;
 80047b8:	2308      	movs	r3, #8
 80047ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80047c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_PWM_ESP_GPIO_Port, &GPIO_InitStruct);
 80047c6:	f107 0314 	add.w	r3, r7, #20
 80047ca:	4619      	mov	r1, r3
 80047cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047d0:	f001 fdf8 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PWM_ESP_Pin RELE_FREIO_STM_Pin CPU_OUT_B_Pin PWM_OUT_UPA_Pin
                           CPU_OUT_A_Pin PWM_OUT_CPU_Pin */
  GPIO_InitStruct.Pin = OUT_PWM_ESP_Pin|RELE_FREIO_STM_Pin|CPU_OUT_B_Pin|PWM_OUT_UPA_Pin
 80047d4:	f649 4360 	movw	r3, #40032	; 0x9c60
 80047d8:	617b      	str	r3, [r7, #20]
                          |CPU_OUT_A_Pin|PWM_OUT_CPU_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047da:	2301      	movs	r3, #1
 80047dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e2:	2300      	movs	r3, #0
 80047e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047e6:	f107 0314 	add.w	r3, r7, #20
 80047ea:	4619      	mov	r1, r3
 80047ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047f0:	f001 fde8 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO_OUT_ESP_1_Pin FEEDBACK_CPU_Pin LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = IO_OUT_ESP_1_Pin|FEEDBACK_CPU_Pin|LED_GREEN_Pin|LED_RED_Pin;
 80047f4:	f243 4301 	movw	r3, #13313	; 0x3401
 80047f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047fa:	2301      	movs	r3, #1
 80047fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004802:	2300      	movs	r3, #0
 8004804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004806:	f107 0314 	add.w	r3, r7, #20
 800480a:	4619      	mov	r1, r3
 800480c:	4847      	ldr	r0, [pc, #284]	; (800492c <MX_GPIO_Init+0x25c>)
 800480e:	f001 fdd9 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO_OUT_ESP_2_Pin */
  GPIO_InitStruct.Pin = IO_OUT_ESP_2_Pin;
 8004812:	2302      	movs	r3, #2
 8004814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004816:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800481a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481c:	2300      	movs	r3, #0
 800481e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_OUT_ESP_2_GPIO_Port, &GPIO_InitStruct);
 8004820:	f107 0314 	add.w	r3, r7, #20
 8004824:	4619      	mov	r1, r3
 8004826:	4841      	ldr	r0, [pc, #260]	; (800492c <MX_GPIO_Init+0x25c>)
 8004828:	f001 fdcc 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_IN_CLIENT_Pin IN_EXTRA_3_Pin IN_EXTRA_2_Pin CONNECT_ESP_IN_Pin */
  GPIO_InitStruct.Pin = ESP_IN_CLIENT_Pin|IN_EXTRA_3_Pin|IN_EXTRA_2_Pin|CONNECT_ESP_IN_Pin;
 800482c:	f24c 1304 	movw	r3, #49412	; 0xc104
 8004830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004832:	2300      	movs	r3, #0
 8004834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800483a:	f107 0314 	add.w	r3, r7, #20
 800483e:	4619      	mov	r1, r3
 8004840:	483a      	ldr	r0, [pc, #232]	; (800492c <MX_GPIO_Init+0x25c>)
 8004842:	f001 fdbf 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_EXTRA_1_Pin IN_CPU_7_Pin FR_BIT_2_Pin FR_BIT_1_Pin
                           GATE_FR_Pin */
  GPIO_InitStruct.Pin = IN_EXTRA_1_Pin|IN_CPU_7_Pin|FR_BIT_2_Pin|FR_BIT_1_Pin
 8004846:	f44f 53ea 	mov.w	r3, #7488	; 0x1d40
 800484a:	617b      	str	r3, [r7, #20]
                          |GATE_FR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800484c:	2300      	movs	r3, #0
 800484e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004850:	2300      	movs	r3, #0
 8004852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004854:	f107 0314 	add.w	r3, r7, #20
 8004858:	4619      	mov	r1, r3
 800485a:	4833      	ldr	r0, [pc, #204]	; (8004928 <MX_GPIO_Init+0x258>)
 800485c:	f001 fdb2 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PWM_UPA_Pin */
  GPIO_InitStruct.Pin = IN_PWM_UPA_Pin;
 8004860:	2380      	movs	r3, #128	; 0x80
 8004862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004864:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_PWM_UPA_GPIO_Port, &GPIO_InitStruct);
 800486e:	f107 0314 	add.w	r3, r7, #20
 8004872:	4619      	mov	r1, r3
 8004874:	482c      	ldr	r0, [pc, #176]	; (8004928 <MX_GPIO_Init+0x258>)
 8004876:	f001 fda5 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_CPU_6_Pin */
  GPIO_InitStruct.Pin = IN_CPU_6_Pin;
 800487a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800487e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004880:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8004884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004886:	2300      	movs	r3, #0
 8004888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_CPU_6_GPIO_Port, &GPIO_InitStruct);
 800488a:	f107 0314 	add.w	r3, r7, #20
 800488e:	4619      	mov	r1, r3
 8004890:	4825      	ldr	r0, [pc, #148]	; (8004928 <MX_GPIO_Init+0x258>)
 8004892:	f001 fd97 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FR_BIT_4_Pin FR_BIT_3_Pin */
  GPIO_InitStruct.Pin = FR_BIT_4_Pin|FR_BIT_3_Pin;
 8004896:	f44f 7340 	mov.w	r3, #768	; 0x300
 800489a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800489c:	2300      	movs	r3, #0
 800489e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048a4:	f107 0314 	add.w	r3, r7, #20
 80048a8:	4619      	mov	r1, r3
 80048aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048ae:	f001 fd89 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PWM_CPU_Pin */
  GPIO_InitStruct.Pin = IN_PWM_CPU_Pin;
 80048b2:	2304      	movs	r3, #4
 80048b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80048ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_PWM_CPU_GPIO_Port, &GPIO_InitStruct);
 80048c0:	f107 0314 	add.w	r3, r7, #20
 80048c4:	4619      	mov	r1, r3
 80048c6:	481b      	ldr	r0, [pc, #108]	; (8004934 <MX_GPIO_Init+0x264>)
 80048c8:	f001 fd7c 	bl	80063c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80048cc:	2200      	movs	r2, #0
 80048ce:	2100      	movs	r1, #0
 80048d0:	2006      	movs	r0, #6
 80048d2:	f001 fa02 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80048d6:	2006      	movs	r0, #6
 80048d8:	f001 fa1b 	bl	8005d12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80048dc:	2200      	movs	r2, #0
 80048de:	2100      	movs	r1, #0
 80048e0:	2007      	movs	r0, #7
 80048e2:	f001 f9fa 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80048e6:	2007      	movs	r0, #7
 80048e8:	f001 fa13 	bl	8005d12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80048ec:	2200      	movs	r2, #0
 80048ee:	2100      	movs	r1, #0
 80048f0:	2008      	movs	r0, #8
 80048f2:	f001 f9f2 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80048f6:	2008      	movs	r0, #8
 80048f8:	f001 fa0b 	bl	8005d12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80048fc:	2200      	movs	r2, #0
 80048fe:	2100      	movs	r1, #0
 8004900:	2009      	movs	r0, #9
 8004902:	f001 f9ea 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004906:	2009      	movs	r0, #9
 8004908:	f001 fa03 	bl	8005d12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800490c:	2200      	movs	r2, #0
 800490e:	2100      	movs	r1, #0
 8004910:	2017      	movs	r0, #23
 8004912:	f001 f9e2 	bl	8005cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004916:	2017      	movs	r0, #23
 8004918:	f001 f9fb 	bl	8005d12 <HAL_NVIC_EnableIRQ>

}
 800491c:	bf00      	nop
 800491e:	3728      	adds	r7, #40	; 0x28
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40021000 	.word	0x40021000
 8004928:	48000800 	.word	0x48000800
 800492c:	48000400 	.word	0x48000400
 8004930:	48001c00 	.word	0x48001c00
 8004934:	48000c00 	.word	0x48000c00

08004938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800493c:	b672      	cpsid	i
}
 800493e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004940:	e7fe      	b.n	8004940 <Error_Handler+0x8>
	...

08004944 <GerarFrames>:
  *
  * @param  none
  *
  * @retval void
  */
void GerarFrames(){
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0

	memset(FrameOn_A, 0, strlen(FrameOn_A));
 8004948:	4861      	ldr	r0, [pc, #388]	; (8004ad0 <GerarFrames+0x18c>)
 800494a:	f7fb fc4b 	bl	80001e4 <strlen>
 800494e:	4603      	mov	r3, r0
 8004950:	461a      	mov	r2, r3
 8004952:	2100      	movs	r1, #0
 8004954:	485e      	ldr	r0, [pc, #376]	; (8004ad0 <GerarFrames+0x18c>)
 8004956:	f006 f97f 	bl	800ac58 <memset>
	memset(FrameOff_A, 0, strlen(FrameOff_A));
 800495a:	485e      	ldr	r0, [pc, #376]	; (8004ad4 <GerarFrames+0x190>)
 800495c:	f7fb fc42 	bl	80001e4 <strlen>
 8004960:	4603      	mov	r3, r0
 8004962:	461a      	mov	r2, r3
 8004964:	2100      	movs	r1, #0
 8004966:	485b      	ldr	r0, [pc, #364]	; (8004ad4 <GerarFrames+0x190>)
 8004968:	f006 f976 	bl	800ac58 <memset>
	memset(FrameOn_B, 0, strlen(FrameOn_B));
 800496c:	485a      	ldr	r0, [pc, #360]	; (8004ad8 <GerarFrames+0x194>)
 800496e:	f7fb fc39 	bl	80001e4 <strlen>
 8004972:	4603      	mov	r3, r0
 8004974:	461a      	mov	r2, r3
 8004976:	2100      	movs	r1, #0
 8004978:	4857      	ldr	r0, [pc, #348]	; (8004ad8 <GerarFrames+0x194>)
 800497a:	f006 f96d 	bl	800ac58 <memset>
	memset(FrameOff_B, 0, strlen(FrameOff_B));
 800497e:	4857      	ldr	r0, [pc, #348]	; (8004adc <GerarFrames+0x198>)
 8004980:	f7fb fc30 	bl	80001e4 <strlen>
 8004984:	4603      	mov	r3, r0
 8004986:	461a      	mov	r2, r3
 8004988:	2100      	movs	r1, #0
 800498a:	4854      	ldr	r0, [pc, #336]	; (8004adc <GerarFrames+0x198>)
 800498c:	f006 f964 	bl	800ac58 <memset>
	memset(Frame_PING_A, 0, strlen(Frame_PING_A));
 8004990:	4853      	ldr	r0, [pc, #332]	; (8004ae0 <GerarFrames+0x19c>)
 8004992:	f7fb fc27 	bl	80001e4 <strlen>
 8004996:	4603      	mov	r3, r0
 8004998:	461a      	mov	r2, r3
 800499a:	2100      	movs	r1, #0
 800499c:	4850      	ldr	r0, [pc, #320]	; (8004ae0 <GerarFrames+0x19c>)
 800499e:	f006 f95b 	bl	800ac58 <memset>
	memset(Frame_PING_B, 0, strlen(Frame_PING_B));
 80049a2:	4850      	ldr	r0, [pc, #320]	; (8004ae4 <GerarFrames+0x1a0>)
 80049a4:	f7fb fc1e 	bl	80001e4 <strlen>
 80049a8:	4603      	mov	r3, r0
 80049aa:	461a      	mov	r2, r3
 80049ac:	2100      	movs	r1, #0
 80049ae:	484d      	ldr	r0, [pc, #308]	; (8004ae4 <GerarFrames+0x1a0>)
 80049b0:	f006 f952 	bl	800ac58 <memset>

	/* FRAME COMANDO ON */
	strcat(FrameOn_A, ID);
 80049b4:	494c      	ldr	r1, [pc, #304]	; (8004ae8 <GerarFrames+0x1a4>)
 80049b6:	4846      	ldr	r0, [pc, #280]	; (8004ad0 <GerarFrames+0x18c>)
 80049b8:	f006 f976 	bl	800aca8 <strcat>
	strcat(FrameOn_A, DIV);
 80049bc:	494b      	ldr	r1, [pc, #300]	; (8004aec <GerarFrames+0x1a8>)
 80049be:	4844      	ldr	r0, [pc, #272]	; (8004ad0 <GerarFrames+0x18c>)
 80049c0:	f006 f972 	bl	800aca8 <strcat>
	strcat(FrameOn_A, ID_COMMAND);
 80049c4:	494a      	ldr	r1, [pc, #296]	; (8004af0 <GerarFrames+0x1ac>)
 80049c6:	4842      	ldr	r0, [pc, #264]	; (8004ad0 <GerarFrames+0x18c>)
 80049c8:	f006 f96e 	bl	800aca8 <strcat>
	strcat(FrameOn_A, DIV);
 80049cc:	4947      	ldr	r1, [pc, #284]	; (8004aec <GerarFrames+0x1a8>)
 80049ce:	4840      	ldr	r0, [pc, #256]	; (8004ad0 <GerarFrames+0x18c>)
 80049d0:	f006 f96a 	bl	800aca8 <strcat>
	strcat(FrameOn_A, ON_COMMAND);
 80049d4:	4947      	ldr	r1, [pc, #284]	; (8004af4 <GerarFrames+0x1b0>)
 80049d6:	483e      	ldr	r0, [pc, #248]	; (8004ad0 <GerarFrames+0x18c>)
 80049d8:	f006 f966 	bl	800aca8 <strcat>

	/* FRAME COMANDO OFF */
	strcat(FrameOff_A, ID);
 80049dc:	4942      	ldr	r1, [pc, #264]	; (8004ae8 <GerarFrames+0x1a4>)
 80049de:	483d      	ldr	r0, [pc, #244]	; (8004ad4 <GerarFrames+0x190>)
 80049e0:	f006 f962 	bl	800aca8 <strcat>
	strcat(FrameOff_A, DIV);
 80049e4:	4941      	ldr	r1, [pc, #260]	; (8004aec <GerarFrames+0x1a8>)
 80049e6:	483b      	ldr	r0, [pc, #236]	; (8004ad4 <GerarFrames+0x190>)
 80049e8:	f006 f95e 	bl	800aca8 <strcat>
	strcat(FrameOff_A, ID_COMMAND);
 80049ec:	4940      	ldr	r1, [pc, #256]	; (8004af0 <GerarFrames+0x1ac>)
 80049ee:	4839      	ldr	r0, [pc, #228]	; (8004ad4 <GerarFrames+0x190>)
 80049f0:	f006 f95a 	bl	800aca8 <strcat>
	strcat(FrameOff_A, DIV);
 80049f4:	493d      	ldr	r1, [pc, #244]	; (8004aec <GerarFrames+0x1a8>)
 80049f6:	4837      	ldr	r0, [pc, #220]	; (8004ad4 <GerarFrames+0x190>)
 80049f8:	f006 f956 	bl	800aca8 <strcat>
	strcat(FrameOff_A, OFF_COMMAND);
 80049fc:	493e      	ldr	r1, [pc, #248]	; (8004af8 <GerarFrames+0x1b4>)
 80049fe:	4835      	ldr	r0, [pc, #212]	; (8004ad4 <GerarFrames+0x190>)
 8004a00:	f006 f952 	bl	800aca8 <strcat>

	/* FRAME COMING PING */
	strcat(Frame_PING_A, ID);
 8004a04:	4938      	ldr	r1, [pc, #224]	; (8004ae8 <GerarFrames+0x1a4>)
 8004a06:	4836      	ldr	r0, [pc, #216]	; (8004ae0 <GerarFrames+0x19c>)
 8004a08:	f006 f94e 	bl	800aca8 <strcat>
	strcat(Frame_PING_A, DIV);
 8004a0c:	4937      	ldr	r1, [pc, #220]	; (8004aec <GerarFrames+0x1a8>)
 8004a0e:	4834      	ldr	r0, [pc, #208]	; (8004ae0 <GerarFrames+0x19c>)
 8004a10:	f006 f94a 	bl	800aca8 <strcat>
	strcat(Frame_PING_A, PING_DATA);
 8004a14:	4939      	ldr	r1, [pc, #228]	; (8004afc <GerarFrames+0x1b8>)
 8004a16:	4832      	ldr	r0, [pc, #200]	; (8004ae0 <GerarFrames+0x19c>)
 8004a18:	f006 f946 	bl	800aca8 <strcat>

	/* FRAME FEEDBACK ON */
	strcat(FrameOn_B, start_byte);
 8004a1c:	4938      	ldr	r1, [pc, #224]	; (8004b00 <GerarFrames+0x1bc>)
 8004a1e:	482e      	ldr	r0, [pc, #184]	; (8004ad8 <GerarFrames+0x194>)
 8004a20:	f006 f942 	bl	800aca8 <strcat>
	strcat(FrameOn_B, ID);
 8004a24:	4930      	ldr	r1, [pc, #192]	; (8004ae8 <GerarFrames+0x1a4>)
 8004a26:	482c      	ldr	r0, [pc, #176]	; (8004ad8 <GerarFrames+0x194>)
 8004a28:	f006 f93e 	bl	800aca8 <strcat>
	strcat(FrameOn_B, DIV);
 8004a2c:	492f      	ldr	r1, [pc, #188]	; (8004aec <GerarFrames+0x1a8>)
 8004a2e:	482a      	ldr	r0, [pc, #168]	; (8004ad8 <GerarFrames+0x194>)
 8004a30:	f006 f93a 	bl	800aca8 <strcat>
	strcat(FrameOn_B, ID_COMMAND);
 8004a34:	492e      	ldr	r1, [pc, #184]	; (8004af0 <GerarFrames+0x1ac>)
 8004a36:	4828      	ldr	r0, [pc, #160]	; (8004ad8 <GerarFrames+0x194>)
 8004a38:	f006 f936 	bl	800aca8 <strcat>
	strcat(FrameOn_B, DIV);
 8004a3c:	492b      	ldr	r1, [pc, #172]	; (8004aec <GerarFrames+0x1a8>)
 8004a3e:	4826      	ldr	r0, [pc, #152]	; (8004ad8 <GerarFrames+0x194>)
 8004a40:	f006 f932 	bl	800aca8 <strcat>
	strcat(FrameOn_B, Confirmation);
 8004a44:	492f      	ldr	r1, [pc, #188]	; (8004b04 <GerarFrames+0x1c0>)
 8004a46:	4824      	ldr	r0, [pc, #144]	; (8004ad8 <GerarFrames+0x194>)
 8004a48:	f006 f92e 	bl	800aca8 <strcat>
	strcat(FrameOn_B, ON_COMMAND);
 8004a4c:	4929      	ldr	r1, [pc, #164]	; (8004af4 <GerarFrames+0x1b0>)
 8004a4e:	4822      	ldr	r0, [pc, #136]	; (8004ad8 <GerarFrames+0x194>)
 8004a50:	f006 f92a 	bl	800aca8 <strcat>
	strcat(FrameOn_B, CHECKSUM_DIV);
 8004a54:	492c      	ldr	r1, [pc, #176]	; (8004b08 <GerarFrames+0x1c4>)
 8004a56:	4820      	ldr	r0, [pc, #128]	; (8004ad8 <GerarFrames+0x194>)
 8004a58:	f006 f926 	bl	800aca8 <strcat>

	/* FRAME FEEDBACK OFF */
	strcat(FrameOff_B, start_byte);
 8004a5c:	4928      	ldr	r1, [pc, #160]	; (8004b00 <GerarFrames+0x1bc>)
 8004a5e:	481f      	ldr	r0, [pc, #124]	; (8004adc <GerarFrames+0x198>)
 8004a60:	f006 f922 	bl	800aca8 <strcat>
	strcat(FrameOff_B, ID);
 8004a64:	4920      	ldr	r1, [pc, #128]	; (8004ae8 <GerarFrames+0x1a4>)
 8004a66:	481d      	ldr	r0, [pc, #116]	; (8004adc <GerarFrames+0x198>)
 8004a68:	f006 f91e 	bl	800aca8 <strcat>
	strcat(FrameOff_B, DIV);
 8004a6c:	491f      	ldr	r1, [pc, #124]	; (8004aec <GerarFrames+0x1a8>)
 8004a6e:	481b      	ldr	r0, [pc, #108]	; (8004adc <GerarFrames+0x198>)
 8004a70:	f006 f91a 	bl	800aca8 <strcat>
	strcat(FrameOff_B, ID_COMMAND);
 8004a74:	491e      	ldr	r1, [pc, #120]	; (8004af0 <GerarFrames+0x1ac>)
 8004a76:	4819      	ldr	r0, [pc, #100]	; (8004adc <GerarFrames+0x198>)
 8004a78:	f006 f916 	bl	800aca8 <strcat>
	strcat(FrameOff_B, DIV);
 8004a7c:	491b      	ldr	r1, [pc, #108]	; (8004aec <GerarFrames+0x1a8>)
 8004a7e:	4817      	ldr	r0, [pc, #92]	; (8004adc <GerarFrames+0x198>)
 8004a80:	f006 f912 	bl	800aca8 <strcat>
	strcat(FrameOff_B, Confirmation);
 8004a84:	491f      	ldr	r1, [pc, #124]	; (8004b04 <GerarFrames+0x1c0>)
 8004a86:	4815      	ldr	r0, [pc, #84]	; (8004adc <GerarFrames+0x198>)
 8004a88:	f006 f90e 	bl	800aca8 <strcat>
	strcat(FrameOff_B, OFF_COMMAND);
 8004a8c:	491a      	ldr	r1, [pc, #104]	; (8004af8 <GerarFrames+0x1b4>)
 8004a8e:	4813      	ldr	r0, [pc, #76]	; (8004adc <GerarFrames+0x198>)
 8004a90:	f006 f90a 	bl	800aca8 <strcat>
	strcat(FrameOff_B, CHECKSUM_DIV);
 8004a94:	491c      	ldr	r1, [pc, #112]	; (8004b08 <GerarFrames+0x1c4>)
 8004a96:	4811      	ldr	r0, [pc, #68]	; (8004adc <GerarFrames+0x198>)
 8004a98:	f006 f906 	bl	800aca8 <strcat>

	/* FRAME FEEDBACK PING (PONG) */
	strcat(Frame_PING_B, start_byte);
 8004a9c:	4918      	ldr	r1, [pc, #96]	; (8004b00 <GerarFrames+0x1bc>)
 8004a9e:	4811      	ldr	r0, [pc, #68]	; (8004ae4 <GerarFrames+0x1a0>)
 8004aa0:	f006 f902 	bl	800aca8 <strcat>
	strcat(Frame_PING_B, ID);
 8004aa4:	4910      	ldr	r1, [pc, #64]	; (8004ae8 <GerarFrames+0x1a4>)
 8004aa6:	480f      	ldr	r0, [pc, #60]	; (8004ae4 <GerarFrames+0x1a0>)
 8004aa8:	f006 f8fe 	bl	800aca8 <strcat>
	strcat(Frame_PING_B, DIV);
 8004aac:	490f      	ldr	r1, [pc, #60]	; (8004aec <GerarFrames+0x1a8>)
 8004aae:	480d      	ldr	r0, [pc, #52]	; (8004ae4 <GerarFrames+0x1a0>)
 8004ab0:	f006 f8fa 	bl	800aca8 <strcat>
	strcat(Frame_PING_B, Confirmation);
 8004ab4:	4913      	ldr	r1, [pc, #76]	; (8004b04 <GerarFrames+0x1c0>)
 8004ab6:	480b      	ldr	r0, [pc, #44]	; (8004ae4 <GerarFrames+0x1a0>)
 8004ab8:	f006 f8f6 	bl	800aca8 <strcat>
	strcat(Frame_PING_B, PING_DATA);
 8004abc:	490f      	ldr	r1, [pc, #60]	; (8004afc <GerarFrames+0x1b8>)
 8004abe:	4809      	ldr	r0, [pc, #36]	; (8004ae4 <GerarFrames+0x1a0>)
 8004ac0:	f006 f8f2 	bl	800aca8 <strcat>
	strcat(Frame_PING_B, CHECKSUM_DIV);
 8004ac4:	4910      	ldr	r1, [pc, #64]	; (8004b08 <GerarFrames+0x1c4>)
 8004ac6:	4807      	ldr	r0, [pc, #28]	; (8004ae4 <GerarFrames+0x1a0>)
 8004ac8:	f006 f8ee 	bl	800aca8 <strcat>

	/* Fim da funcao */
}
 8004acc:	bf00      	nop
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	200006fc 	.word	0x200006fc
 8004ad4:	200006d0 	.word	0x200006d0
 8004ad8:	200004bc 	.word	0x200004bc
 8004adc:	20000c34 	.word	0x20000c34
 8004ae0:	2000053c 	.word	0x2000053c
 8004ae4:	200006a4 	.word	0x200006a4
 8004ae8:	20000000 	.word	0x20000000
 8004aec:	0800fc34 	.word	0x0800fc34
 8004af0:	20000008 	.word	0x20000008
 8004af4:	0800fc2c 	.word	0x0800fc2c
 8004af8:	0800fc30 	.word	0x0800fc30
 8004afc:	0800fc44 	.word	0x0800fc44
 8004b00:	0800fc28 	.word	0x0800fc28
 8004b04:	0800fc38 	.word	0x0800fc38
 8004b08:	0800fc3c 	.word	0x0800fc3c

08004b0c <PreencherBuffer>:
  *
  * @param  MODE: Define qual mensagem enviar, qual frame usar.
  *
  * @retval void
  */
void PreencherBuffer(int MODE){
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]

	/* APAGAR BUFFER e CRC_STR_X */
	strcpy(BUFFER_TRANSMIT, "");
 8004b14:	4b40      	ldr	r3, [pc, #256]	; (8004c18 <PreencherBuffer+0x10c>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]
	strcpy(CRC_STR_X, "");
 8004b1a:	4b40      	ldr	r3, [pc, #256]	; (8004c1c <PreencherBuffer+0x110>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]

	/* Inicializar Checksum em 0 */
	CRC_checksum = 0;
 8004b20:	4b3f      	ldr	r3, [pc, #252]	; (8004c20 <PreencherBuffer+0x114>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	701a      	strb	r2, [r3, #0]
	 *  2-> PING
	 *  3-> BATTERY FAIL
	 *  4-> BATTERY RETURN
	 *  */

	if (MODE == FRAME_ACTUATE_RELAY){
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d104      	bne.n	8004b36 <PreencherBuffer+0x2a>
		strcat(BUFFER_TRANSMIT, FrameOn_B);
 8004b2c:	493d      	ldr	r1, [pc, #244]	; (8004c24 <PreencherBuffer+0x118>)
 8004b2e:	483a      	ldr	r0, [pc, #232]	; (8004c18 <PreencherBuffer+0x10c>)
 8004b30:	f006 f8ba 	bl	800aca8 <strcat>
 8004b34:	e044      	b.n	8004bc0 <PreencherBuffer+0xb4>
	}
	else if (!MODE){
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d104      	bne.n	8004b46 <PreencherBuffer+0x3a>
		strcat(BUFFER_TRANSMIT, FrameOff_B);
 8004b3c:	493a      	ldr	r1, [pc, #232]	; (8004c28 <PreencherBuffer+0x11c>)
 8004b3e:	4836      	ldr	r0, [pc, #216]	; (8004c18 <PreencherBuffer+0x10c>)
 8004b40:	f006 f8b2 	bl	800aca8 <strcat>
 8004b44:	e03c      	b.n	8004bc0 <PreencherBuffer+0xb4>
	}
	else if (MODE == FRAME_PING){
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d104      	bne.n	8004b56 <PreencherBuffer+0x4a>
		strcat(BUFFER_TRANSMIT, Frame_PING_B);
 8004b4c:	4937      	ldr	r1, [pc, #220]	; (8004c2c <PreencherBuffer+0x120>)
 8004b4e:	4832      	ldr	r0, [pc, #200]	; (8004c18 <PreencherBuffer+0x10c>)
 8004b50:	f006 f8aa 	bl	800aca8 <strcat>
 8004b54:	e034      	b.n	8004bc0 <PreencherBuffer+0xb4>
	}
	else if (MODE == FRAME_BATTERY_FAIL || MODE == FRAME_BATTERY_RETURN){
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d002      	beq.n	8004b62 <PreencherBuffer+0x56>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d12e      	bne.n	8004bc0 <PreencherBuffer+0xb4>
		strcat(BUFFER_TRANSMIT, start_byte);
 8004b62:	4933      	ldr	r1, [pc, #204]	; (8004c30 <PreencherBuffer+0x124>)
 8004b64:	482c      	ldr	r0, [pc, #176]	; (8004c18 <PreencherBuffer+0x10c>)
 8004b66:	f006 f89f 	bl	800aca8 <strcat>
		strcat(BUFFER_TRANSMIT, ID);
 8004b6a:	4932      	ldr	r1, [pc, #200]	; (8004c34 <PreencherBuffer+0x128>)
 8004b6c:	482a      	ldr	r0, [pc, #168]	; (8004c18 <PreencherBuffer+0x10c>)
 8004b6e:	f006 f89b 	bl	800aca8 <strcat>
		strcat(BUFFER_TRANSMIT, DIV);
 8004b72:	4931      	ldr	r1, [pc, #196]	; (8004c38 <PreencherBuffer+0x12c>)
 8004b74:	4828      	ldr	r0, [pc, #160]	; (8004c18 <PreencherBuffer+0x10c>)
 8004b76:	f006 f897 	bl	800aca8 <strcat>
		strcat(BUFFER_TRANSMIT, "BT");
 8004b7a:	4827      	ldr	r0, [pc, #156]	; (8004c18 <PreencherBuffer+0x10c>)
 8004b7c:	f7fb fb32 	bl	80001e4 <strlen>
 8004b80:	4603      	mov	r3, r0
 8004b82:	461a      	mov	r2, r3
 8004b84:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <PreencherBuffer+0x10c>)
 8004b86:	4413      	add	r3, r2
 8004b88:	4a2c      	ldr	r2, [pc, #176]	; (8004c3c <PreencherBuffer+0x130>)
 8004b8a:	8811      	ldrh	r1, [r2, #0]
 8004b8c:	7892      	ldrb	r2, [r2, #2]
 8004b8e:	8019      	strh	r1, [r3, #0]
 8004b90:	709a      	strb	r2, [r3, #2]
		strcat(BUFFER_TRANSMIT, DIV);
 8004b92:	4929      	ldr	r1, [pc, #164]	; (8004c38 <PreencherBuffer+0x12c>)
 8004b94:	4820      	ldr	r0, [pc, #128]	; (8004c18 <PreencherBuffer+0x10c>)
 8004b96:	f006 f887 	bl	800aca8 <strcat>
		if (MODE == FRAME_BATTERY_FAIL){
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d104      	bne.n	8004baa <PreencherBuffer+0x9e>
			strcat(BUFFER_TRANSMIT, OFF_COMMAND);
 8004ba0:	4927      	ldr	r1, [pc, #156]	; (8004c40 <PreencherBuffer+0x134>)
 8004ba2:	481d      	ldr	r0, [pc, #116]	; (8004c18 <PreencherBuffer+0x10c>)
 8004ba4:	f006 f880 	bl	800aca8 <strcat>
 8004ba8:	e006      	b.n	8004bb8 <PreencherBuffer+0xac>
		}
		else if (MODE == FRAME_BATTERY_RETURN){
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d103      	bne.n	8004bb8 <PreencherBuffer+0xac>
			strcat(BUFFER_TRANSMIT, ON_COMMAND);
 8004bb0:	4924      	ldr	r1, [pc, #144]	; (8004c44 <PreencherBuffer+0x138>)
 8004bb2:	4819      	ldr	r0, [pc, #100]	; (8004c18 <PreencherBuffer+0x10c>)
 8004bb4:	f006 f878 	bl	800aca8 <strcat>
		}
		strcat(BUFFER_TRANSMIT, CHECKSUM_DIV);
 8004bb8:	4923      	ldr	r1, [pc, #140]	; (8004c48 <PreencherBuffer+0x13c>)
 8004bba:	4817      	ldr	r0, [pc, #92]	; (8004c18 <PreencherBuffer+0x10c>)
 8004bbc:	f006 f874 	bl	800aca8 <strcat>
	}

	/* CALCULO DO CHECKSUM */
	for (int index = 1; index < strlen(BUFFER_TRANSMIT)-1; index++){
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e00c      	b.n	8004be0 <PreencherBuffer+0xd4>
		CRC_checksum = CRC_checksum ^ BUFFER_TRANSMIT[index];
 8004bc6:	4a14      	ldr	r2, [pc, #80]	; (8004c18 <PreencherBuffer+0x10c>)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	781a      	ldrb	r2, [r3, #0]
 8004bce:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <PreencherBuffer+0x114>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	4053      	eors	r3, r2
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <PreencherBuffer+0x114>)
 8004bd8:	701a      	strb	r2, [r3, #0]
	for (int index = 1; index < strlen(BUFFER_TRANSMIT)-1; index++){
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	480d      	ldr	r0, [pc, #52]	; (8004c18 <PreencherBuffer+0x10c>)
 8004be2:	f7fb faff 	bl	80001e4 <strlen>
 8004be6:	4603      	mov	r3, r0
 8004be8:	1e5a      	subs	r2, r3, #1
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d8ea      	bhi.n	8004bc6 <PreencherBuffer+0xba>
	}

	/* PASSAR A VARIAVEL INT PARA CHAR */
	sprintf(CRC_STR_X, "%X", CRC_checksum);
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <PreencherBuffer+0x114>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4915      	ldr	r1, [pc, #84]	; (8004c4c <PreencherBuffer+0x140>)
 8004bf8:	4808      	ldr	r0, [pc, #32]	; (8004c1c <PreencherBuffer+0x110>)
 8004bfa:	f006 f835 	bl	800ac68 <siprintf>

	/* ADICIONAR CRC e END BYTE PARA ENVIAR */
	strcat(BUFFER_TRANSMIT, CRC_STR_X);
 8004bfe:	4907      	ldr	r1, [pc, #28]	; (8004c1c <PreencherBuffer+0x110>)
 8004c00:	4805      	ldr	r0, [pc, #20]	; (8004c18 <PreencherBuffer+0x10c>)
 8004c02:	f006 f851 	bl	800aca8 <strcat>
	strcat(BUFFER_TRANSMIT, end_byte);
 8004c06:	4912      	ldr	r1, [pc, #72]	; (8004c50 <PreencherBuffer+0x144>)
 8004c08:	4803      	ldr	r0, [pc, #12]	; (8004c18 <PreencherBuffer+0x10c>)
 8004c0a:	f006 f84d 	bl	800aca8 <strcat>

	/* Fim da funcao */
}
 8004c0e:	bf00      	nop
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20000adc 	.word	0x20000adc
 8004c1c:	200007a8 	.word	0x200007a8
 8004c20:	20000263 	.word	0x20000263
 8004c24:	200004bc 	.word	0x200004bc
 8004c28:	20000c34 	.word	0x20000c34
 8004c2c:	200006a4 	.word	0x200006a4
 8004c30:	0800fc28 	.word	0x0800fc28
 8004c34:	20000000 	.word	0x20000000
 8004c38:	0800fc34 	.word	0x0800fc34
 8004c3c:	0800fba0 	.word	0x0800fba0
 8004c40:	0800fc30 	.word	0x0800fc30
 8004c44:	0800fc2c 	.word	0x0800fc2c
 8004c48:	0800fc3c 	.word	0x0800fc3c
 8004c4c:	0800fba4 	.word	0x0800fba4
 8004c50:	0800fc40 	.word	0x0800fc40

08004c54 <VerificarComando>:
  *
  * @param  none
  *
  * @retval void
  */
void VerificarComando(){
 8004c54:	b5b0      	push	{r4, r5, r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
	 * ACTIVATE_PreencherBuffer: Ativa a
	 * chamada da funcao PrencherBuffer
	 * apenas quando necessario.
	 * */

	if (feedback_multiple){
 8004c5a:	4b6d      	ldr	r3, [pc, #436]	; (8004e10 <VerificarComando+0x1bc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <VerificarComando+0x24>
		HAL_UART_Transmit(&huart3, BUFFER_TRANSMIT, strlen(BUFFER_TRANSMIT),20);
 8004c62:	486c      	ldr	r0, [pc, #432]	; (8004e14 <VerificarComando+0x1c0>)
 8004c64:	f7fb fabe 	bl	80001e4 <strlen>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	2314      	movs	r3, #20
 8004c6e:	4969      	ldr	r1, [pc, #420]	; (8004e14 <VerificarComando+0x1c0>)
 8004c70:	4869      	ldr	r0, [pc, #420]	; (8004e18 <VerificarComando+0x1c4>)
 8004c72:	f004 f9b1 	bl	8008fd8 <HAL_UART_Transmit>
 8004c76:	e0c8      	b.n	8004e0a <VerificarComando+0x1b6>
		return;
	}

	char* BUFFER_COMPARE;
	int COMPARE_CHECKSUM = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]
	int CRC_RECEIVE_INT = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	61bb      	str	r3, [r7, #24]
	char* CRC_RECEIVED;
	char CRC_RECEIVE_STR[8];
	static int ACTIVATE_PreencherBuffer = 1;

	BUFFER_COMPARE = BUFFER_RECEIVE;
 8004c80:	4b66      	ldr	r3, [pc, #408]	; (8004e1c <VerificarComando+0x1c8>)
 8004c82:	61fb      	str	r3, [r7, #28]

	/* CAPTURAR BUFFER ATE "*" */
	BUFFER_COMPARE = strtok(BUFFER_COMPARE, CHECKSUM_DIV);
 8004c84:	4966      	ldr	r1, [pc, #408]	; (8004e20 <VerificarComando+0x1cc>)
 8004c86:	69f8      	ldr	r0, [r7, #28]
 8004c88:	f006 fe68 	bl	800b95c <strtok>
 8004c8c:	61f8      	str	r0, [r7, #28]

	/* Se estiver vazio, apagar */
	if (BUFFER_COMPARE == NULL){
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <VerificarComando+0x44>
		BUFFER_COMPARE = "";
 8004c94:	4b63      	ldr	r3, [pc, #396]	; (8004e24 <VerificarComando+0x1d0>)
 8004c96:	61fb      	str	r3, [r7, #28]
	}

	/* CAPTURAR DADOS APOS "*" */
	CRC_RECEIVED = strtok(NULL, "");
 8004c98:	4962      	ldr	r1, [pc, #392]	; (8004e24 <VerificarComando+0x1d0>)
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f006 fe5e 	bl	800b95c <strtok>
 8004ca0:	6178      	str	r0, [r7, #20]

	if (CRC_RECEIVED == NULL){
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <VerificarComando+0x58>
		CRC_RECEIVED = "";
 8004ca8:	4b5e      	ldr	r3, [pc, #376]	; (8004e24 <VerificarComando+0x1d0>)
 8004caa:	617b      	str	r3, [r7, #20]
	}

	/* SE O PRIMEIRO CARACTERE E ZERO, O SEGUNDO PASSA A SER O PRIMEIRO */
	if(strncmp(BUFFER_COMPARE, "0", 1) == 0){
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	781a      	ldrb	r2, [r3, #0]
 8004cb0:	4b5d      	ldr	r3, [pc, #372]	; (8004e28 <VerificarComando+0x1d4>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d105      	bne.n	8004cc6 <VerificarComando+0x72>
		strcpy(BUFFER_COMPARE, &(BUFFER_COMPARE[1]));
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	69f8      	ldr	r0, [r7, #28]
 8004cc2:	f006 f800 	bl	800acc6 <strcpy>
	}

	/* CALCULO DO CHECKSUM - CRC */
	for (int index = 0; index < strlen(BUFFER_COMPARE); index++){
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	e00a      	b.n	8004ce2 <VerificarComando+0x8e>
		CRC_RECEIVE_INT = CRC_RECEIVE_INT ^ BUFFER_COMPARE[index];
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	4053      	eors	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
	for (int index = 0; index < strlen(BUFFER_COMPARE); index++){
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	69f8      	ldr	r0, [r7, #28]
 8004ce4:	f7fb fa7e 	bl	80001e4 <strlen>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d8ed      	bhi.n	8004ccc <VerificarComando+0x78>
	}

	/* INT PARA CHAR */
	sprintf(CRC_RECEIVE_STR, "%X", CRC_RECEIVE_INT);
 8004cf0:	1d3b      	adds	r3, r7, #4
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	494d      	ldr	r1, [pc, #308]	; (8004e2c <VerificarComando+0x1d8>)
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f005 ffb6 	bl	800ac68 <siprintf>

	/* COMPARAR O CHECKSUM RECEBIDO COM O CALCULADO */
	COMPARE_CHECKSUM = strcmp(CRC_RECEIVED, CRC_RECEIVE_STR);
 8004cfc:	1d3b      	adds	r3, r7, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6978      	ldr	r0, [r7, #20]
 8004d02:	f7fb fa65 	bl	80001d0 <strcmp>
 8004d06:	60f8      	str	r0, [r7, #12]

	if (COMPARE_CHECKSUM == 0 && CRC_RECEIVED != ""){
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d162      	bne.n	8004dd4 <VerificarComando+0x180>
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	4a44      	ldr	r2, [pc, #272]	; (8004e24 <VerificarComando+0x1d0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d05e      	beq.n	8004dd4 <VerificarComando+0x180>
		/* Apenas valida se os Checksum forem iguais */
		if (strcmp(BUFFER_COMPARE, FrameOff_A) == 0){
 8004d16:	4946      	ldr	r1, [pc, #280]	; (8004e30 <VerificarComando+0x1dc>)
 8004d18:	69f8      	ldr	r0, [r7, #28]
 8004d1a:	f7fb fa59 	bl	80001d0 <strcmp>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d108      	bne.n	8004d36 <VerificarComando+0xe2>
			/* Frame Off - Comando desacionar rele */
			BREAK_STATUS = 0;
 8004d24:	4b43      	ldr	r3, [pc, #268]	; (8004e34 <VerificarComando+0x1e0>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
			Acionamento();
 8004d2a:	f7fe fa07 	bl	800313c <Acionamento>
			ACTIVATE_PreencherBuffer = 1;
 8004d2e:	4b42      	ldr	r3, [pc, #264]	; (8004e38 <VerificarComando+0x1e4>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	e023      	b.n	8004d7e <VerificarComando+0x12a>
		}
		else if (strcmp(BUFFER_COMPARE, FrameOn_A) == 0){
 8004d36:	4941      	ldr	r1, [pc, #260]	; (8004e3c <VerificarComando+0x1e8>)
 8004d38:	69f8      	ldr	r0, [r7, #28]
 8004d3a:	f7fb fa49 	bl	80001d0 <strcmp>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d108      	bne.n	8004d56 <VerificarComando+0x102>
			/* Frame On - Comando acionar rele */
			BREAK_STATUS = 1;
 8004d44:	4b3b      	ldr	r3, [pc, #236]	; (8004e34 <VerificarComando+0x1e0>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
			Acionamento();
 8004d4a:	f7fe f9f7 	bl	800313c <Acionamento>
			ACTIVATE_PreencherBuffer = 1;
 8004d4e:	4b3a      	ldr	r3, [pc, #232]	; (8004e38 <VerificarComando+0x1e4>)
 8004d50:	2201      	movs	r2, #1
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	e013      	b.n	8004d7e <VerificarComando+0x12a>
		}
		else if (strcmp(BUFFER_COMPARE, Frame_PING_A) == 0){
 8004d56:	493a      	ldr	r1, [pc, #232]	; (8004e40 <VerificarComando+0x1ec>)
 8004d58:	69f8      	ldr	r0, [r7, #28]
 8004d5a:	f7fb fa39 	bl	80001d0 <strcmp>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10c      	bne.n	8004d7e <VerificarComando+0x12a>
			FLAG_XBEE_PING = 0;
 8004d64:	4b37      	ldr	r3, [pc, #220]	; (8004e44 <VerificarComando+0x1f0>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
			if (ACTIVATE_PreencherBuffer){
 8004d6a:	4b33      	ldr	r3, [pc, #204]	; (8004e38 <VerificarComando+0x1e4>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <VerificarComando+0x12a>
				PreencherBuffer(FRAME_PING);
 8004d72:	2002      	movs	r0, #2
 8004d74:	f7ff feca 	bl	8004b0c <PreencherBuffer>

				/* Nao chamar PreencherBuffer novamente para PING */
				ACTIVATE_PreencherBuffer = 0;
 8004d78:	4b2f      	ldr	r3, [pc, #188]	; (8004e38 <VerificarComando+0x1e4>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]

		}
		/* Enviar para Transmissor */
		//HAL_UART_Transmit_IT(&huart3, BUFFER_TRANSMIT, strlen(BUFFER_TRANSMIT));

		if (!feedback_multiple){
 8004d7e:	4b24      	ldr	r3, [pc, #144]	; (8004e10 <VerificarComando+0x1bc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d126      	bne.n	8004dd4 <VerificarComando+0x180>
			if (HAL_UART_Transmit(&huart3, BUFFER_TRANSMIT, strlen(BUFFER_TRANSMIT),20) == HAL_OK)
 8004d86:	4823      	ldr	r0, [pc, #140]	; (8004e14 <VerificarComando+0x1c0>)
 8004d88:	f7fb fa2c 	bl	80001e4 <strlen>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	2314      	movs	r3, #20
 8004d92:	4920      	ldr	r1, [pc, #128]	; (8004e14 <VerificarComando+0x1c0>)
 8004d94:	4820      	ldr	r0, [pc, #128]	; (8004e18 <VerificarComando+0x1c4>)
 8004d96:	f004 f91f 	bl	8008fd8 <HAL_UART_Transmit>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d119      	bne.n	8004dd4 <VerificarComando+0x180>
				if (ACTIVATE_PreencherBuffer == 1){
 8004da0:	4b25      	ldr	r3, [pc, #148]	; (8004e38 <VerificarComando+0x1e4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d115      	bne.n	8004dd4 <VerificarComando+0x180>
					strcat(BUFFER_SERIAL, "\n\rFeedback enviado. \r\n");
 8004da8:	4827      	ldr	r0, [pc, #156]	; (8004e48 <VerificarComando+0x1f4>)
 8004daa:	f7fb fa1b 	bl	80001e4 <strlen>
 8004dae:	4603      	mov	r3, r0
 8004db0:	461a      	mov	r2, r3
 8004db2:	4b25      	ldr	r3, [pc, #148]	; (8004e48 <VerificarComando+0x1f4>)
 8004db4:	4413      	add	r3, r2
 8004db6:	4a25      	ldr	r2, [pc, #148]	; (8004e4c <VerificarComando+0x1f8>)
 8004db8:	461c      	mov	r4, r3
 8004dba:	4615      	mov	r5, r2
 8004dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dbe:	6020      	str	r0, [r4, #0]
 8004dc0:	6061      	str	r1, [r4, #4]
 8004dc2:	60a2      	str	r2, [r4, #8]
 8004dc4:	60e3      	str	r3, [r4, #12]
 8004dc6:	6828      	ldr	r0, [r5, #0]
 8004dc8:	6120      	str	r0, [r4, #16]
 8004dca:	88ab      	ldrh	r3, [r5, #4]
 8004dcc:	79aa      	ldrb	r2, [r5, #6]
 8004dce:	82a3      	strh	r3, [r4, #20]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	75a3      	strb	r3, [r4, #22]
		}

		//HAL_UART_Transmit_DMA(&huart3, BUFFER_TRANSMIT, strlen(BUFFER_TRANSMIT));
	}
	/* LIMPAR TODOS CHAR E POINTERS (redundancia) */
	memset(BUFFER_RECEIVE, 0, strlen(BUFFER_RECEIVE));
 8004dd4:	4811      	ldr	r0, [pc, #68]	; (8004e1c <VerificarComando+0x1c8>)
 8004dd6:	f7fb fa05 	bl	80001e4 <strlen>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	461a      	mov	r2, r3
 8004dde:	2100      	movs	r1, #0
 8004de0:	480e      	ldr	r0, [pc, #56]	; (8004e1c <VerificarComando+0x1c8>)
 8004de2:	f005 ff39 	bl	800ac58 <memset>
	memset(CRC_RECEIVED, 0, strlen(CRC_RECEIVED));
 8004de6:	6978      	ldr	r0, [r7, #20]
 8004de8:	f7fb f9fc 	bl	80001e4 <strlen>
 8004dec:	4603      	mov	r3, r0
 8004dee:	461a      	mov	r2, r3
 8004df0:	2100      	movs	r1, #0
 8004df2:	6978      	ldr	r0, [r7, #20]
 8004df4:	f005 ff30 	bl	800ac58 <memset>
	memset(BUFFER_COMPARE, 0, strlen(BUFFER_COMPARE));
 8004df8:	69f8      	ldr	r0, [r7, #28]
 8004dfa:	f7fb f9f3 	bl	80001e4 <strlen>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	461a      	mov	r2, r3
 8004e02:	2100      	movs	r1, #0
 8004e04:	69f8      	ldr	r0, [r7, #28]
 8004e06:	f005 ff27 	bl	800ac58 <memset>

	/* Fim da funcao */
}
 8004e0a:	3720      	adds	r7, #32
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e10:	200002a8 	.word	0x200002a8
 8004e14:	20000adc 	.word	0x20000adc
 8004e18:	20000434 	.word	0x20000434
 8004e1c:	200002e4 	.word	0x200002e4
 8004e20:	0800fc3c 	.word	0x0800fc3c
 8004e24:	0800fba8 	.word	0x0800fba8
 8004e28:	0800fbac 	.word	0x0800fbac
 8004e2c:	0800fba4 	.word	0x0800fba4
 8004e30:	200006d0 	.word	0x200006d0
 8004e34:	20000264 	.word	0x20000264
 8004e38:	2000003c 	.word	0x2000003c
 8004e3c:	200006fc 	.word	0x200006fc
 8004e40:	2000053c 	.word	0x2000053c
 8004e44:	2000027c 	.word	0x2000027c
 8004e48:	200007b0 	.word	0x200007b0
 8004e4c:	0800fbb0 	.word	0x0800fbb0

08004e50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e56:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <HAL_MspInit+0x44>)
 8004e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5a:	4a0e      	ldr	r2, [pc, #56]	; (8004e94 <HAL_MspInit+0x44>)
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	6613      	str	r3, [r2, #96]	; 0x60
 8004e62:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <HAL_MspInit+0x44>)
 8004e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	607b      	str	r3, [r7, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e6e:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <HAL_MspInit+0x44>)
 8004e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e72:	4a08      	ldr	r2, [pc, #32]	; (8004e94 <HAL_MspInit+0x44>)
 8004e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e78:	6593      	str	r3, [r2, #88]	; 0x58
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <HAL_MspInit+0x44>)
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40021000 	.word	0x40021000

08004e98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <HAL_TIM_PWM_MspInit+0x78>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d114      	bne.n	8004ed4 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004eaa:	4b1a      	ldr	r3, [pc, #104]	; (8004f14 <HAL_TIM_PWM_MspInit+0x7c>)
 8004eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eae:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <HAL_TIM_PWM_MspInit+0x7c>)
 8004eb0:	f043 0302 	orr.w	r3, r3, #2
 8004eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8004eb6:	4b17      	ldr	r3, [pc, #92]	; (8004f14 <HAL_TIM_PWM_MspInit+0x7c>)
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	201d      	movs	r0, #29
 8004ec8:	f000 ff07 	bl	8005cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004ecc:	201d      	movs	r0, #29
 8004ece:	f000 ff20 	bl	8005d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004ed2:	e018      	b.n	8004f06 <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM4)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a0f      	ldr	r2, [pc, #60]	; (8004f18 <HAL_TIM_PWM_MspInit+0x80>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d113      	bne.n	8004f06 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ede:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <HAL_TIM_PWM_MspInit+0x7c>)
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee2:	4a0c      	ldr	r2, [pc, #48]	; (8004f14 <HAL_TIM_PWM_MspInit+0x7c>)
 8004ee4:	f043 0304 	orr.w	r3, r3, #4
 8004ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <HAL_TIM_PWM_MspInit+0x7c>)
 8004eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	60bb      	str	r3, [r7, #8]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2100      	movs	r1, #0
 8004efa:	201e      	movs	r0, #30
 8004efc:	f000 feed 	bl	8005cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004f00:	201e      	movs	r0, #30
 8004f02:	f000 ff06 	bl	8005d12 <HAL_NVIC_EnableIRQ>
}
 8004f06:	bf00      	nop
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40000800 	.word	0x40000800

08004f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a0d      	ldr	r2, [pc, #52]	; (8004f60 <HAL_TIM_Base_MspInit+0x44>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d113      	bne.n	8004f56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <HAL_TIM_Base_MspInit+0x48>)
 8004f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f32:	4a0c      	ldr	r2, [pc, #48]	; (8004f64 <HAL_TIM_Base_MspInit+0x48>)
 8004f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f38:	6613      	str	r3, [r2, #96]	; 0x60
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <HAL_TIM_Base_MspInit+0x48>)
 8004f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004f46:	2200      	movs	r2, #0
 8004f48:	2100      	movs	r1, #0
 8004f4a:	2019      	movs	r0, #25
 8004f4c:	f000 fec5 	bl	8005cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004f50:	2019      	movs	r0, #25
 8004f52:	f000 fede 	bl	8005d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004f56:	bf00      	nop
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40014400 	.word	0x40014400
 8004f64:	40021000 	.word	0x40021000

08004f68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08a      	sub	sp, #40	; 0x28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f70:	f107 0314 	add.w	r3, r7, #20
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	605a      	str	r2, [r3, #4]
 8004f7a:	609a      	str	r2, [r3, #8]
 8004f7c:	60da      	str	r2, [r3, #12]
 8004f7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a22      	ldr	r2, [pc, #136]	; (8005010 <HAL_TIM_MspPostInit+0xa8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d11c      	bne.n	8004fc4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f8a:	4b22      	ldr	r3, [pc, #136]	; (8005014 <HAL_TIM_MspPostInit+0xac>)
 8004f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8e:	4a21      	ldr	r2, [pc, #132]	; (8005014 <HAL_TIM_MspPostInit+0xac>)
 8004f90:	f043 0302 	orr.w	r3, r3, #2
 8004f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f96:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <HAL_TIM_MspPostInit+0xac>)
 8004f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = FE_STM_Pin|AC_STM_Pin;
 8004fa2:	2330      	movs	r3, #48	; 0x30
 8004fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fb6:	f107 0314 	add.w	r3, r7, #20
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4816      	ldr	r0, [pc, #88]	; (8005018 <HAL_TIM_MspPostInit+0xb0>)
 8004fbe:	f001 fa01 	bl	80063c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004fc2:	e020      	b.n	8005006 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a14      	ldr	r2, [pc, #80]	; (800501c <HAL_TIM_MspPostInit+0xb4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d11b      	bne.n	8005006 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fce:	4b11      	ldr	r3, [pc, #68]	; (8005014 <HAL_TIM_MspPostInit+0xac>)
 8004fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd2:	4a10      	ldr	r2, [pc, #64]	; (8005014 <HAL_TIM_MspPostInit+0xac>)
 8004fd4:	f043 0302 	orr.w	r3, r3, #2
 8004fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fda:	4b0e      	ldr	r3, [pc, #56]	; (8005014 <HAL_TIM_MspPostInit+0xac>)
 8004fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FR_STM_Pin;
 8004fe6:	2340      	movs	r3, #64	; 0x40
 8004fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fea:	2302      	movs	r3, #2
 8004fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FR_STM_GPIO_Port, &GPIO_InitStruct);
 8004ffa:	f107 0314 	add.w	r3, r7, #20
 8004ffe:	4619      	mov	r1, r3
 8005000:	4805      	ldr	r0, [pc, #20]	; (8005018 <HAL_TIM_MspPostInit+0xb0>)
 8005002:	f001 f9df 	bl	80063c4 <HAL_GPIO_Init>
}
 8005006:	bf00      	nop
 8005008:	3728      	adds	r7, #40	; 0x28
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40000400 	.word	0x40000400
 8005014:	40021000 	.word	0x40021000
 8005018:	48000400 	.word	0x48000400
 800501c:	40000800 	.word	0x40000800

08005020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b0ae      	sub	sp, #184	; 0xb8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005028:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	605a      	str	r2, [r3, #4]
 8005032:	609a      	str	r2, [r3, #8]
 8005034:	60da      	str	r2, [r3, #12]
 8005036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005038:	f107 031c 	add.w	r3, r7, #28
 800503c:	2288      	movs	r2, #136	; 0x88
 800503e:	2100      	movs	r1, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f005 fe09 	bl	800ac58 <memset>
  if(huart->Instance==UART4)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a4a      	ldr	r2, [pc, #296]	; (8005174 <HAL_UART_MspInit+0x154>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d144      	bne.n	80050da <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005050:	2308      	movs	r3, #8
 8005052:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005054:	2300      	movs	r3, #0
 8005056:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005058:	f107 031c 	add.w	r3, r7, #28
 800505c:	4618      	mov	r0, r3
 800505e:	f002 f9f3 	bl	8007448 <HAL_RCCEx_PeriphCLKConfig>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005068:	f7ff fc66 	bl	8004938 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800506c:	4b42      	ldr	r3, [pc, #264]	; (8005178 <HAL_UART_MspInit+0x158>)
 800506e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005070:	4a41      	ldr	r2, [pc, #260]	; (8005178 <HAL_UART_MspInit+0x158>)
 8005072:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005076:	6593      	str	r3, [r2, #88]	; 0x58
 8005078:	4b3f      	ldr	r3, [pc, #252]	; (8005178 <HAL_UART_MspInit+0x158>)
 800507a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005084:	4b3c      	ldr	r3, [pc, #240]	; (8005178 <HAL_UART_MspInit+0x158>)
 8005086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005088:	4a3b      	ldr	r2, [pc, #236]	; (8005178 <HAL_UART_MspInit+0x158>)
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005090:	4b39      	ldr	r3, [pc, #228]	; (8005178 <HAL_UART_MspInit+0x158>)
 8005092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800509c:	2303      	movs	r3, #3
 800509e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a2:	2302      	movs	r3, #2
 80050a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a8:	2300      	movs	r3, #0
 80050aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ae:	2303      	movs	r3, #3
 80050b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80050b4:	2308      	movs	r3, #8
 80050b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80050be:	4619      	mov	r1, r3
 80050c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050c4:	f001 f97e 	bl	80063c4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80050c8:	2200      	movs	r2, #0
 80050ca:	2100      	movs	r1, #0
 80050cc:	2034      	movs	r0, #52	; 0x34
 80050ce:	f000 fe04 	bl	8005cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80050d2:	2034      	movs	r0, #52	; 0x34
 80050d4:	f000 fe1d 	bl	8005d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80050d8:	e047      	b.n	800516a <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART3)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a27      	ldr	r2, [pc, #156]	; (800517c <HAL_UART_MspInit+0x15c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d142      	bne.n	800516a <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80050e4:	2304      	movs	r3, #4
 80050e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80050e8:	2300      	movs	r3, #0
 80050ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050ec:	f107 031c 	add.w	r3, r7, #28
 80050f0:	4618      	mov	r0, r3
 80050f2:	f002 f9a9 	bl	8007448 <HAL_RCCEx_PeriphCLKConfig>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80050fc:	f7ff fc1c 	bl	8004938 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005100:	4b1d      	ldr	r3, [pc, #116]	; (8005178 <HAL_UART_MspInit+0x158>)
 8005102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005104:	4a1c      	ldr	r2, [pc, #112]	; (8005178 <HAL_UART_MspInit+0x158>)
 8005106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800510a:	6593      	str	r3, [r2, #88]	; 0x58
 800510c:	4b1a      	ldr	r3, [pc, #104]	; (8005178 <HAL_UART_MspInit+0x158>)
 800510e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005118:	4b17      	ldr	r3, [pc, #92]	; (8005178 <HAL_UART_MspInit+0x158>)
 800511a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511c:	4a16      	ldr	r2, [pc, #88]	; (8005178 <HAL_UART_MspInit+0x158>)
 800511e:	f043 0304 	orr.w	r3, r3, #4
 8005122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005124:	4b14      	ldr	r3, [pc, #80]	; (8005178 <HAL_UART_MspInit+0x158>)
 8005126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005130:	2330      	movs	r3, #48	; 0x30
 8005132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005136:	2302      	movs	r3, #2
 8005138:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800513c:	2300      	movs	r3, #0
 800513e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005142:	2303      	movs	r3, #3
 8005144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005148:	2307      	movs	r3, #7
 800514a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800514e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005152:	4619      	mov	r1, r3
 8005154:	480a      	ldr	r0, [pc, #40]	; (8005180 <HAL_UART_MspInit+0x160>)
 8005156:	f001 f935 	bl	80063c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800515a:	2200      	movs	r2, #0
 800515c:	2100      	movs	r1, #0
 800515e:	2027      	movs	r0, #39	; 0x27
 8005160:	f000 fdbb 	bl	8005cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005164:	2027      	movs	r0, #39	; 0x27
 8005166:	f000 fdd4 	bl	8005d12 <HAL_NVIC_EnableIRQ>
}
 800516a:	bf00      	nop
 800516c:	37b8      	adds	r7, #184	; 0xb8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	40004c00 	.word	0x40004c00
 8005178:	40021000 	.word	0x40021000
 800517c:	40004800 	.word	0x40004800
 8005180:	48000800 	.word	0x48000800

08005184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005188:	e7fe      	b.n	8005188 <NMI_Handler+0x4>

0800518a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800518a:	b480      	push	{r7}
 800518c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800518e:	e7fe      	b.n	800518e <HardFault_Handler+0x4>

08005190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005194:	e7fe      	b.n	8005194 <MemManage_Handler+0x4>

08005196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005196:	b480      	push	{r7}
 8005198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800519a:	e7fe      	b.n	800519a <BusFault_Handler+0x4>

0800519c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051a0:	e7fe      	b.n	80051a0 <UsageFault_Handler+0x4>

080051a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051a2:	b480      	push	{r7}
 80051a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051a6:	bf00      	nop
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051b4:	bf00      	nop
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051be:	b480      	push	{r7}
 80051c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051c2:	bf00      	nop
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051d0:	f000 fc94 	bl	8005afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051d4:	bf00      	nop
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80051dc:	2001      	movs	r0, #1
 80051de:	f001 facb 	bl	8006778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80051e2:	bf00      	nop
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80051ea:	2002      	movs	r0, #2
 80051ec:	f001 fac4 	bl	8006778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80051f0:	bf00      	nop
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80051f8:	2004      	movs	r0, #4
 80051fa:	f001 fabd 	bl	8006778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80051fe:	bf00      	nop
 8005200:	bd80      	pop	{r7, pc}

08005202 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005206:	2008      	movs	r0, #8
 8005208:	f001 fab6 	bl	8006778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800520c:	bf00      	nop
 800520e:	bd80      	pop	{r7, pc}

08005210 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005214:	2080      	movs	r0, #128	; 0x80
 8005216:	f001 faaf 	bl	8006778 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800521a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800521e:	f001 faab 	bl	8006778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005222:	bf00      	nop
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800522c:	4802      	ldr	r0, [pc, #8]	; (8005238 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800522e:	f002 ffed 	bl	800820c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000bdc 	.word	0x20000bdc

0800523c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005240:	4802      	ldr	r0, [pc, #8]	; (800524c <TIM3_IRQHandler+0x10>)
 8005242:	f002 ffe3 	bl	800820c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005246:	bf00      	nop
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	200004ec 	.word	0x200004ec

08005250 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005254:	4802      	ldr	r0, [pc, #8]	; (8005260 <TIM4_IRQHandler+0x10>)
 8005256:	f002 ffd9 	bl	800820c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800525a:	bf00      	nop
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	200003e4 	.word	0x200003e4

08005264 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005268:	4802      	ldr	r0, [pc, #8]	; (8005274 <USART3_IRQHandler+0x10>)
 800526a:	f004 f9a7 	bl	80095bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800526e:	bf00      	nop
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20000434 	.word	0x20000434

08005278 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800527c:	4802      	ldr	r0, [pc, #8]	; (8005288 <UART4_IRQHandler+0x10>)
 800527e:	f004 f99d 	bl	80095bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005282:	bf00      	nop
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	2000071c 	.word	0x2000071c

0800528c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
	return 1;
 8005290:	2301      	movs	r3, #1
}
 8005292:	4618      	mov	r0, r3
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <_kill>:

int _kill(int pid, int sig)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80052a6:	f005 fc85 	bl	800abb4 <__errno>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2216      	movs	r2, #22
 80052ae:	601a      	str	r2, [r3, #0]
	return -1;
 80052b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <_exit>:

void _exit (int status)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80052c4:	f04f 31ff 	mov.w	r1, #4294967295
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff ffe7 	bl	800529c <_kill>
	while (1) {}		/* Make sure we hang here */
 80052ce:	e7fe      	b.n	80052ce <_exit+0x12>

080052d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052dc:	2300      	movs	r3, #0
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	e00a      	b.n	80052f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80052e2:	f3af 8000 	nop.w
 80052e6:	4601      	mov	r1, r0
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	60ba      	str	r2, [r7, #8]
 80052ee:	b2ca      	uxtb	r2, r1
 80052f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	3301      	adds	r3, #1
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	dbf0      	blt.n	80052e2 <_read+0x12>
	}

return len;
 8005300:	687b      	ldr	r3, [r7, #4]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b086      	sub	sp, #24
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	e009      	b.n	8005330 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	60ba      	str	r2, [r7, #8]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	3301      	adds	r3, #1
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	429a      	cmp	r2, r3
 8005336:	dbf1      	blt.n	800531c <_write+0x12>
	}
	return len;
 8005338:	687b      	ldr	r3, [r7, #4]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <_close>:

int _close(int file)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
	return -1;
 800534a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800536a:	605a      	str	r2, [r3, #4]
	return 0;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <_isatty>:

int _isatty(int file)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
	return 1;
 8005382:	2301      	movs	r3, #1
}
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
	return 0;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
	...

080053ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053b4:	4a14      	ldr	r2, [pc, #80]	; (8005408 <_sbrk+0x5c>)
 80053b6:	4b15      	ldr	r3, [pc, #84]	; (800540c <_sbrk+0x60>)
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053c0:	4b13      	ldr	r3, [pc, #76]	; (8005410 <_sbrk+0x64>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d102      	bne.n	80053ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053c8:	4b11      	ldr	r3, [pc, #68]	; (8005410 <_sbrk+0x64>)
 80053ca:	4a12      	ldr	r2, [pc, #72]	; (8005414 <_sbrk+0x68>)
 80053cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053ce:	4b10      	ldr	r3, [pc, #64]	; (8005410 <_sbrk+0x64>)
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4413      	add	r3, r2
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d207      	bcs.n	80053ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053dc:	f005 fbea 	bl	800abb4 <__errno>
 80053e0:	4603      	mov	r3, r0
 80053e2:	220c      	movs	r2, #12
 80053e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053e6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ea:	e009      	b.n	8005400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053ec:	4b08      	ldr	r3, [pc, #32]	; (8005410 <_sbrk+0x64>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053f2:	4b07      	ldr	r3, [pc, #28]	; (8005410 <_sbrk+0x64>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4413      	add	r3, r2
 80053fa:	4a05      	ldr	r2, [pc, #20]	; (8005410 <_sbrk+0x64>)
 80053fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053fe:	68fb      	ldr	r3, [r7, #12]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	20018000 	.word	0x20018000
 800540c:	00000400 	.word	0x00000400
 8005410:	200002d4 	.word	0x200002d4
 8005414:	20000c68 	.word	0x20000c68

08005418 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <SystemInit+0x20>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005422:	4a05      	ldr	r2, [pc, #20]	; (8005438 <SystemInit+0x20>)
 8005424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800542c:	bf00      	nop
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	e000ed00 	.word	0xe000ed00

0800543c <COMUNICACAO_SERIAL_DEBUG>:
  *
  * @param  none
  *
  * @retval void
  */
void COMUNICACAO_SERIAL_DEBUG(){
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0

	/* Transmitir para USB */
	HAL_UART_Transmit(&huart4, BUFFER_SERIAL, strlen(BUFFER_SERIAL), 50);
 8005440:	480a      	ldr	r0, [pc, #40]	; (800546c <COMUNICACAO_SERIAL_DEBUG+0x30>)
 8005442:	f7fa fecf 	bl	80001e4 <strlen>
 8005446:	4603      	mov	r3, r0
 8005448:	b29a      	uxth	r2, r3
 800544a:	2332      	movs	r3, #50	; 0x32
 800544c:	4907      	ldr	r1, [pc, #28]	; (800546c <COMUNICACAO_SERIAL_DEBUG+0x30>)
 800544e:	4808      	ldr	r0, [pc, #32]	; (8005470 <COMUNICACAO_SERIAL_DEBUG+0x34>)
 8005450:	f003 fdc2 	bl	8008fd8 <HAL_UART_Transmit>

	/* Apagar Buffer */
	memset(BUFFER_SERIAL,0,strlen(BUFFER_SERIAL));
 8005454:	4805      	ldr	r0, [pc, #20]	; (800546c <COMUNICACAO_SERIAL_DEBUG+0x30>)
 8005456:	f7fa fec5 	bl	80001e4 <strlen>
 800545a:	4603      	mov	r3, r0
 800545c:	461a      	mov	r2, r3
 800545e:	2100      	movs	r1, #0
 8005460:	4802      	ldr	r0, [pc, #8]	; (800546c <COMUNICACAO_SERIAL_DEBUG+0x30>)
 8005462:	f005 fbf9 	bl	800ac58 <memset>

}
 8005466:	bf00      	nop
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	200007b0 	.word	0x200007b0
 8005470:	2000071c 	.word	0x2000071c

08005474 <IntParaString>:
  * @param  *result:	pointer char para armazenar valor como string.
  * @param  base:		base (decimal, binario, hexadecimal, etc).
  *
  * @retval *result
  */
char* IntParaString(uint32_t value, char* result, int base) {
 8005474:	b480      	push	{r7}
 8005476:	b089      	sub	sp, #36	; 0x24
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]

    /* check that the base if valid */
    if (base < 2 || base > 36) { *result = '\0'; return result; }
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b01      	cmp	r3, #1
 8005484:	dd02      	ble.n	800548c <IntParaString+0x18>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b24      	cmp	r3, #36	; 0x24
 800548a:	dd04      	ble.n	8005496 <IntParaString+0x22>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	e034      	b.n	8005500 <IntParaString+0x8c>

    char* ptr = result, *ptr1 = result, tmp_char;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	61bb      	str	r3, [r7, #24]
    uint32_t tmp_value;

    do {
        tmp_value = value;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	617b      	str	r3, [r7, #20]
        value /= base;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054aa:	60fb      	str	r3, [r7, #12]
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"
        		[35 + (tmp_value - value * base)];
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	fb02 f303 	mul.w	r3, r2, r3
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	f103 0223 	add.w	r2, r3, #35	; 0x23
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	1c59      	adds	r1, r3, #1
 80054c0:	61f9      	str	r1, [r7, #28]
        		[35 + (tmp_value - value * base)];
 80054c2:	4912      	ldr	r1, [pc, #72]	; (800550c <IntParaString+0x98>)
 80054c4:	5c8a      	ldrb	r2, [r1, r2]
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"
 80054c6:	701a      	strb	r2, [r3, #0]
    } while ( value );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e7      	bne.n	800549e <IntParaString+0x2a>

    /* Apply negative sign */
    if (tmp_value < 0) *ptr++ = '-';
    *ptr-- = '\0';
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	1e5a      	subs	r2, r3, #1
 80054d2:	61fa      	str	r2, [r7, #28]
 80054d4:	2200      	movs	r2, #0
 80054d6:	701a      	strb	r2, [r3, #0]
    while(ptr1 < ptr) {
 80054d8:	e00d      	b.n	80054f6 <IntParaString+0x82>
        tmp_char = *ptr;
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	74fb      	strb	r3, [r7, #19]
        *ptr--= *ptr1;
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	1e5a      	subs	r2, r3, #1
 80054e4:	61fa      	str	r2, [r7, #28]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	7812      	ldrb	r2, [r2, #0]
 80054ea:	701a      	strb	r2, [r3, #0]
        *ptr1++ = tmp_char;
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	1c5a      	adds	r2, r3, #1
 80054f0:	61ba      	str	r2, [r7, #24]
 80054f2:	7cfa      	ldrb	r2, [r7, #19]
 80054f4:	701a      	strb	r2, [r3, #0]
    while(ptr1 < ptr) {
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d3ed      	bcc.n	80054da <IntParaString+0x66>
    }
    return result;
 80054fe:	68bb      	ldr	r3, [r7, #8]

}
 8005500:	4618      	mov	r0, r3
 8005502:	3724      	adds	r7, #36	; 0x24
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	0800fbc8 	.word	0x0800fbc8

08005510 <MILLIS_INFORMAR_HORARIO>:
  *
  * @param  millis_time:    tempo de execucao em milissegundos.
  *
  * @retval void
  */
void MILLIS_INFORMAR_HORARIO(uint32_t millis_time){
 8005510:	b580      	push	{r7, lr}
 8005512:	b08e      	sub	sp, #56	; 0x38
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]

	char millis_STR_seg [16];
	char millis_STR_min [16];
	char millis_STR_h [16];

	millis_time = millis_time/1000;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4abc      	ldr	r2, [pc, #752]	; (800580c <MILLIS_INFORMAR_HORARIO+0x2fc>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	099b      	lsrs	r3, r3, #6
 8005522:	607b      	str	r3, [r7, #4]
	strcat(BUFFER_SERIAL, "\r\n");
 8005524:	48ba      	ldr	r0, [pc, #744]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 8005526:	f7fa fe5d 	bl	80001e4 <strlen>
 800552a:	4603      	mov	r3, r0
 800552c:	461a      	mov	r2, r3
 800552e:	4bb8      	ldr	r3, [pc, #736]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 8005530:	4413      	add	r3, r2
 8005532:	4ab8      	ldr	r2, [pc, #736]	; (8005814 <MILLIS_INFORMAR_HORARIO+0x304>)
 8005534:	8811      	ldrh	r1, [r2, #0]
 8005536:	7892      	ldrb	r2, [r2, #2]
 8005538:	8019      	strh	r1, [r3, #0]
 800553a:	709a      	strb	r2, [r3, #2]

	if (millis_time < 60){
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b3b      	cmp	r3, #59	; 0x3b
 8005540:	d82a      	bhi.n	8005598 <MILLIS_INFORMAR_HORARIO+0x88>

		/* Se o tempo for menor que 1 min */
		IntParaString(millis_time, millis_STR_seg, 10);
 8005542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005546:	220a      	movs	r2, #10
 8005548:	4619      	mov	r1, r3
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff ff92 	bl	8005474 <IntParaString>
		strcat(BUFFER_SERIAL, "00:00:");
 8005550:	48af      	ldr	r0, [pc, #700]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 8005552:	f7fa fe47 	bl	80001e4 <strlen>
 8005556:	4603      	mov	r3, r0
 8005558:	461a      	mov	r2, r3
 800555a:	4bad      	ldr	r3, [pc, #692]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 800555c:	4413      	add	r3, r2
 800555e:	4aae      	ldr	r2, [pc, #696]	; (8005818 <MILLIS_INFORMAR_HORARIO+0x308>)
 8005560:	6810      	ldr	r0, [r2, #0]
 8005562:	6018      	str	r0, [r3, #0]
 8005564:	8891      	ldrh	r1, [r2, #4]
 8005566:	7992      	ldrb	r2, [r2, #6]
 8005568:	8099      	strh	r1, [r3, #4]
 800556a:	719a      	strb	r2, [r3, #6]
		if (millis_time < 10){
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b09      	cmp	r3, #9
 8005570:	d80b      	bhi.n	800558a <MILLIS_INFORMAR_HORARIO+0x7a>
			/* Menor que 10 segundos */
			strcat(BUFFER_SERIAL, "0");
 8005572:	48a7      	ldr	r0, [pc, #668]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 8005574:	f7fa fe36 	bl	80001e4 <strlen>
 8005578:	4603      	mov	r3, r0
 800557a:	461a      	mov	r2, r3
 800557c:	4ba4      	ldr	r3, [pc, #656]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 800557e:	4413      	add	r3, r2
 8005580:	49a6      	ldr	r1, [pc, #664]	; (800581c <MILLIS_INFORMAR_HORARIO+0x30c>)
 8005582:	461a      	mov	r2, r3
 8005584:	460b      	mov	r3, r1
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	8013      	strh	r3, [r2, #0]
		}
		strcat(BUFFER_SERIAL, millis_STR_seg);
 800558a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800558e:	4619      	mov	r1, r3
 8005590:	489f      	ldr	r0, [pc, #636]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 8005592:	f005 fb89 	bl	800aca8 <strcat>
 8005596:	e105      	b.n	80057a4 <MILLIS_INFORMAR_HORARIO+0x294>
	}
	else if (millis_time >= 60 &&  millis_time < 3600){
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b3b      	cmp	r3, #59	; 0x3b
 800559c:	d969      	bls.n	8005672 <MILLIS_INFORMAR_HORARIO+0x162>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80055a4:	d265      	bcs.n	8005672 <MILLIS_INFORMAR_HORARIO+0x162>

		/* Se o tempo for maior que 1 min e menor que 1h */
		IntParaString(millis_time/60, millis_STR_min, 10);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a9d      	ldr	r2, [pc, #628]	; (8005820 <MILLIS_INFORMAR_HORARIO+0x310>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	f107 0118 	add.w	r1, r7, #24
 80055b4:	220a      	movs	r2, #10
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff ff5c 	bl	8005474 <IntParaString>
		IntParaString(millis_time%60, millis_STR_seg, 10);
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	4b98      	ldr	r3, [pc, #608]	; (8005820 <MILLIS_INFORMAR_HORARIO+0x310>)
 80055c0:	fba3 1302 	umull	r1, r3, r3, r2
 80055c4:	0958      	lsrs	r0, r3, #5
 80055c6:	4603      	mov	r3, r0
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	1a1b      	subs	r3, r3, r0
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	1ad0      	subs	r0, r2, r3
 80055d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055d4:	220a      	movs	r2, #10
 80055d6:	4619      	mov	r1, r3
 80055d8:	f7ff ff4c 	bl	8005474 <IntParaString>

		strcat(BUFFER_SERIAL, "00:");
 80055dc:	488c      	ldr	r0, [pc, #560]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 80055de:	f7fa fe01 	bl	80001e4 <strlen>
 80055e2:	4603      	mov	r3, r0
 80055e4:	461a      	mov	r2, r3
 80055e6:	4b8a      	ldr	r3, [pc, #552]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 80055e8:	4413      	add	r3, r2
 80055ea:	4a8e      	ldr	r2, [pc, #568]	; (8005824 <MILLIS_INFORMAR_HORARIO+0x314>)
 80055ec:	6810      	ldr	r0, [r2, #0]
 80055ee:	6018      	str	r0, [r3, #0]
		if (millis_time/60 < 10){
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80055f6:	d20b      	bcs.n	8005610 <MILLIS_INFORMAR_HORARIO+0x100>
			/* Menor que 10 minutos */
			strcat(BUFFER_SERIAL, "0");
 80055f8:	4885      	ldr	r0, [pc, #532]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 80055fa:	f7fa fdf3 	bl	80001e4 <strlen>
 80055fe:	4603      	mov	r3, r0
 8005600:	461a      	mov	r2, r3
 8005602:	4b83      	ldr	r3, [pc, #524]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 8005604:	4413      	add	r3, r2
 8005606:	4985      	ldr	r1, [pc, #532]	; (800581c <MILLIS_INFORMAR_HORARIO+0x30c>)
 8005608:	461a      	mov	r2, r3
 800560a:	460b      	mov	r3, r1
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	8013      	strh	r3, [r2, #0]
		}
		strcat(BUFFER_SERIAL, millis_STR_min);
 8005610:	f107 0318 	add.w	r3, r7, #24
 8005614:	4619      	mov	r1, r3
 8005616:	487e      	ldr	r0, [pc, #504]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 8005618:	f005 fb46 	bl	800aca8 <strcat>
		strcat(BUFFER_SERIAL, ":");
 800561c:	487c      	ldr	r0, [pc, #496]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 800561e:	f7fa fde1 	bl	80001e4 <strlen>
 8005622:	4603      	mov	r3, r0
 8005624:	461a      	mov	r2, r3
 8005626:	4b7a      	ldr	r3, [pc, #488]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 8005628:	4413      	add	r3, r2
 800562a:	497f      	ldr	r1, [pc, #508]	; (8005828 <MILLIS_INFORMAR_HORARIO+0x318>)
 800562c:	461a      	mov	r2, r3
 800562e:	460b      	mov	r3, r1
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	8013      	strh	r3, [r2, #0]
		if (millis_time%60 < 10){
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	4b7a      	ldr	r3, [pc, #488]	; (8005820 <MILLIS_INFORMAR_HORARIO+0x310>)
 8005638:	fba3 2301 	umull	r2, r3, r3, r1
 800563c:	095a      	lsrs	r2, r3, #5
 800563e:	4613      	mov	r3, r2
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	1a9b      	subs	r3, r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	1aca      	subs	r2, r1, r3
 8005648:	2a09      	cmp	r2, #9
 800564a:	d80b      	bhi.n	8005664 <MILLIS_INFORMAR_HORARIO+0x154>
			/* Menor que 10 segundos */
			strcat(BUFFER_SERIAL, "0");
 800564c:	4870      	ldr	r0, [pc, #448]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 800564e:	f7fa fdc9 	bl	80001e4 <strlen>
 8005652:	4603      	mov	r3, r0
 8005654:	461a      	mov	r2, r3
 8005656:	4b6e      	ldr	r3, [pc, #440]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 8005658:	4413      	add	r3, r2
 800565a:	4970      	ldr	r1, [pc, #448]	; (800581c <MILLIS_INFORMAR_HORARIO+0x30c>)
 800565c:	461a      	mov	r2, r3
 800565e:	460b      	mov	r3, r1
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	8013      	strh	r3, [r2, #0]
		}
		strcat(BUFFER_SERIAL, millis_STR_seg);
 8005664:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005668:	4619      	mov	r1, r3
 800566a:	4869      	ldr	r0, [pc, #420]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 800566c:	f005 fb1c 	bl	800aca8 <strcat>
 8005670:	e098      	b.n	80057a4 <MILLIS_INFORMAR_HORARIO+0x294>
	}
	else if (millis_time >= 3600){
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8005678:	f0c0 8094 	bcc.w	80057a4 <MILLIS_INFORMAR_HORARIO+0x294>

		/* Se o tempo for maior que 1h */
		IntParaString(millis_time/3600, millis_STR_h, 10);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a6b      	ldr	r2, [pc, #428]	; (800582c <MILLIS_INFORMAR_HORARIO+0x31c>)
 8005680:	fba2 2303 	umull	r2, r3, r2, r3
 8005684:	0adb      	lsrs	r3, r3, #11
 8005686:	f107 0108 	add.w	r1, r7, #8
 800568a:	220a      	movs	r2, #10
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff fef1 	bl	8005474 <IntParaString>

		if (millis_time/3600 < 10){
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8005698:	4293      	cmp	r3, r2
 800569a:	d80b      	bhi.n	80056b4 <MILLIS_INFORMAR_HORARIO+0x1a4>
			/* Menor que 10 horas */
			strcat(BUFFER_SERIAL, "0");
 800569c:	485c      	ldr	r0, [pc, #368]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 800569e:	f7fa fda1 	bl	80001e4 <strlen>
 80056a2:	4603      	mov	r3, r0
 80056a4:	461a      	mov	r2, r3
 80056a6:	4b5a      	ldr	r3, [pc, #360]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 80056a8:	4413      	add	r3, r2
 80056aa:	495c      	ldr	r1, [pc, #368]	; (800581c <MILLIS_INFORMAR_HORARIO+0x30c>)
 80056ac:	461a      	mov	r2, r3
 80056ae:	460b      	mov	r3, r1
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	8013      	strh	r3, [r2, #0]
		}
		strcat(BUFFER_SERIAL, millis_STR_h);
 80056b4:	f107 0308 	add.w	r3, r7, #8
 80056b8:	4619      	mov	r1, r3
 80056ba:	4855      	ldr	r0, [pc, #340]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 80056bc:	f005 faf4 	bl	800aca8 <strcat>
		strcat(BUFFER_SERIAL, ":");
 80056c0:	4853      	ldr	r0, [pc, #332]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 80056c2:	f7fa fd8f 	bl	80001e4 <strlen>
 80056c6:	4603      	mov	r3, r0
 80056c8:	461a      	mov	r2, r3
 80056ca:	4b51      	ldr	r3, [pc, #324]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 80056cc:	4413      	add	r3, r2
 80056ce:	4956      	ldr	r1, [pc, #344]	; (8005828 <MILLIS_INFORMAR_HORARIO+0x318>)
 80056d0:	461a      	mov	r2, r3
 80056d2:	460b      	mov	r3, r1
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	8013      	strh	r3, [r2, #0]

		millis_time = millis_time%3600;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a54      	ldr	r2, [pc, #336]	; (800582c <MILLIS_INFORMAR_HORARIO+0x31c>)
 80056dc:	fba2 1203 	umull	r1, r2, r2, r3
 80056e0:	0ad2      	lsrs	r2, r2, #11
 80056e2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80056e6:	fb01 f202 	mul.w	r2, r1, r2
 80056ea:	1a9b      	subs	r3, r3, r2
 80056ec:	607b      	str	r3, [r7, #4]
		IntParaString(millis_time/60, millis_STR_min, 10);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a4b      	ldr	r2, [pc, #300]	; (8005820 <MILLIS_INFORMAR_HORARIO+0x310>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	f107 0118 	add.w	r1, r7, #24
 80056fc:	220a      	movs	r2, #10
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff feb8 	bl	8005474 <IntParaString>
		IntParaString(millis_time%60, millis_STR_seg, 10);
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	4b46      	ldr	r3, [pc, #280]	; (8005820 <MILLIS_INFORMAR_HORARIO+0x310>)
 8005708:	fba3 1302 	umull	r1, r3, r3, r2
 800570c:	0958      	lsrs	r0, r3, #5
 800570e:	4603      	mov	r3, r0
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	1a1b      	subs	r3, r3, r0
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	1ad0      	subs	r0, r2, r3
 8005718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800571c:	220a      	movs	r2, #10
 800571e:	4619      	mov	r1, r3
 8005720:	f7ff fea8 	bl	8005474 <IntParaString>

		if (millis_time/60 < 10){
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800572a:	d20b      	bcs.n	8005744 <MILLIS_INFORMAR_HORARIO+0x234>
			/* Menor que 10 minutos */
			strcat(BUFFER_SERIAL, "0");
 800572c:	4838      	ldr	r0, [pc, #224]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 800572e:	f7fa fd59 	bl	80001e4 <strlen>
 8005732:	4603      	mov	r3, r0
 8005734:	461a      	mov	r2, r3
 8005736:	4b36      	ldr	r3, [pc, #216]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 8005738:	4413      	add	r3, r2
 800573a:	4938      	ldr	r1, [pc, #224]	; (800581c <MILLIS_INFORMAR_HORARIO+0x30c>)
 800573c:	461a      	mov	r2, r3
 800573e:	460b      	mov	r3, r1
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	8013      	strh	r3, [r2, #0]
		}
		strcat(BUFFER_SERIAL, millis_STR_min);
 8005744:	f107 0318 	add.w	r3, r7, #24
 8005748:	4619      	mov	r1, r3
 800574a:	4831      	ldr	r0, [pc, #196]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 800574c:	f005 faac 	bl	800aca8 <strcat>
		strcat(BUFFER_SERIAL, ":");
 8005750:	482f      	ldr	r0, [pc, #188]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 8005752:	f7fa fd47 	bl	80001e4 <strlen>
 8005756:	4603      	mov	r3, r0
 8005758:	461a      	mov	r2, r3
 800575a:	4b2d      	ldr	r3, [pc, #180]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 800575c:	4413      	add	r3, r2
 800575e:	4932      	ldr	r1, [pc, #200]	; (8005828 <MILLIS_INFORMAR_HORARIO+0x318>)
 8005760:	461a      	mov	r2, r3
 8005762:	460b      	mov	r3, r1
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	8013      	strh	r3, [r2, #0]
		if (millis_time%60 < 10){
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4b2d      	ldr	r3, [pc, #180]	; (8005820 <MILLIS_INFORMAR_HORARIO+0x310>)
 800576c:	fba3 2301 	umull	r2, r3, r3, r1
 8005770:	095a      	lsrs	r2, r3, #5
 8005772:	4613      	mov	r3, r2
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	1a9b      	subs	r3, r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	1aca      	subs	r2, r1, r3
 800577c:	2a09      	cmp	r2, #9
 800577e:	d80b      	bhi.n	8005798 <MILLIS_INFORMAR_HORARIO+0x288>
			/* Menor que 10 segundos */
			strcat(BUFFER_SERIAL, "0");
 8005780:	4823      	ldr	r0, [pc, #140]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 8005782:	f7fa fd2f 	bl	80001e4 <strlen>
 8005786:	4603      	mov	r3, r0
 8005788:	461a      	mov	r2, r3
 800578a:	4b21      	ldr	r3, [pc, #132]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 800578c:	4413      	add	r3, r2
 800578e:	4923      	ldr	r1, [pc, #140]	; (800581c <MILLIS_INFORMAR_HORARIO+0x30c>)
 8005790:	461a      	mov	r2, r3
 8005792:	460b      	mov	r3, r1
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	8013      	strh	r3, [r2, #0]
		}
		strcat(BUFFER_SERIAL, millis_STR_seg);
 8005798:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800579c:	4619      	mov	r1, r3
 800579e:	481c      	ldr	r0, [pc, #112]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 80057a0:	f005 fa82 	bl	800aca8 <strcat>
	}
	strcat(BUFFER_SERIAL, ":");
 80057a4:	481a      	ldr	r0, [pc, #104]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 80057a6:	f7fa fd1d 	bl	80001e4 <strlen>
 80057aa:	4603      	mov	r3, r0
 80057ac:	461a      	mov	r2, r3
 80057ae:	4b18      	ldr	r3, [pc, #96]	; (8005810 <MILLIS_INFORMAR_HORARIO+0x300>)
 80057b0:	4413      	add	r3, r2
 80057b2:	491d      	ldr	r1, [pc, #116]	; (8005828 <MILLIS_INFORMAR_HORARIO+0x318>)
 80057b4:	461a      	mov	r2, r3
 80057b6:	460b      	mov	r3, r1
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	8013      	strh	r3, [r2, #0]

	/* Apagar tudo */
	memset(millis_STR_h,0,strlen(millis_STR_h));
 80057bc:	f107 0308 	add.w	r3, r7, #8
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fa fd0f 	bl	80001e4 <strlen>
 80057c6:	4602      	mov	r2, r0
 80057c8:	f107 0308 	add.w	r3, r7, #8
 80057cc:	2100      	movs	r1, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f005 fa42 	bl	800ac58 <memset>
	memset(millis_STR_min,0,strlen(millis_STR_min));
 80057d4:	f107 0318 	add.w	r3, r7, #24
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fa fd03 	bl	80001e4 <strlen>
 80057de:	4602      	mov	r2, r0
 80057e0:	f107 0318 	add.w	r3, r7, #24
 80057e4:	2100      	movs	r1, #0
 80057e6:	4618      	mov	r0, r3
 80057e8:	f005 fa36 	bl	800ac58 <memset>
	memset(millis_STR_seg,0,strlen(millis_STR_seg));
 80057ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fa fcf7 	bl	80001e4 <strlen>
 80057f6:	4602      	mov	r2, r0
 80057f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f005 fa2a 	bl	800ac58 <memset>

	/* Fim da funcao */
}
 8005804:	bf00      	nop
 8005806:	3738      	adds	r7, #56	; 0x38
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	10624dd3 	.word	0x10624dd3
 8005810:	200007b0 	.word	0x200007b0
 8005814:	0800fc10 	.word	0x0800fc10
 8005818:	0800fc14 	.word	0x0800fc14
 800581c:	0800fc1c 	.word	0x0800fc1c
 8005820:	88888889 	.word	0x88888889
 8005824:	0800fc20 	.word	0x0800fc20
 8005828:	0800fc24 	.word	0x0800fc24
 800582c:	91a2b3c5 	.word	0x91a2b3c5

08005830 <escreve_USB>:
  *
  * @param  *data:  dado a ser escrito.
  *
  * @retval void
  */
void escreve_USB(char *data){
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart4, data, strlen(data),100);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7fa fcd3 	bl	80001e4 <strlen>
 800583e:	4603      	mov	r3, r0
 8005840:	b29a      	uxth	r2, r3
 8005842:	2364      	movs	r3, #100	; 0x64
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	4803      	ldr	r0, [pc, #12]	; (8005854 <escreve_USB+0x24>)
 8005848:	f003 fbc6 	bl	8008fd8 <HAL_UART_Transmit>
}
 800584c:	bf00      	nop
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	2000071c 	.word	0x2000071c

08005858 <reverse>:

/* The following functions can be found in https://www.geeksforgeeks.org/ */

// Reverses a string 'str' of length 'len'
void reverse(char* str, int len)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	3b01      	subs	r3, #1
 800586a:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800586c:	e018      	b.n	80058a0 <reverse+0x48>
        temp = str[i];
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	4413      	add	r3, r2
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	441a      	add	r2, r3
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	440b      	add	r3, r1
 8005884:	7812      	ldrb	r2, [r2, #0]
 8005886:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	701a      	strb	r2, [r3, #0]
        i++;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	3301      	adds	r3, #1
 8005898:	617b      	str	r3, [r7, #20]
        j--;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	3b01      	subs	r3, #1
 800589e:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	dbe2      	blt.n	800586e <reverse+0x16>
    }
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
	...

080058b8 <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
    int i = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]
    while (x) {
 80058c8:	e01d      	b.n	8005906 <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4b1d      	ldr	r3, [pc, #116]	; (8005944 <intToStr+0x8c>)
 80058ce:	fb83 1302 	smull	r1, r3, r3, r2
 80058d2:	1099      	asrs	r1, r3, #2
 80058d4:	17d3      	asrs	r3, r2, #31
 80058d6:	1ac9      	subs	r1, r1, r3
 80058d8:	460b      	mov	r3, r1
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	440b      	add	r3, r1
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	1ad1      	subs	r1, r2, r3
 80058e2:	b2ca      	uxtb	r2, r1
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	1c59      	adds	r1, r3, #1
 80058e8:	6179      	str	r1, [r7, #20]
 80058ea:	4619      	mov	r1, r3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	440b      	add	r3, r1
 80058f0:	3230      	adds	r2, #48	; 0x30
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4a12      	ldr	r2, [pc, #72]	; (8005944 <intToStr+0x8c>)
 80058fa:	fb82 1203 	smull	r1, r2, r2, r3
 80058fe:	1092      	asrs	r2, r2, #2
 8005900:	17db      	asrs	r3, r3, #31
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	60fb      	str	r3, [r7, #12]
    while (x) {
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1de      	bne.n	80058ca <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 800590c:	e007      	b.n	800591e <intToStr+0x66>
        str[i++] = '0';
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	617a      	str	r2, [r7, #20]
 8005914:	461a      	mov	r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	4413      	add	r3, r2
 800591a:	2230      	movs	r2, #48	; 0x30
 800591c:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	429a      	cmp	r2, r3
 8005924:	dbf3      	blt.n	800590e <intToStr+0x56>

    reverse(str, i);
 8005926:	6979      	ldr	r1, [r7, #20]
 8005928:	68b8      	ldr	r0, [r7, #8]
 800592a:	f7ff ff95 	bl	8005858 <reverse>
    str[i] = '\0';
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	4413      	add	r3, r2
 8005934:	2200      	movs	r2, #0
 8005936:	701a      	strb	r2, [r3, #0]
    return i;
 8005938:	697b      	ldr	r3, [r7, #20]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	66666667 	.word	0x66666667

08005948 <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 8005948:	b5b0      	push	{r4, r5, r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005952:	60b8      	str	r0, [r7, #8]
 8005954:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8005956:	edd7 7a03 	vldr	s15, [r7, #12]
 800595a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800595e:	ee17 3a90 	vmov	r3, s15
 8005962:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	ee07 3a90 	vmov	s15, r3
 800596a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800596e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005976:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 800597a:	2200      	movs	r2, #0
 800597c:	68b9      	ldr	r1, [r7, #8]
 800597e:	69f8      	ldr	r0, [r7, #28]
 8005980:	f7ff ff9a 	bl	80058b8 <intToStr>
 8005984:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d030      	beq.n	80059ee <ftoa+0xa6>
        res[i] = '.'; // add dot
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	4413      	add	r3, r2
 8005992:	222e      	movs	r2, #46	; 0x2e
 8005994:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8005996:	69b8      	ldr	r0, [r7, #24]
 8005998:	f7fa fde6 	bl	8000568 <__aeabi_f2d>
 800599c:	4604      	mov	r4, r0
 800599e:	460d      	mov	r5, r1
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7fa fdcf 	bl	8000544 <__aeabi_i2d>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	ec43 2b11 	vmov	d1, r2, r3
 80059ae:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80059f8 <ftoa+0xb0>
 80059b2:	f008 fa7d 	bl	800deb0 <pow>
 80059b6:	ec53 2b10 	vmov	r2, r3, d0
 80059ba:	4620      	mov	r0, r4
 80059bc:	4629      	mov	r1, r5
 80059be:	f7fa fe2b 	bl	8000618 <__aeabi_dmul>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4610      	mov	r0, r2
 80059c8:	4619      	mov	r1, r3
 80059ca:	f7fb f8f5 	bl	8000bb8 <__aeabi_d2f>
 80059ce:	4603      	mov	r3, r0
 80059d0:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80059d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80059d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	3301      	adds	r3, #1
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	4413      	add	r3, r2
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	4619      	mov	r1, r3
 80059e6:	ee17 0a90 	vmov	r0, s15
 80059ea:	f7ff ff65 	bl	80058b8 <intToStr>
    }
}
 80059ee:	bf00      	nop
 80059f0:	3720      	adds	r7, #32
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bdb0      	pop	{r4, r5, r7, pc}
 80059f6:	bf00      	nop
 80059f8:	00000000 	.word	0x00000000
 80059fc:	40240000 	.word	0x40240000

08005a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005a04:	f7ff fd08 	bl	8005418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a08:	480c      	ldr	r0, [pc, #48]	; (8005a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8005a0a:	490d      	ldr	r1, [pc, #52]	; (8005a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005a0c:	4a0d      	ldr	r2, [pc, #52]	; (8005a44 <LoopForever+0xe>)
  movs r3, #0
 8005a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a10:	e002      	b.n	8005a18 <LoopCopyDataInit>

08005a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a16:	3304      	adds	r3, #4

08005a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a1c:	d3f9      	bcc.n	8005a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a1e:	4a0a      	ldr	r2, [pc, #40]	; (8005a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005a20:	4c0a      	ldr	r4, [pc, #40]	; (8005a4c <LoopForever+0x16>)
  movs r3, #0
 8005a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a24:	e001      	b.n	8005a2a <LoopFillZerobss>

08005a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a28:	3204      	adds	r2, #4

08005a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a2c:	d3fb      	bcc.n	8005a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a2e:	f005 f8c7 	bl	800abc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005a32:	f7fe fc57 	bl	80042e4 <main>

08005a36 <LoopForever>:

LoopForever:
    b LoopForever
 8005a36:	e7fe      	b.n	8005a36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005a38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8005a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a40:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8005a44:	08010178 	.word	0x08010178
  ldr r2, =_sbss
 8005a48:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8005a4c:	20000c68 	.word	0x20000c68

08005a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005a50:	e7fe      	b.n	8005a50 <ADC1_2_IRQHandler>

08005a52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b082      	sub	sp, #8
 8005a56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a5c:	2003      	movs	r0, #3
 8005a5e:	f000 f931 	bl	8005cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a62:	200f      	movs	r0, #15
 8005a64:	f000 f80e 	bl	8005a84 <HAL_InitTick>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	71fb      	strb	r3, [r7, #7]
 8005a72:	e001      	b.n	8005a78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005a74:	f7ff f9ec 	bl	8004e50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005a78:	79fb      	ldrb	r3, [r7, #7]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
	...

08005a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005a90:	4b17      	ldr	r3, [pc, #92]	; (8005af0 <HAL_InitTick+0x6c>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d023      	beq.n	8005ae0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005a98:	4b16      	ldr	r3, [pc, #88]	; (8005af4 <HAL_InitTick+0x70>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	4b14      	ldr	r3, [pc, #80]	; (8005af0 <HAL_InitTick+0x6c>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 f93d 	bl	8005d2e <HAL_SYSTICK_Config>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10f      	bne.n	8005ada <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b0f      	cmp	r3, #15
 8005abe:	d809      	bhi.n	8005ad4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac8:	f000 f907 	bl	8005cda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005acc:	4a0a      	ldr	r2, [pc, #40]	; (8005af8 <HAL_InitTick+0x74>)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e007      	b.n	8005ae4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
 8005ad8:	e004      	b.n	8005ae4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
 8005ade:	e001      	b.n	8005ae4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000048 	.word	0x20000048
 8005af4:	20000040 	.word	0x20000040
 8005af8:	20000044 	.word	0x20000044

08005afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005b00:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <HAL_IncTick+0x20>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <HAL_IncTick+0x24>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	4a04      	ldr	r2, [pc, #16]	; (8005b20 <HAL_IncTick+0x24>)
 8005b0e:	6013      	str	r3, [r2, #0]
}
 8005b10:	bf00      	nop
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	20000048 	.word	0x20000048
 8005b20:	20000c54 	.word	0x20000c54

08005b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b34:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <__NVIC_SetPriorityGrouping+0x44>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b40:	4013      	ands	r3, r2
 8005b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b56:	4a04      	ldr	r2, [pc, #16]	; (8005b68 <__NVIC_SetPriorityGrouping+0x44>)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	60d3      	str	r3, [r2, #12]
}
 8005b5c:	bf00      	nop
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	e000ed00 	.word	0xe000ed00

08005b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b70:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <__NVIC_GetPriorityGrouping+0x18>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	0a1b      	lsrs	r3, r3, #8
 8005b76:	f003 0307 	and.w	r3, r3, #7
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	e000ed00 	.word	0xe000ed00

08005b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	db0b      	blt.n	8005bb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	f003 021f 	and.w	r2, r3, #31
 8005ba0:	4907      	ldr	r1, [pc, #28]	; (8005bc0 <__NVIC_EnableIRQ+0x38>)
 8005ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	2001      	movs	r0, #1
 8005baa:	fa00 f202 	lsl.w	r2, r0, r2
 8005bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	e000e100 	.word	0xe000e100

08005bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	6039      	str	r1, [r7, #0]
 8005bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	db0a      	blt.n	8005bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	490c      	ldr	r1, [pc, #48]	; (8005c10 <__NVIC_SetPriority+0x4c>)
 8005bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be2:	0112      	lsls	r2, r2, #4
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	440b      	add	r3, r1
 8005be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bec:	e00a      	b.n	8005c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	4908      	ldr	r1, [pc, #32]	; (8005c14 <__NVIC_SetPriority+0x50>)
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	3b04      	subs	r3, #4
 8005bfc:	0112      	lsls	r2, r2, #4
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	440b      	add	r3, r1
 8005c02:	761a      	strb	r2, [r3, #24]
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	e000e100 	.word	0xe000e100
 8005c14:	e000ed00 	.word	0xe000ed00

08005c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b089      	sub	sp, #36	; 0x24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f1c3 0307 	rsb	r3, r3, #7
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	bf28      	it	cs
 8005c36:	2304      	movcs	r3, #4
 8005c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	2b06      	cmp	r3, #6
 8005c40:	d902      	bls.n	8005c48 <NVIC_EncodePriority+0x30>
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	3b03      	subs	r3, #3
 8005c46:	e000      	b.n	8005c4a <NVIC_EncodePriority+0x32>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43da      	mvns	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	401a      	ands	r2, r3
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c60:	f04f 31ff 	mov.w	r1, #4294967295
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6a:	43d9      	mvns	r1, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c70:	4313      	orrs	r3, r2
         );
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3724      	adds	r7, #36	; 0x24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
	...

08005c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c90:	d301      	bcc.n	8005c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c92:	2301      	movs	r3, #1
 8005c94:	e00f      	b.n	8005cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c96:	4a0a      	ldr	r2, [pc, #40]	; (8005cc0 <SysTick_Config+0x40>)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c9e:	210f      	movs	r1, #15
 8005ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca4:	f7ff ff8e 	bl	8005bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ca8:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <SysTick_Config+0x40>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cae:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <SysTick_Config+0x40>)
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	e000e010 	.word	0xe000e010

08005cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff ff29 	bl	8005b24 <__NVIC_SetPriorityGrouping>
}
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b086      	sub	sp, #24
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cec:	f7ff ff3e 	bl	8005b6c <__NVIC_GetPriorityGrouping>
 8005cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	6978      	ldr	r0, [r7, #20]
 8005cf8:	f7ff ff8e 	bl	8005c18 <NVIC_EncodePriority>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d02:	4611      	mov	r1, r2
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff ff5d 	bl	8005bc4 <__NVIC_SetPriority>
}
 8005d0a:	bf00      	nop
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	4603      	mov	r3, r0
 8005d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff ff31 	bl	8005b88 <__NVIC_EnableIRQ>
}
 8005d26:	bf00      	nop
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff ffa2 	bl	8005c80 <SysTick_Config>
 8005d3c:	4603      	mov	r3, r0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d008      	beq.n	8005d70 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2204      	movs	r2, #4
 8005d62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e022      	b.n	8005db6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 020e 	bic.w	r2, r2, #14
 8005d7e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0201 	bic.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d94:	f003 021c 	and.w	r2, r3, #28
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8005da2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d005      	beq.n	8005de6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2204      	movs	r2, #4
 8005dde:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
 8005de4:	e029      	b.n	8005e3a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 020e 	bic.w	r2, r2, #14
 8005df4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0201 	bic.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0a:	f003 021c 	and.w	r2, r3, #28
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	2101      	movs	r1, #1
 8005e14:	fa01 f202 	lsl.w	r2, r1, r2
 8005e18:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	4798      	blx	r3
    }
  }
  return status;
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8005e52:	2300      	movs	r3, #0
 8005e54:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e56:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <HAL_FLASH_Program+0xd0>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <HAL_FLASH_Program+0x1e>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e053      	b.n	8005f0a <HAL_FLASH_Program+0xc6>
 8005e62:	4b2c      	ldr	r3, [pc, #176]	; (8005f14 <HAL_FLASH_Program+0xd0>)
 8005e64:	2201      	movs	r2, #1
 8005e66:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e6c:	f000 f8b4 	bl	8005fd8 <FLASH_WaitForLastOperation>
 8005e70:	4603      	mov	r3, r0
 8005e72:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005e74:	7dfb      	ldrb	r3, [r7, #23]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d143      	bne.n	8005f02 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e7a:	4b26      	ldr	r3, [pc, #152]	; (8005f14 <HAL_FLASH_Program+0xd0>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005e80:	4b25      	ldr	r3, [pc, #148]	; (8005f18 <HAL_FLASH_Program+0xd4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005e8c:	4b22      	ldr	r3, [pc, #136]	; (8005f18 <HAL_FLASH_Program+0xd4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a21      	ldr	r2, [pc, #132]	; (8005f18 <HAL_FLASH_Program+0xd4>)
 8005e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e96:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005e98:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <HAL_FLASH_Program+0xd0>)
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	771a      	strb	r2, [r3, #28]
 8005e9e:	e002      	b.n	8005ea6 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005ea0:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <HAL_FLASH_Program+0xd0>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d107      	bne.n	8005ebc <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eb0:	68b8      	ldr	r0, [r7, #8]
 8005eb2:	f000 f8e7 	bl	8006084 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	e010      	b.n	8005ede <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d002      	beq.n	8005ec8 <HAL_FLASH_Program+0x84>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d10a      	bne.n	8005ede <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	4619      	mov	r1, r3
 8005ecc:	68b8      	ldr	r0, [r7, #8]
 8005ece:	f000 f8ff 	bl	80060d0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d102      	bne.n	8005ede <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8005ed8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005edc:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ede:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ee2:	f000 f879 	bl	8005fd8 <FLASH_WaitForLastOperation>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d006      	beq.n	8005efe <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8005ef0:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <HAL_FLASH_Program+0xd4>)
 8005ef2:	695a      	ldr	r2, [r3, #20]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	43db      	mvns	r3, r3
 8005ef8:	4907      	ldr	r1, [pc, #28]	; (8005f18 <HAL_FLASH_Program+0xd4>)
 8005efa:	4013      	ands	r3, r2
 8005efc:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005efe:	f000 fa17 	bl	8006330 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f02:	4b04      	ldr	r3, [pc, #16]	; (8005f14 <HAL_FLASH_Program+0xd0>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	701a      	strb	r2, [r3, #0]

  return status;
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	2000004c 	.word	0x2000004c
 8005f18:	40022000 	.word	0x40022000

08005f1c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005f26:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <HAL_FLASH_Unlock+0x38>)
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	da0b      	bge.n	8005f46 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005f2e:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <HAL_FLASH_Unlock+0x38>)
 8005f30:	4a09      	ldr	r2, [pc, #36]	; (8005f58 <HAL_FLASH_Unlock+0x3c>)
 8005f32:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005f34:	4b07      	ldr	r3, [pc, #28]	; (8005f54 <HAL_FLASH_Unlock+0x38>)
 8005f36:	4a09      	ldr	r2, [pc, #36]	; (8005f5c <HAL_FLASH_Unlock+0x40>)
 8005f38:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005f3a:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <HAL_FLASH_Unlock+0x38>)
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	da01      	bge.n	8005f46 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005f46:	79fb      	ldrb	r3, [r7, #7]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	40022000 	.word	0x40022000
 8005f58:	45670123 	.word	0x45670123
 8005f5c:	cdef89ab 	.word	0xcdef89ab

08005f60 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005f64:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <HAL_FLASH_Lock+0x1c>)
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	4a04      	ldr	r2, [pc, #16]	; (8005f7c <HAL_FLASH_Lock+0x1c>)
 8005f6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f6e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	40022000 	.word	0x40022000

08005f80 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8005f84:	4b09      	ldr	r3, [pc, #36]	; (8005fac <HAL_FLASH_OB_Unlock+0x2c>)
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d007      	beq.n	8005fa0 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8005f90:	4b06      	ldr	r3, [pc, #24]	; (8005fac <HAL_FLASH_OB_Unlock+0x2c>)
 8005f92:	4a07      	ldr	r2, [pc, #28]	; (8005fb0 <HAL_FLASH_OB_Unlock+0x30>)
 8005f94:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8005f96:	4b05      	ldr	r3, [pc, #20]	; (8005fac <HAL_FLASH_OB_Unlock+0x2c>)
 8005f98:	4a06      	ldr	r2, [pc, #24]	; (8005fb4 <HAL_FLASH_OB_Unlock+0x34>)
 8005f9a:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	e000      	b.n	8005fa2 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40022000 	.word	0x40022000
 8005fb0:	08192a3b 	.word	0x08192a3b
 8005fb4:	4c5d6e7f 	.word	0x4c5d6e7f

08005fb8 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8005fbc:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <HAL_FLASH_OB_Lock+0x1c>)
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	4a04      	ldr	r2, [pc, #16]	; (8005fd4 <HAL_FLASH_OB_Lock+0x1c>)
 8005fc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fc6:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	40022000 	.word	0x40022000

08005fd8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005fe0:	f7fd f818 	bl	8003014 <HAL_GetTick>
 8005fe4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005fe6:	e00d      	b.n	8006004 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fee:	d009      	beq.n	8006004 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8005ff0:	f7fd f810 	bl	8003014 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d801      	bhi.n	8006004 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e037      	b.n	8006074 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006004:	4b1d      	ldr	r3, [pc, #116]	; (800607c <FLASH_WaitForLastOperation+0xa4>)
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1eb      	bne.n	8005fe8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006010:	4b1a      	ldr	r3, [pc, #104]	; (800607c <FLASH_WaitForLastOperation+0xa4>)
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8006018:	4013      	ands	r3, r2
 800601a:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d01e      	beq.n	8006060 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8006022:	4b17      	ldr	r3, [pc, #92]	; (8006080 <FLASH_WaitForLastOperation+0xa8>)
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	4313      	orrs	r3, r2
 800602a:	4a15      	ldr	r2, [pc, #84]	; (8006080 <FLASH_WaitForLastOperation+0xa8>)
 800602c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <FLASH_WaitForLastOperation+0x70>
 8006038:	4b10      	ldr	r3, [pc, #64]	; (800607c <FLASH_WaitForLastOperation+0xa4>)
 800603a:	699a      	ldr	r2, [r3, #24]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006042:	490e      	ldr	r1, [pc, #56]	; (800607c <FLASH_WaitForLastOperation+0xa4>)
 8006044:	4313      	orrs	r3, r2
 8006046:	618b      	str	r3, [r1, #24]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d004      	beq.n	800605c <FLASH_WaitForLastOperation+0x84>
 8006052:	4a0a      	ldr	r2, [pc, #40]	; (800607c <FLASH_WaitForLastOperation+0xa4>)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800605a:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e009      	b.n	8006074 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006060:	4b06      	ldr	r3, [pc, #24]	; (800607c <FLASH_WaitForLastOperation+0xa4>)
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800606c:	4b03      	ldr	r3, [pc, #12]	; (800607c <FLASH_WaitForLastOperation+0xa4>)
 800606e:	2201      	movs	r2, #1
 8006070:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40022000 	.word	0x40022000
 8006080:	2000004c 	.word	0x2000004c

08006084 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006090:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <FLASH_Program_DoubleWord+0x48>)
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	4a0d      	ldr	r2, [pc, #52]	; (80060cc <FLASH_Program_DoubleWord+0x48>)
 8006096:	f043 0301 	orr.w	r3, r3, #1
 800609a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80060a2:	f3bf 8f6f 	isb	sy
}
 80060a6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80060a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	f04f 0300 	mov.w	r3, #0
 80060b4:	000a      	movs	r2, r1
 80060b6:	2300      	movs	r3, #0
 80060b8:	68f9      	ldr	r1, [r7, #12]
 80060ba:	3104      	adds	r1, #4
 80060bc:	4613      	mov	r3, r2
 80060be:	600b      	str	r3, [r1, #0]
}
 80060c0:	bf00      	nop
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	40022000 	.word	0x40022000

080060d0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b089      	sub	sp, #36	; 0x24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80060da:	2340      	movs	r3, #64	; 0x40
 80060dc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80060e6:	4b14      	ldr	r3, [pc, #80]	; (8006138 <FLASH_Program_Fast+0x68>)
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	4a13      	ldr	r2, [pc, #76]	; (8006138 <FLASH_Program_Fast+0x68>)
 80060ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060f2:	f3ef 8310 	mrs	r3, PRIMASK
 80060f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80060f8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80060fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80060fc:	b672      	cpsid	i
}
 80060fe:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	3304      	adds	r3, #4
 800610c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	3304      	adds	r3, #4
 8006112:	617b      	str	r3, [r7, #20]
    row_index--;
 8006114:	7ffb      	ldrb	r3, [r7, #31]
 8006116:	3b01      	subs	r3, #1
 8006118:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800611a:	7ffb      	ldrb	r3, [r7, #31]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1ef      	bne.n	8006100 <FLASH_Program_Fast+0x30>
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f383 8810 	msr	PRIMASK, r3
}
 800612a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800612c:	bf00      	nop
 800612e:	3724      	adds	r7, #36	; 0x24
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	40022000 	.word	0x40022000

0800613c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006146:	4b49      	ldr	r3, [pc, #292]	; (800626c <HAL_FLASHEx_Erase+0x130>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <HAL_FLASHEx_Erase+0x16>
 800614e:	2302      	movs	r3, #2
 8006150:	e087      	b.n	8006262 <HAL_FLASHEx_Erase+0x126>
 8006152:	4b46      	ldr	r3, [pc, #280]	; (800626c <HAL_FLASHEx_Erase+0x130>)
 8006154:	2201      	movs	r2, #1
 8006156:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006158:	f24c 3050 	movw	r0, #50000	; 0xc350
 800615c:	f7ff ff3c 	bl	8005fd8 <FLASH_WaitForLastOperation>
 8006160:	4603      	mov	r3, r0
 8006162:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d177      	bne.n	800625a <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800616a:	4b40      	ldr	r3, [pc, #256]	; (800626c <HAL_FLASHEx_Erase+0x130>)
 800616c:	2200      	movs	r2, #0
 800616e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006170:	4b3f      	ldr	r3, [pc, #252]	; (8006270 <HAL_FLASHEx_Erase+0x134>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006178:	2b00      	cmp	r3, #0
 800617a:	d013      	beq.n	80061a4 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800617c:	4b3c      	ldr	r3, [pc, #240]	; (8006270 <HAL_FLASHEx_Erase+0x134>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006184:	2b00      	cmp	r3, #0
 8006186:	d009      	beq.n	800619c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006188:	4b39      	ldr	r3, [pc, #228]	; (8006270 <HAL_FLASHEx_Erase+0x134>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a38      	ldr	r2, [pc, #224]	; (8006270 <HAL_FLASHEx_Erase+0x134>)
 800618e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006192:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8006194:	4b35      	ldr	r3, [pc, #212]	; (800626c <HAL_FLASHEx_Erase+0x130>)
 8006196:	2203      	movs	r2, #3
 8006198:	771a      	strb	r2, [r3, #28]
 800619a:	e016      	b.n	80061ca <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800619c:	4b33      	ldr	r3, [pc, #204]	; (800626c <HAL_FLASHEx_Erase+0x130>)
 800619e:	2201      	movs	r2, #1
 80061a0:	771a      	strb	r2, [r3, #28]
 80061a2:	e012      	b.n	80061ca <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80061a4:	4b32      	ldr	r3, [pc, #200]	; (8006270 <HAL_FLASHEx_Erase+0x134>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d009      	beq.n	80061c4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80061b0:	4b2f      	ldr	r3, [pc, #188]	; (8006270 <HAL_FLASHEx_Erase+0x134>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a2e      	ldr	r2, [pc, #184]	; (8006270 <HAL_FLASHEx_Erase+0x134>)
 80061b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061ba:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80061bc:	4b2b      	ldr	r3, [pc, #172]	; (800626c <HAL_FLASHEx_Erase+0x130>)
 80061be:	2202      	movs	r2, #2
 80061c0:	771a      	strb	r2, [r3, #28]
 80061c2:	e002      	b.n	80061ca <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80061c4:	4b29      	ldr	r3, [pc, #164]	; (800626c <HAL_FLASHEx_Erase+0x130>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d113      	bne.n	80061fa <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 f84c 	bl	8006274 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80061dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80061e0:	f7ff fefa 	bl	8005fd8 <FLASH_WaitForLastOperation>
 80061e4:	4603      	mov	r3, r0
 80061e6:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80061e8:	4b21      	ldr	r3, [pc, #132]	; (8006270 <HAL_FLASHEx_Erase+0x134>)
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	4a20      	ldr	r2, [pc, #128]	; (8006270 <HAL_FLASHEx_Erase+0x134>)
 80061ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061f2:	f023 0304 	bic.w	r3, r3, #4
 80061f6:	6153      	str	r3, [r2, #20]
 80061f8:	e02d      	b.n	8006256 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006200:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	60bb      	str	r3, [r7, #8]
 8006208:	e01d      	b.n	8006246 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	4619      	mov	r1, r3
 8006210:	68b8      	ldr	r0, [r7, #8]
 8006212:	f000 f857 	bl	80062c4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006216:	f24c 3050 	movw	r0, #50000	; 0xc350
 800621a:	f7ff fedd 	bl	8005fd8 <FLASH_WaitForLastOperation>
 800621e:	4603      	mov	r3, r0
 8006220:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006222:	4b13      	ldr	r3, [pc, #76]	; (8006270 <HAL_FLASHEx_Erase+0x134>)
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	4a12      	ldr	r2, [pc, #72]	; (8006270 <HAL_FLASHEx_Erase+0x134>)
 8006228:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800622c:	f023 0302 	bic.w	r3, r3, #2
 8006230:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8006232:	7bfb      	ldrb	r3, [r7, #15]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	601a      	str	r2, [r3, #0]
          break;
 800623e:	e00a      	b.n	8006256 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	3301      	adds	r3, #1
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	4413      	add	r3, r2
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	429a      	cmp	r2, r3
 8006254:	d3d9      	bcc.n	800620a <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006256:	f000 f86b 	bl	8006330 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800625a:	4b04      	ldr	r3, [pc, #16]	; (800626c <HAL_FLASHEx_Erase+0x130>)
 800625c:	2200      	movs	r2, #0
 800625e:	701a      	strb	r2, [r3, #0]

  return status;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	2000004c 	.word	0x2000004c
 8006270:	40022000 	.word	0x40022000

08006274 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d005      	beq.n	8006292 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006286:	4b0e      	ldr	r3, [pc, #56]	; (80062c0 <FLASH_MassErase+0x4c>)
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	4a0d      	ldr	r2, [pc, #52]	; (80062c0 <FLASH_MassErase+0x4c>)
 800628c:	f043 0304 	orr.w	r3, r3, #4
 8006290:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d005      	beq.n	80062a8 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800629c:	4b08      	ldr	r3, [pc, #32]	; (80062c0 <FLASH_MassErase+0x4c>)
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	4a07      	ldr	r2, [pc, #28]	; (80062c0 <FLASH_MassErase+0x4c>)
 80062a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80062a8:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <FLASH_MassErase+0x4c>)
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	4a04      	ldr	r2, [pc, #16]	; (80062c0 <FLASH_MassErase+0x4c>)
 80062ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b2:	6153      	str	r3, [r2, #20]
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	40022000 	.word	0x40022000

080062c4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d006      	beq.n	80062e6 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80062d8:	4b14      	ldr	r3, [pc, #80]	; (800632c <FLASH_PageErase+0x68>)
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	4a13      	ldr	r2, [pc, #76]	; (800632c <FLASH_PageErase+0x68>)
 80062de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062e2:	6153      	str	r3, [r2, #20]
 80062e4:	e005      	b.n	80062f2 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80062e6:	4b11      	ldr	r3, [pc, #68]	; (800632c <FLASH_PageErase+0x68>)
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	4a10      	ldr	r2, [pc, #64]	; (800632c <FLASH_PageErase+0x68>)
 80062ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80062f0:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80062f2:	4b0e      	ldr	r3, [pc, #56]	; (800632c <FLASH_PageErase+0x68>)
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006302:	490a      	ldr	r1, [pc, #40]	; (800632c <FLASH_PageErase+0x68>)
 8006304:	4313      	orrs	r3, r2
 8006306:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006308:	4b08      	ldr	r3, [pc, #32]	; (800632c <FLASH_PageErase+0x68>)
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	4a07      	ldr	r2, [pc, #28]	; (800632c <FLASH_PageErase+0x68>)
 800630e:	f043 0302 	orr.w	r3, r3, #2
 8006312:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006314:	4b05      	ldr	r3, [pc, #20]	; (800632c <FLASH_PageErase+0x68>)
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	4a04      	ldr	r2, [pc, #16]	; (800632c <FLASH_PageErase+0x68>)
 800631a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800631e:	6153      	str	r3, [r2, #20]
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	40022000 	.word	0x40022000

08006330 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8006336:	4b21      	ldr	r3, [pc, #132]	; (80063bc <FLASH_FlushCaches+0x8c>)
 8006338:	7f1b      	ldrb	r3, [r3, #28]
 800633a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800633c:	79fb      	ldrb	r3, [r7, #7]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d002      	beq.n	8006348 <FLASH_FlushCaches+0x18>
 8006342:	79fb      	ldrb	r3, [r7, #7]
 8006344:	2b03      	cmp	r3, #3
 8006346:	d117      	bne.n	8006378 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006348:	4b1d      	ldr	r3, [pc, #116]	; (80063c0 <FLASH_FlushCaches+0x90>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1c      	ldr	r2, [pc, #112]	; (80063c0 <FLASH_FlushCaches+0x90>)
 800634e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006352:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006354:	4b1a      	ldr	r3, [pc, #104]	; (80063c0 <FLASH_FlushCaches+0x90>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a19      	ldr	r2, [pc, #100]	; (80063c0 <FLASH_FlushCaches+0x90>)
 800635a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	4b17      	ldr	r3, [pc, #92]	; (80063c0 <FLASH_FlushCaches+0x90>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a16      	ldr	r2, [pc, #88]	; (80063c0 <FLASH_FlushCaches+0x90>)
 8006366:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800636a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800636c:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <FLASH_FlushCaches+0x90>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a13      	ldr	r2, [pc, #76]	; (80063c0 <FLASH_FlushCaches+0x90>)
 8006372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006376:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006378:	79fb      	ldrb	r3, [r7, #7]
 800637a:	2b02      	cmp	r3, #2
 800637c:	d002      	beq.n	8006384 <FLASH_FlushCaches+0x54>
 800637e:	79fb      	ldrb	r3, [r7, #7]
 8006380:	2b03      	cmp	r3, #3
 8006382:	d111      	bne.n	80063a8 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006384:	4b0e      	ldr	r3, [pc, #56]	; (80063c0 <FLASH_FlushCaches+0x90>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a0d      	ldr	r2, [pc, #52]	; (80063c0 <FLASH_FlushCaches+0x90>)
 800638a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <FLASH_FlushCaches+0x90>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a0a      	ldr	r2, [pc, #40]	; (80063c0 <FLASH_FlushCaches+0x90>)
 8006396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800639a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800639c:	4b08      	ldr	r3, [pc, #32]	; (80063c0 <FLASH_FlushCaches+0x90>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a07      	ldr	r2, [pc, #28]	; (80063c0 <FLASH_FlushCaches+0x90>)
 80063a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063a6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80063a8:	4b04      	ldr	r3, [pc, #16]	; (80063bc <FLASH_FlushCaches+0x8c>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	771a      	strb	r2, [r3, #28]
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	2000004c 	.word	0x2000004c
 80063c0:	40022000 	.word	0x40022000

080063c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063d2:	e17f      	b.n	80066d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	2101      	movs	r1, #1
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	fa01 f303 	lsl.w	r3, r1, r3
 80063e0:	4013      	ands	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 8171 	beq.w	80066ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f003 0303 	and.w	r3, r3, #3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d005      	beq.n	8006404 <HAL_GPIO_Init+0x40>
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f003 0303 	and.w	r3, r3, #3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d130      	bne.n	8006466 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	2203      	movs	r2, #3
 8006410:	fa02 f303 	lsl.w	r3, r2, r3
 8006414:	43db      	mvns	r3, r3
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4013      	ands	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	fa02 f303 	lsl.w	r3, r2, r3
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800643a:	2201      	movs	r2, #1
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	43db      	mvns	r3, r3
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	4013      	ands	r3, r2
 8006448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	091b      	lsrs	r3, r3, #4
 8006450:	f003 0201 	and.w	r2, r3, #1
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	2b03      	cmp	r3, #3
 8006470:	d118      	bne.n	80064a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006478:	2201      	movs	r2, #1
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	fa02 f303 	lsl.w	r3, r2, r3
 8006480:	43db      	mvns	r3, r3
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4013      	ands	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	08db      	lsrs	r3, r3, #3
 800648e:	f003 0201 	and.w	r2, r3, #1
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	fa02 f303 	lsl.w	r3, r2, r3
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f003 0303 	and.w	r3, r3, #3
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d017      	beq.n	80064e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	2203      	movs	r2, #3
 80064bc:	fa02 f303 	lsl.w	r3, r2, r3
 80064c0:	43db      	mvns	r3, r3
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4013      	ands	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f003 0303 	and.w	r3, r3, #3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d123      	bne.n	8006534 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	08da      	lsrs	r2, r3, #3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3208      	adds	r2, #8
 80064f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	220f      	movs	r2, #15
 8006504:	fa02 f303 	lsl.w	r3, r2, r3
 8006508:	43db      	mvns	r3, r3
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	4013      	ands	r3, r2
 800650e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	08da      	lsrs	r2, r3, #3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3208      	adds	r2, #8
 800652e:	6939      	ldr	r1, [r7, #16]
 8006530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	2203      	movs	r2, #3
 8006540:	fa02 f303 	lsl.w	r3, r2, r3
 8006544:	43db      	mvns	r3, r3
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4013      	ands	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f003 0203 	and.w	r2, r3, #3
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	fa02 f303 	lsl.w	r3, r2, r3
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 80ac 	beq.w	80066ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006576:	4b5f      	ldr	r3, [pc, #380]	; (80066f4 <HAL_GPIO_Init+0x330>)
 8006578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800657a:	4a5e      	ldr	r2, [pc, #376]	; (80066f4 <HAL_GPIO_Init+0x330>)
 800657c:	f043 0301 	orr.w	r3, r3, #1
 8006580:	6613      	str	r3, [r2, #96]	; 0x60
 8006582:	4b5c      	ldr	r3, [pc, #368]	; (80066f4 <HAL_GPIO_Init+0x330>)
 8006584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	60bb      	str	r3, [r7, #8]
 800658c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800658e:	4a5a      	ldr	r2, [pc, #360]	; (80066f8 <HAL_GPIO_Init+0x334>)
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	089b      	lsrs	r3, r3, #2
 8006594:	3302      	adds	r3, #2
 8006596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800659a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	220f      	movs	r2, #15
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	43db      	mvns	r3, r3
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4013      	ands	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80065b8:	d025      	beq.n	8006606 <HAL_GPIO_Init+0x242>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a4f      	ldr	r2, [pc, #316]	; (80066fc <HAL_GPIO_Init+0x338>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d01f      	beq.n	8006602 <HAL_GPIO_Init+0x23e>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a4e      	ldr	r2, [pc, #312]	; (8006700 <HAL_GPIO_Init+0x33c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d019      	beq.n	80065fe <HAL_GPIO_Init+0x23a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a4d      	ldr	r2, [pc, #308]	; (8006704 <HAL_GPIO_Init+0x340>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <HAL_GPIO_Init+0x236>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a4c      	ldr	r2, [pc, #304]	; (8006708 <HAL_GPIO_Init+0x344>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00d      	beq.n	80065f6 <HAL_GPIO_Init+0x232>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a4b      	ldr	r2, [pc, #300]	; (800670c <HAL_GPIO_Init+0x348>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d007      	beq.n	80065f2 <HAL_GPIO_Init+0x22e>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a4a      	ldr	r2, [pc, #296]	; (8006710 <HAL_GPIO_Init+0x34c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d101      	bne.n	80065ee <HAL_GPIO_Init+0x22a>
 80065ea:	2306      	movs	r3, #6
 80065ec:	e00c      	b.n	8006608 <HAL_GPIO_Init+0x244>
 80065ee:	2307      	movs	r3, #7
 80065f0:	e00a      	b.n	8006608 <HAL_GPIO_Init+0x244>
 80065f2:	2305      	movs	r3, #5
 80065f4:	e008      	b.n	8006608 <HAL_GPIO_Init+0x244>
 80065f6:	2304      	movs	r3, #4
 80065f8:	e006      	b.n	8006608 <HAL_GPIO_Init+0x244>
 80065fa:	2303      	movs	r3, #3
 80065fc:	e004      	b.n	8006608 <HAL_GPIO_Init+0x244>
 80065fe:	2302      	movs	r3, #2
 8006600:	e002      	b.n	8006608 <HAL_GPIO_Init+0x244>
 8006602:	2301      	movs	r3, #1
 8006604:	e000      	b.n	8006608 <HAL_GPIO_Init+0x244>
 8006606:	2300      	movs	r3, #0
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	f002 0203 	and.w	r2, r2, #3
 800660e:	0092      	lsls	r2, r2, #2
 8006610:	4093      	lsls	r3, r2
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006618:	4937      	ldr	r1, [pc, #220]	; (80066f8 <HAL_GPIO_Init+0x334>)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	089b      	lsrs	r3, r3, #2
 800661e:	3302      	adds	r3, #2
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006626:	4b3b      	ldr	r3, [pc, #236]	; (8006714 <HAL_GPIO_Init+0x350>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	43db      	mvns	r3, r3
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4013      	ands	r3, r2
 8006634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800664a:	4a32      	ldr	r2, [pc, #200]	; (8006714 <HAL_GPIO_Init+0x350>)
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006650:	4b30      	ldr	r3, [pc, #192]	; (8006714 <HAL_GPIO_Init+0x350>)
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	43db      	mvns	r3, r3
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4013      	ands	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4313      	orrs	r3, r2
 8006672:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006674:	4a27      	ldr	r2, [pc, #156]	; (8006714 <HAL_GPIO_Init+0x350>)
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800667a:	4b26      	ldr	r3, [pc, #152]	; (8006714 <HAL_GPIO_Init+0x350>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	43db      	mvns	r3, r3
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	4013      	ands	r3, r2
 8006688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4313      	orrs	r3, r2
 800669c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800669e:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <HAL_GPIO_Init+0x350>)
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80066a4:	4b1b      	ldr	r3, [pc, #108]	; (8006714 <HAL_GPIO_Init+0x350>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	43db      	mvns	r3, r3
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	4013      	ands	r3, r2
 80066b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80066c8:	4a12      	ldr	r2, [pc, #72]	; (8006714 <HAL_GPIO_Init+0x350>)
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	3301      	adds	r3, #1
 80066d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	fa22 f303 	lsr.w	r3, r2, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f47f ae78 	bne.w	80063d4 <HAL_GPIO_Init+0x10>
  }
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40021000 	.word	0x40021000
 80066f8:	40010000 	.word	0x40010000
 80066fc:	48000400 	.word	0x48000400
 8006700:	48000800 	.word	0x48000800
 8006704:	48000c00 	.word	0x48000c00
 8006708:	48001000 	.word	0x48001000
 800670c:	48001400 	.word	0x48001400
 8006710:	48001800 	.word	0x48001800
 8006714:	40010400 	.word	0x40010400

08006718 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	887b      	ldrh	r3, [r7, #2]
 800672a:	4013      	ands	r3, r2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006730:	2301      	movs	r3, #1
 8006732:	73fb      	strb	r3, [r7, #15]
 8006734:	e001      	b.n	800673a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800673a:	7bfb      	ldrb	r3, [r7, #15]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	807b      	strh	r3, [r7, #2]
 8006754:	4613      	mov	r3, r2
 8006756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006758:	787b      	ldrb	r3, [r7, #1]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800675e:	887a      	ldrh	r2, [r7, #2]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006764:	e002      	b.n	800676c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006766:	887a      	ldrh	r2, [r7, #2]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	4603      	mov	r3, r0
 8006780:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006782:	4b08      	ldr	r3, [pc, #32]	; (80067a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	88fb      	ldrh	r3, [r7, #6]
 8006788:	4013      	ands	r3, r2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d006      	beq.n	800679c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800678e:	4a05      	ldr	r2, [pc, #20]	; (80067a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006790:	88fb      	ldrh	r3, [r7, #6]
 8006792:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006794:	88fb      	ldrh	r3, [r7, #6]
 8006796:	4618      	mov	r0, r3
 8006798:	f7fd f840 	bl	800381c <HAL_GPIO_EXTI_Callback>
  }
}
 800679c:	bf00      	nop
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40010400 	.word	0x40010400

080067a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80067ac:	4b04      	ldr	r3, [pc, #16]	; (80067c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	40007000 	.word	0x40007000

080067c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d2:	d130      	bne.n	8006836 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80067d4:	4b23      	ldr	r3, [pc, #140]	; (8006864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067e0:	d038      	beq.n	8006854 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067e2:	4b20      	ldr	r3, [pc, #128]	; (8006864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80067ea:	4a1e      	ldr	r2, [pc, #120]	; (8006864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067f2:	4b1d      	ldr	r3, [pc, #116]	; (8006868 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2232      	movs	r2, #50	; 0x32
 80067f8:	fb02 f303 	mul.w	r3, r2, r3
 80067fc:	4a1b      	ldr	r2, [pc, #108]	; (800686c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80067fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006802:	0c9b      	lsrs	r3, r3, #18
 8006804:	3301      	adds	r3, #1
 8006806:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006808:	e002      	b.n	8006810 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3b01      	subs	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006810:	4b14      	ldr	r3, [pc, #80]	; (8006864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800681c:	d102      	bne.n	8006824 <HAL_PWREx_ControlVoltageScaling+0x60>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1f2      	bne.n	800680a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006824:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800682c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006830:	d110      	bne.n	8006854 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e00f      	b.n	8006856 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006836:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800683e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006842:	d007      	beq.n	8006854 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006844:	4b07      	ldr	r3, [pc, #28]	; (8006864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800684c:	4a05      	ldr	r2, [pc, #20]	; (8006864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800684e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006852:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40007000 	.word	0x40007000
 8006868:	20000040 	.word	0x20000040
 800686c:	431bde83 	.word	0x431bde83

08006870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e3d4      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006882:	4ba1      	ldr	r3, [pc, #644]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f003 030c 	and.w	r3, r3, #12
 800688a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800688c:	4b9e      	ldr	r3, [pc, #632]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0310 	and.w	r3, r3, #16
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 80e4 	beq.w	8006a6c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d007      	beq.n	80068ba <HAL_RCC_OscConfig+0x4a>
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	2b0c      	cmp	r3, #12
 80068ae:	f040 808b 	bne.w	80069c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	f040 8087 	bne.w	80069c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80068ba:	4b93      	ldr	r3, [pc, #588]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <HAL_RCC_OscConfig+0x62>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e3ac      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1a      	ldr	r2, [r3, #32]
 80068d6:	4b8c      	ldr	r3, [pc, #560]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d004      	beq.n	80068ec <HAL_RCC_OscConfig+0x7c>
 80068e2:	4b89      	ldr	r3, [pc, #548]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068ea:	e005      	b.n	80068f8 <HAL_RCC_OscConfig+0x88>
 80068ec:	4b86      	ldr	r3, [pc, #536]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 80068ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068f2:	091b      	lsrs	r3, r3, #4
 80068f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d223      	bcs.n	8006944 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fd41 	bl	8007388 <RCC_SetFlashLatencyFromMSIRange>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e38d      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006910:	4b7d      	ldr	r3, [pc, #500]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a7c      	ldr	r2, [pc, #496]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006916:	f043 0308 	orr.w	r3, r3, #8
 800691a:	6013      	str	r3, [r2, #0]
 800691c:	4b7a      	ldr	r3, [pc, #488]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	4977      	ldr	r1, [pc, #476]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 800692a:	4313      	orrs	r3, r2
 800692c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800692e:	4b76      	ldr	r3, [pc, #472]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	021b      	lsls	r3, r3, #8
 800693c:	4972      	ldr	r1, [pc, #456]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 800693e:	4313      	orrs	r3, r2
 8006940:	604b      	str	r3, [r1, #4]
 8006942:	e025      	b.n	8006990 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006944:	4b70      	ldr	r3, [pc, #448]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a6f      	ldr	r2, [pc, #444]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 800694a:	f043 0308 	orr.w	r3, r3, #8
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	4b6d      	ldr	r3, [pc, #436]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	496a      	ldr	r1, [pc, #424]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 800695e:	4313      	orrs	r3, r2
 8006960:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006962:	4b69      	ldr	r3, [pc, #420]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	4965      	ldr	r1, [pc, #404]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006972:	4313      	orrs	r3, r2
 8006974:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d109      	bne.n	8006990 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	4618      	mov	r0, r3
 8006982:	f000 fd01 	bl	8007388 <RCC_SetFlashLatencyFromMSIRange>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e34d      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006990:	f000 fc36 	bl	8007200 <HAL_RCC_GetSysClockFreq>
 8006994:	4602      	mov	r2, r0
 8006996:	4b5c      	ldr	r3, [pc, #368]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	091b      	lsrs	r3, r3, #4
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	495a      	ldr	r1, [pc, #360]	; (8006b0c <HAL_RCC_OscConfig+0x29c>)
 80069a2:	5ccb      	ldrb	r3, [r1, r3]
 80069a4:	f003 031f 	and.w	r3, r3, #31
 80069a8:	fa22 f303 	lsr.w	r3, r2, r3
 80069ac:	4a58      	ldr	r2, [pc, #352]	; (8006b10 <HAL_RCC_OscConfig+0x2a0>)
 80069ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80069b0:	4b58      	ldr	r3, [pc, #352]	; (8006b14 <HAL_RCC_OscConfig+0x2a4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff f865 	bl	8005a84 <HAL_InitTick>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d052      	beq.n	8006a6a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	e331      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d032      	beq.n	8006a36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80069d0:	4b4d      	ldr	r3, [pc, #308]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a4c      	ldr	r2, [pc, #304]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 80069d6:	f043 0301 	orr.w	r3, r3, #1
 80069da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80069dc:	f7fc fb1a 	bl	8003014 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069e4:	f7fc fb16 	bl	8003014 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e31a      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069f6:	4b44      	ldr	r3, [pc, #272]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0f0      	beq.n	80069e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a02:	4b41      	ldr	r3, [pc, #260]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a40      	ldr	r2, [pc, #256]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006a08:	f043 0308 	orr.w	r3, r3, #8
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	4b3e      	ldr	r3, [pc, #248]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	493b      	ldr	r1, [pc, #236]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a20:	4b39      	ldr	r3, [pc, #228]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	021b      	lsls	r3, r3, #8
 8006a2e:	4936      	ldr	r1, [pc, #216]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	604b      	str	r3, [r1, #4]
 8006a34:	e01a      	b.n	8006a6c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006a36:	4b34      	ldr	r3, [pc, #208]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a33      	ldr	r2, [pc, #204]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006a3c:	f023 0301 	bic.w	r3, r3, #1
 8006a40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006a42:	f7fc fae7 	bl	8003014 <HAL_GetTick>
 8006a46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a48:	e008      	b.n	8006a5c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a4a:	f7fc fae3 	bl	8003014 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d901      	bls.n	8006a5c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e2e7      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a5c:	4b2a      	ldr	r3, [pc, #168]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1f0      	bne.n	8006a4a <HAL_RCC_OscConfig+0x1da>
 8006a68:	e000      	b.n	8006a6c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d074      	beq.n	8006b62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	2b08      	cmp	r3, #8
 8006a7c:	d005      	beq.n	8006a8a <HAL_RCC_OscConfig+0x21a>
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	2b0c      	cmp	r3, #12
 8006a82:	d10e      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d10b      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a8a:	4b1f      	ldr	r3, [pc, #124]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d064      	beq.n	8006b60 <HAL_RCC_OscConfig+0x2f0>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d160      	bne.n	8006b60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e2c4      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aaa:	d106      	bne.n	8006aba <HAL_RCC_OscConfig+0x24a>
 8006aac:	4b16      	ldr	r3, [pc, #88]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	e01d      	b.n	8006af6 <HAL_RCC_OscConfig+0x286>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ac2:	d10c      	bne.n	8006ade <HAL_RCC_OscConfig+0x26e>
 8006ac4:	4b10      	ldr	r3, [pc, #64]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a0f      	ldr	r2, [pc, #60]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006aca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ace:	6013      	str	r3, [r2, #0]
 8006ad0:	4b0d      	ldr	r3, [pc, #52]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a0c      	ldr	r2, [pc, #48]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	e00b      	b.n	8006af6 <HAL_RCC_OscConfig+0x286>
 8006ade:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a09      	ldr	r2, [pc, #36]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a06      	ldr	r2, [pc, #24]	; (8006b08 <HAL_RCC_OscConfig+0x298>)
 8006af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006af4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01c      	beq.n	8006b38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afe:	f7fc fa89 	bl	8003014 <HAL_GetTick>
 8006b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b04:	e011      	b.n	8006b2a <HAL_RCC_OscConfig+0x2ba>
 8006b06:	bf00      	nop
 8006b08:	40021000 	.word	0x40021000
 8006b0c:	0800fc48 	.word	0x0800fc48
 8006b10:	20000040 	.word	0x20000040
 8006b14:	20000044 	.word	0x20000044
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b18:	f7fc fa7c 	bl	8003014 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b64      	cmp	r3, #100	; 0x64
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e280      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b2a:	4baf      	ldr	r3, [pc, #700]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0f0      	beq.n	8006b18 <HAL_RCC_OscConfig+0x2a8>
 8006b36:	e014      	b.n	8006b62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b38:	f7fc fa6c 	bl	8003014 <HAL_GetTick>
 8006b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b3e:	e008      	b.n	8006b52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b40:	f7fc fa68 	bl	8003014 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b64      	cmp	r3, #100	; 0x64
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e26c      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b52:	4ba5      	ldr	r3, [pc, #660]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1f0      	bne.n	8006b40 <HAL_RCC_OscConfig+0x2d0>
 8006b5e:	e000      	b.n	8006b62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d060      	beq.n	8006c30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d005      	beq.n	8006b80 <HAL_RCC_OscConfig+0x310>
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	2b0c      	cmp	r3, #12
 8006b78:	d119      	bne.n	8006bae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d116      	bne.n	8006bae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b80:	4b99      	ldr	r3, [pc, #612]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <HAL_RCC_OscConfig+0x328>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e249      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b98:	4b93      	ldr	r3, [pc, #588]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	061b      	lsls	r3, r3, #24
 8006ba6:	4990      	ldr	r1, [pc, #576]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bac:	e040      	b.n	8006c30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d023      	beq.n	8006bfe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bb6:	4b8c      	ldr	r3, [pc, #560]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a8b      	ldr	r2, [pc, #556]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc2:	f7fc fa27 	bl	8003014 <HAL_GetTick>
 8006bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bc8:	e008      	b.n	8006bdc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bca:	f7fc fa23 	bl	8003014 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e227      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bdc:	4b82      	ldr	r3, [pc, #520]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d0f0      	beq.n	8006bca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006be8:	4b7f      	ldr	r3, [pc, #508]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	061b      	lsls	r3, r3, #24
 8006bf6:	497c      	ldr	r1, [pc, #496]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	604b      	str	r3, [r1, #4]
 8006bfc:	e018      	b.n	8006c30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bfe:	4b7a      	ldr	r3, [pc, #488]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a79      	ldr	r2, [pc, #484]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0a:	f7fc fa03 	bl	8003014 <HAL_GetTick>
 8006c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c10:	e008      	b.n	8006c24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c12:	f7fc f9ff 	bl	8003014 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e203      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c24:	4b70      	ldr	r3, [pc, #448]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1f0      	bne.n	8006c12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d03c      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d01c      	beq.n	8006c7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c44:	4b68      	ldr	r3, [pc, #416]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c4a:	4a67      	ldr	r2, [pc, #412]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006c4c:	f043 0301 	orr.w	r3, r3, #1
 8006c50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c54:	f7fc f9de 	bl	8003014 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c5c:	f7fc f9da 	bl	8003014 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e1de      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c6e:	4b5e      	ldr	r3, [pc, #376]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d0ef      	beq.n	8006c5c <HAL_RCC_OscConfig+0x3ec>
 8006c7c:	e01b      	b.n	8006cb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c7e:	4b5a      	ldr	r3, [pc, #360]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c84:	4a58      	ldr	r2, [pc, #352]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006c86:	f023 0301 	bic.w	r3, r3, #1
 8006c8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c8e:	f7fc f9c1 	bl	8003014 <HAL_GetTick>
 8006c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c94:	e008      	b.n	8006ca8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c96:	f7fc f9bd 	bl	8003014 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e1c1      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ca8:	4b4f      	ldr	r3, [pc, #316]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1ef      	bne.n	8006c96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0304 	and.w	r3, r3, #4
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 80a6 	beq.w	8006e10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006cc8:	4b47      	ldr	r3, [pc, #284]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10d      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cd4:	4b44      	ldr	r3, [pc, #272]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd8:	4a43      	ldr	r2, [pc, #268]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cde:	6593      	str	r3, [r2, #88]	; 0x58
 8006ce0:	4b41      	ldr	r3, [pc, #260]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce8:	60bb      	str	r3, [r7, #8]
 8006cea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cec:	2301      	movs	r3, #1
 8006cee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cf0:	4b3e      	ldr	r3, [pc, #248]	; (8006dec <HAL_RCC_OscConfig+0x57c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d118      	bne.n	8006d2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cfc:	4b3b      	ldr	r3, [pc, #236]	; (8006dec <HAL_RCC_OscConfig+0x57c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a3a      	ldr	r2, [pc, #232]	; (8006dec <HAL_RCC_OscConfig+0x57c>)
 8006d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d08:	f7fc f984 	bl	8003014 <HAL_GetTick>
 8006d0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d10:	f7fc f980 	bl	8003014 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e184      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d22:	4b32      	ldr	r3, [pc, #200]	; (8006dec <HAL_RCC_OscConfig+0x57c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0f0      	beq.n	8006d10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d108      	bne.n	8006d48 <HAL_RCC_OscConfig+0x4d8>
 8006d36:	4b2c      	ldr	r3, [pc, #176]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3c:	4a2a      	ldr	r2, [pc, #168]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006d3e:	f043 0301 	orr.w	r3, r3, #1
 8006d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d46:	e024      	b.n	8006d92 <HAL_RCC_OscConfig+0x522>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2b05      	cmp	r3, #5
 8006d4e:	d110      	bne.n	8006d72 <HAL_RCC_OscConfig+0x502>
 8006d50:	4b25      	ldr	r3, [pc, #148]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d56:	4a24      	ldr	r2, [pc, #144]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006d58:	f043 0304 	orr.w	r3, r3, #4
 8006d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d60:	4b21      	ldr	r3, [pc, #132]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d66:	4a20      	ldr	r2, [pc, #128]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d70:	e00f      	b.n	8006d92 <HAL_RCC_OscConfig+0x522>
 8006d72:	4b1d      	ldr	r3, [pc, #116]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d78:	4a1b      	ldr	r2, [pc, #108]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006d7a:	f023 0301 	bic.w	r3, r3, #1
 8006d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d82:	4b19      	ldr	r3, [pc, #100]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d88:	4a17      	ldr	r2, [pc, #92]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006d8a:	f023 0304 	bic.w	r3, r3, #4
 8006d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d016      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d9a:	f7fc f93b 	bl	8003014 <HAL_GetTick>
 8006d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006da0:	e00a      	b.n	8006db8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006da2:	f7fc f937 	bl	8003014 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d901      	bls.n	8006db8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e139      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006db8:	4b0b      	ldr	r3, [pc, #44]	; (8006de8 <HAL_RCC_OscConfig+0x578>)
 8006dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0ed      	beq.n	8006da2 <HAL_RCC_OscConfig+0x532>
 8006dc6:	e01a      	b.n	8006dfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc8:	f7fc f924 	bl	8003014 <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006dce:	e00f      	b.n	8006df0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dd0:	f7fc f920 	bl	8003014 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d906      	bls.n	8006df0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e122      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
 8006de6:	bf00      	nop
 8006de8:	40021000 	.word	0x40021000
 8006dec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006df0:	4b90      	ldr	r3, [pc, #576]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e8      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dfe:	7ffb      	ldrb	r3, [r7, #31]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d105      	bne.n	8006e10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e04:	4b8b      	ldr	r3, [pc, #556]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e08:	4a8a      	ldr	r2, [pc, #552]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006e0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e0e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 8108 	beq.w	800702a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	f040 80d0 	bne.w	8006fc4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006e24:	4b83      	ldr	r3, [pc, #524]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f003 0203 	and.w	r2, r3, #3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d130      	bne.n	8006e9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e42:	3b01      	subs	r3, #1
 8006e44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d127      	bne.n	8006e9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d11f      	bne.n	8006e9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e64:	2a07      	cmp	r2, #7
 8006e66:	bf14      	ite	ne
 8006e68:	2201      	movne	r2, #1
 8006e6a:	2200      	moveq	r2, #0
 8006e6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d113      	bne.n	8006e9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7c:	085b      	lsrs	r3, r3, #1
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d109      	bne.n	8006e9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e90:	085b      	lsrs	r3, r3, #1
 8006e92:	3b01      	subs	r3, #1
 8006e94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d06e      	beq.n	8006f78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	2b0c      	cmp	r3, #12
 8006e9e:	d069      	beq.n	8006f74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006ea0:	4b64      	ldr	r3, [pc, #400]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d105      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006eac:	4b61      	ldr	r3, [pc, #388]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e0b7      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006ebc:	4b5d      	ldr	r3, [pc, #372]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a5c      	ldr	r2, [pc, #368]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ec6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ec8:	f7fc f8a4 	bl	8003014 <HAL_GetTick>
 8006ecc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ed0:	f7fc f8a0 	bl	8003014 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e0a4      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ee2:	4b54      	ldr	r3, [pc, #336]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f0      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eee:	4b51      	ldr	r3, [pc, #324]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	4b51      	ldr	r3, [pc, #324]	; (8007038 <HAL_RCC_OscConfig+0x7c8>)
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006efe:	3a01      	subs	r2, #1
 8006f00:	0112      	lsls	r2, r2, #4
 8006f02:	4311      	orrs	r1, r2
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f08:	0212      	lsls	r2, r2, #8
 8006f0a:	4311      	orrs	r1, r2
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006f10:	0852      	lsrs	r2, r2, #1
 8006f12:	3a01      	subs	r2, #1
 8006f14:	0552      	lsls	r2, r2, #21
 8006f16:	4311      	orrs	r1, r2
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006f1c:	0852      	lsrs	r2, r2, #1
 8006f1e:	3a01      	subs	r2, #1
 8006f20:	0652      	lsls	r2, r2, #25
 8006f22:	4311      	orrs	r1, r2
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f28:	0912      	lsrs	r2, r2, #4
 8006f2a:	0452      	lsls	r2, r2, #17
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	4941      	ldr	r1, [pc, #260]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006f34:	4b3f      	ldr	r3, [pc, #252]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a3e      	ldr	r2, [pc, #248]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f40:	4b3c      	ldr	r3, [pc, #240]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	4a3b      	ldr	r2, [pc, #236]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f4c:	f7fc f862 	bl	8003014 <HAL_GetTick>
 8006f50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f52:	e008      	b.n	8006f66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f54:	f7fc f85e 	bl	8003014 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e062      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f66:	4b33      	ldr	r3, [pc, #204]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d0f0      	beq.n	8006f54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f72:	e05a      	b.n	800702a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e059      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f78:	4b2e      	ldr	r3, [pc, #184]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d152      	bne.n	800702a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006f84:	4b2b      	ldr	r3, [pc, #172]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a2a      	ldr	r2, [pc, #168]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f90:	4b28      	ldr	r3, [pc, #160]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	4a27      	ldr	r2, [pc, #156]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f9c:	f7fc f83a 	bl	8003014 <HAL_GetTick>
 8006fa0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fa4:	f7fc f836 	bl	8003014 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e03a      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fb6:	4b1f      	ldr	r3, [pc, #124]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0f0      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x734>
 8006fc2:	e032      	b.n	800702a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	2b0c      	cmp	r3, #12
 8006fc8:	d02d      	beq.n	8007026 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fca:	4b1a      	ldr	r3, [pc, #104]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a19      	ldr	r2, [pc, #100]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fd4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006fd6:	4b17      	ldr	r3, [pc, #92]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d105      	bne.n	8006fee <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006fe2:	4b14      	ldr	r3, [pc, #80]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	4a13      	ldr	r2, [pc, #76]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006fe8:	f023 0303 	bic.w	r3, r3, #3
 8006fec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006fee:	4b11      	ldr	r3, [pc, #68]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	4a10      	ldr	r2, [pc, #64]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 8006ff4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ffc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffe:	f7fc f809 	bl	8003014 <HAL_GetTick>
 8007002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007004:	e008      	b.n	8007018 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007006:	f7fc f805 	bl	8003014 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d901      	bls.n	8007018 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e009      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007018:	4b06      	ldr	r3, [pc, #24]	; (8007034 <HAL_RCC_OscConfig+0x7c4>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1f0      	bne.n	8007006 <HAL_RCC_OscConfig+0x796>
 8007024:	e001      	b.n	800702a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e000      	b.n	800702c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3720      	adds	r7, #32
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40021000 	.word	0x40021000
 8007038:	f99d808c 	.word	0xf99d808c

0800703c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e0c8      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007050:	4b66      	ldr	r3, [pc, #408]	; (80071ec <HAL_RCC_ClockConfig+0x1b0>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d910      	bls.n	8007080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800705e:	4b63      	ldr	r3, [pc, #396]	; (80071ec <HAL_RCC_ClockConfig+0x1b0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f023 0207 	bic.w	r2, r3, #7
 8007066:	4961      	ldr	r1, [pc, #388]	; (80071ec <HAL_RCC_ClockConfig+0x1b0>)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	4313      	orrs	r3, r2
 800706c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800706e:	4b5f      	ldr	r3, [pc, #380]	; (80071ec <HAL_RCC_ClockConfig+0x1b0>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d001      	beq.n	8007080 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e0b0      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d04c      	beq.n	8007126 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	2b03      	cmp	r3, #3
 8007092:	d107      	bne.n	80070a4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007094:	4b56      	ldr	r3, [pc, #344]	; (80071f0 <HAL_RCC_ClockConfig+0x1b4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d121      	bne.n	80070e4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e09e      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d107      	bne.n	80070bc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070ac:	4b50      	ldr	r3, [pc, #320]	; (80071f0 <HAL_RCC_ClockConfig+0x1b4>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d115      	bne.n	80070e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e092      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d107      	bne.n	80070d4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80070c4:	4b4a      	ldr	r3, [pc, #296]	; (80071f0 <HAL_RCC_ClockConfig+0x1b4>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d109      	bne.n	80070e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e086      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070d4:	4b46      	ldr	r3, [pc, #280]	; (80071f0 <HAL_RCC_ClockConfig+0x1b4>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e07e      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070e4:	4b42      	ldr	r3, [pc, #264]	; (80071f0 <HAL_RCC_ClockConfig+0x1b4>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f023 0203 	bic.w	r2, r3, #3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	493f      	ldr	r1, [pc, #252]	; (80071f0 <HAL_RCC_ClockConfig+0x1b4>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070f6:	f7fb ff8d 	bl	8003014 <HAL_GetTick>
 80070fa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070fc:	e00a      	b.n	8007114 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070fe:	f7fb ff89 	bl	8003014 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	f241 3288 	movw	r2, #5000	; 0x1388
 800710c:	4293      	cmp	r3, r2
 800710e:	d901      	bls.n	8007114 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e066      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007114:	4b36      	ldr	r3, [pc, #216]	; (80071f0 <HAL_RCC_ClockConfig+0x1b4>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f003 020c 	and.w	r2, r3, #12
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	429a      	cmp	r2, r3
 8007124:	d1eb      	bne.n	80070fe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d008      	beq.n	8007144 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007132:	4b2f      	ldr	r3, [pc, #188]	; (80071f0 <HAL_RCC_ClockConfig+0x1b4>)
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	492c      	ldr	r1, [pc, #176]	; (80071f0 <HAL_RCC_ClockConfig+0x1b4>)
 8007140:	4313      	orrs	r3, r2
 8007142:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007144:	4b29      	ldr	r3, [pc, #164]	; (80071ec <HAL_RCC_ClockConfig+0x1b0>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	429a      	cmp	r2, r3
 8007150:	d210      	bcs.n	8007174 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007152:	4b26      	ldr	r3, [pc, #152]	; (80071ec <HAL_RCC_ClockConfig+0x1b0>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f023 0207 	bic.w	r2, r3, #7
 800715a:	4924      	ldr	r1, [pc, #144]	; (80071ec <HAL_RCC_ClockConfig+0x1b0>)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	4313      	orrs	r3, r2
 8007160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007162:	4b22      	ldr	r3, [pc, #136]	; (80071ec <HAL_RCC_ClockConfig+0x1b0>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	429a      	cmp	r2, r3
 800716e:	d001      	beq.n	8007174 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e036      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d008      	beq.n	8007192 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007180:	4b1b      	ldr	r3, [pc, #108]	; (80071f0 <HAL_RCC_ClockConfig+0x1b4>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	4918      	ldr	r1, [pc, #96]	; (80071f0 <HAL_RCC_ClockConfig+0x1b4>)
 800718e:	4313      	orrs	r3, r2
 8007190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d009      	beq.n	80071b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800719e:	4b14      	ldr	r3, [pc, #80]	; (80071f0 <HAL_RCC_ClockConfig+0x1b4>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	4910      	ldr	r1, [pc, #64]	; (80071f0 <HAL_RCC_ClockConfig+0x1b4>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80071b2:	f000 f825 	bl	8007200 <HAL_RCC_GetSysClockFreq>
 80071b6:	4602      	mov	r2, r0
 80071b8:	4b0d      	ldr	r3, [pc, #52]	; (80071f0 <HAL_RCC_ClockConfig+0x1b4>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	091b      	lsrs	r3, r3, #4
 80071be:	f003 030f 	and.w	r3, r3, #15
 80071c2:	490c      	ldr	r1, [pc, #48]	; (80071f4 <HAL_RCC_ClockConfig+0x1b8>)
 80071c4:	5ccb      	ldrb	r3, [r1, r3]
 80071c6:	f003 031f 	and.w	r3, r3, #31
 80071ca:	fa22 f303 	lsr.w	r3, r2, r3
 80071ce:	4a0a      	ldr	r2, [pc, #40]	; (80071f8 <HAL_RCC_ClockConfig+0x1bc>)
 80071d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80071d2:	4b0a      	ldr	r3, [pc, #40]	; (80071fc <HAL_RCC_ClockConfig+0x1c0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe fc54 	bl	8005a84 <HAL_InitTick>
 80071dc:	4603      	mov	r3, r0
 80071de:	72fb      	strb	r3, [r7, #11]

  return status;
 80071e0:	7afb      	ldrb	r3, [r7, #11]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	40022000 	.word	0x40022000
 80071f0:	40021000 	.word	0x40021000
 80071f4:	0800fc48 	.word	0x0800fc48
 80071f8:	20000040 	.word	0x20000040
 80071fc:	20000044 	.word	0x20000044

08007200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007200:	b480      	push	{r7}
 8007202:	b089      	sub	sp, #36	; 0x24
 8007204:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	61fb      	str	r3, [r7, #28]
 800720a:	2300      	movs	r3, #0
 800720c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800720e:	4b3e      	ldr	r3, [pc, #248]	; (8007308 <HAL_RCC_GetSysClockFreq+0x108>)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f003 030c 	and.w	r3, r3, #12
 8007216:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007218:	4b3b      	ldr	r3, [pc, #236]	; (8007308 <HAL_RCC_GetSysClockFreq+0x108>)
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f003 0303 	and.w	r3, r3, #3
 8007220:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d005      	beq.n	8007234 <HAL_RCC_GetSysClockFreq+0x34>
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	2b0c      	cmp	r3, #12
 800722c:	d121      	bne.n	8007272 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d11e      	bne.n	8007272 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007234:	4b34      	ldr	r3, [pc, #208]	; (8007308 <HAL_RCC_GetSysClockFreq+0x108>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b00      	cmp	r3, #0
 800723e:	d107      	bne.n	8007250 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007240:	4b31      	ldr	r3, [pc, #196]	; (8007308 <HAL_RCC_GetSysClockFreq+0x108>)
 8007242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007246:	0a1b      	lsrs	r3, r3, #8
 8007248:	f003 030f 	and.w	r3, r3, #15
 800724c:	61fb      	str	r3, [r7, #28]
 800724e:	e005      	b.n	800725c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007250:	4b2d      	ldr	r3, [pc, #180]	; (8007308 <HAL_RCC_GetSysClockFreq+0x108>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	091b      	lsrs	r3, r3, #4
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800725c:	4a2b      	ldr	r2, [pc, #172]	; (800730c <HAL_RCC_GetSysClockFreq+0x10c>)
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007264:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10d      	bne.n	8007288 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007270:	e00a      	b.n	8007288 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	2b04      	cmp	r3, #4
 8007276:	d102      	bne.n	800727e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007278:	4b25      	ldr	r3, [pc, #148]	; (8007310 <HAL_RCC_GetSysClockFreq+0x110>)
 800727a:	61bb      	str	r3, [r7, #24]
 800727c:	e004      	b.n	8007288 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2b08      	cmp	r3, #8
 8007282:	d101      	bne.n	8007288 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007284:	4b23      	ldr	r3, [pc, #140]	; (8007314 <HAL_RCC_GetSysClockFreq+0x114>)
 8007286:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	2b0c      	cmp	r3, #12
 800728c:	d134      	bne.n	80072f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800728e:	4b1e      	ldr	r3, [pc, #120]	; (8007308 <HAL_RCC_GetSysClockFreq+0x108>)
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b02      	cmp	r3, #2
 800729c:	d003      	beq.n	80072a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d003      	beq.n	80072ac <HAL_RCC_GetSysClockFreq+0xac>
 80072a4:	e005      	b.n	80072b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80072a6:	4b1a      	ldr	r3, [pc, #104]	; (8007310 <HAL_RCC_GetSysClockFreq+0x110>)
 80072a8:	617b      	str	r3, [r7, #20]
      break;
 80072aa:	e005      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80072ac:	4b19      	ldr	r3, [pc, #100]	; (8007314 <HAL_RCC_GetSysClockFreq+0x114>)
 80072ae:	617b      	str	r3, [r7, #20]
      break;
 80072b0:	e002      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	617b      	str	r3, [r7, #20]
      break;
 80072b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072b8:	4b13      	ldr	r3, [pc, #76]	; (8007308 <HAL_RCC_GetSysClockFreq+0x108>)
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	091b      	lsrs	r3, r3, #4
 80072be:	f003 0307 	and.w	r3, r3, #7
 80072c2:	3301      	adds	r3, #1
 80072c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80072c6:	4b10      	ldr	r3, [pc, #64]	; (8007308 <HAL_RCC_GetSysClockFreq+0x108>)
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	0a1b      	lsrs	r3, r3, #8
 80072cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	fb02 f203 	mul.w	r2, r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072de:	4b0a      	ldr	r3, [pc, #40]	; (8007308 <HAL_RCC_GetSysClockFreq+0x108>)
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	0e5b      	lsrs	r3, r3, #25
 80072e4:	f003 0303 	and.w	r3, r3, #3
 80072e8:	3301      	adds	r3, #1
 80072ea:	005b      	lsls	r3, r3, #1
 80072ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80072f8:	69bb      	ldr	r3, [r7, #24]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3724      	adds	r7, #36	; 0x24
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	40021000 	.word	0x40021000
 800730c:	0800fc60 	.word	0x0800fc60
 8007310:	00f42400 	.word	0x00f42400
 8007314:	007a1200 	.word	0x007a1200

08007318 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800731c:	4b03      	ldr	r3, [pc, #12]	; (800732c <HAL_RCC_GetHCLKFreq+0x14>)
 800731e:	681b      	ldr	r3, [r3, #0]
}
 8007320:	4618      	mov	r0, r3
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	20000040 	.word	0x20000040

08007330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007334:	f7ff fff0 	bl	8007318 <HAL_RCC_GetHCLKFreq>
 8007338:	4602      	mov	r2, r0
 800733a:	4b06      	ldr	r3, [pc, #24]	; (8007354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	0a1b      	lsrs	r3, r3, #8
 8007340:	f003 0307 	and.w	r3, r3, #7
 8007344:	4904      	ldr	r1, [pc, #16]	; (8007358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007346:	5ccb      	ldrb	r3, [r1, r3]
 8007348:	f003 031f 	and.w	r3, r3, #31
 800734c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007350:	4618      	mov	r0, r3
 8007352:	bd80      	pop	{r7, pc}
 8007354:	40021000 	.word	0x40021000
 8007358:	0800fc58 	.word	0x0800fc58

0800735c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007360:	f7ff ffda 	bl	8007318 <HAL_RCC_GetHCLKFreq>
 8007364:	4602      	mov	r2, r0
 8007366:	4b06      	ldr	r3, [pc, #24]	; (8007380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	0adb      	lsrs	r3, r3, #11
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	4904      	ldr	r1, [pc, #16]	; (8007384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007372:	5ccb      	ldrb	r3, [r1, r3]
 8007374:	f003 031f 	and.w	r3, r3, #31
 8007378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800737c:	4618      	mov	r0, r3
 800737e:	bd80      	pop	{r7, pc}
 8007380:	40021000 	.word	0x40021000
 8007384:	0800fc58 	.word	0x0800fc58

08007388 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007390:	2300      	movs	r3, #0
 8007392:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007394:	4b2a      	ldr	r3, [pc, #168]	; (8007440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80073a0:	f7ff fa02 	bl	80067a8 <HAL_PWREx_GetVoltageRange>
 80073a4:	6178      	str	r0, [r7, #20]
 80073a6:	e014      	b.n	80073d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80073a8:	4b25      	ldr	r3, [pc, #148]	; (8007440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ac:	4a24      	ldr	r2, [pc, #144]	; (8007440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073b2:	6593      	str	r3, [r2, #88]	; 0x58
 80073b4:	4b22      	ldr	r3, [pc, #136]	; (8007440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80073c0:	f7ff f9f2 	bl	80067a8 <HAL_PWREx_GetVoltageRange>
 80073c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80073c6:	4b1e      	ldr	r3, [pc, #120]	; (8007440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ca:	4a1d      	ldr	r2, [pc, #116]	; (8007440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073d8:	d10b      	bne.n	80073f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b80      	cmp	r3, #128	; 0x80
 80073de:	d919      	bls.n	8007414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2ba0      	cmp	r3, #160	; 0xa0
 80073e4:	d902      	bls.n	80073ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80073e6:	2302      	movs	r3, #2
 80073e8:	613b      	str	r3, [r7, #16]
 80073ea:	e013      	b.n	8007414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80073ec:	2301      	movs	r3, #1
 80073ee:	613b      	str	r3, [r7, #16]
 80073f0:	e010      	b.n	8007414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b80      	cmp	r3, #128	; 0x80
 80073f6:	d902      	bls.n	80073fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80073f8:	2303      	movs	r3, #3
 80073fa:	613b      	str	r3, [r7, #16]
 80073fc:	e00a      	b.n	8007414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b80      	cmp	r3, #128	; 0x80
 8007402:	d102      	bne.n	800740a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007404:	2302      	movs	r3, #2
 8007406:	613b      	str	r3, [r7, #16]
 8007408:	e004      	b.n	8007414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b70      	cmp	r3, #112	; 0x70
 800740e:	d101      	bne.n	8007414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007410:	2301      	movs	r3, #1
 8007412:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007414:	4b0b      	ldr	r3, [pc, #44]	; (8007444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f023 0207 	bic.w	r2, r3, #7
 800741c:	4909      	ldr	r1, [pc, #36]	; (8007444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007424:	4b07      	ldr	r3, [pc, #28]	; (8007444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0307 	and.w	r3, r3, #7
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	429a      	cmp	r2, r3
 8007430:	d001      	beq.n	8007436 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e000      	b.n	8007438 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	40021000 	.word	0x40021000
 8007444:	40022000 	.word	0x40022000

08007448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007450:	2300      	movs	r3, #0
 8007452:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007454:	2300      	movs	r3, #0
 8007456:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007460:	2b00      	cmp	r3, #0
 8007462:	d041      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007468:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800746c:	d02a      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800746e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007472:	d824      	bhi.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007474:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007478:	d008      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800747a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800747e:	d81e      	bhi.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007488:	d010      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800748a:	e018      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800748c:	4b86      	ldr	r3, [pc, #536]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	4a85      	ldr	r2, [pc, #532]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007496:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007498:	e015      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3304      	adds	r3, #4
 800749e:	2100      	movs	r1, #0
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 fabb 	bl	8007a1c <RCCEx_PLLSAI1_Config>
 80074a6:	4603      	mov	r3, r0
 80074a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074aa:	e00c      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3320      	adds	r3, #32
 80074b0:	2100      	movs	r1, #0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fba6 	bl	8007c04 <RCCEx_PLLSAI2_Config>
 80074b8:	4603      	mov	r3, r0
 80074ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074bc:	e003      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	74fb      	strb	r3, [r7, #19]
      break;
 80074c2:	e000      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80074c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074c6:	7cfb      	ldrb	r3, [r7, #19]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10b      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074cc:	4b76      	ldr	r3, [pc, #472]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074da:	4973      	ldr	r1, [pc, #460]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80074e2:	e001      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e4:	7cfb      	ldrb	r3, [r7, #19]
 80074e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d041      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074fc:	d02a      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80074fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007502:	d824      	bhi.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007508:	d008      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800750a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800750e:	d81e      	bhi.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007518:	d010      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800751a:	e018      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800751c:	4b62      	ldr	r3, [pc, #392]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	4a61      	ldr	r2, [pc, #388]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007526:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007528:	e015      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3304      	adds	r3, #4
 800752e:	2100      	movs	r1, #0
 8007530:	4618      	mov	r0, r3
 8007532:	f000 fa73 	bl	8007a1c <RCCEx_PLLSAI1_Config>
 8007536:	4603      	mov	r3, r0
 8007538:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800753a:	e00c      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3320      	adds	r3, #32
 8007540:	2100      	movs	r1, #0
 8007542:	4618      	mov	r0, r3
 8007544:	f000 fb5e 	bl	8007c04 <RCCEx_PLLSAI2_Config>
 8007548:	4603      	mov	r3, r0
 800754a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800754c:	e003      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	74fb      	strb	r3, [r7, #19]
      break;
 8007552:	e000      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007556:	7cfb      	ldrb	r3, [r7, #19]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10b      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800755c:	4b52      	ldr	r3, [pc, #328]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800755e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007562:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800756a:	494f      	ldr	r1, [pc, #316]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800756c:	4313      	orrs	r3, r2
 800756e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007572:	e001      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007574:	7cfb      	ldrb	r3, [r7, #19]
 8007576:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 80a0 	beq.w	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007586:	2300      	movs	r3, #0
 8007588:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800758a:	4b47      	ldr	r3, [pc, #284]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800758c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800758e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007596:	2301      	movs	r3, #1
 8007598:	e000      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800759a:	2300      	movs	r3, #0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00d      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075a0:	4b41      	ldr	r3, [pc, #260]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a4:	4a40      	ldr	r2, [pc, #256]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075aa:	6593      	str	r3, [r2, #88]	; 0x58
 80075ac:	4b3e      	ldr	r3, [pc, #248]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b4:	60bb      	str	r3, [r7, #8]
 80075b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075b8:	2301      	movs	r3, #1
 80075ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075bc:	4b3b      	ldr	r3, [pc, #236]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a3a      	ldr	r2, [pc, #232]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80075c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075c8:	f7fb fd24 	bl	8003014 <HAL_GetTick>
 80075cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80075ce:	e009      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075d0:	f7fb fd20 	bl	8003014 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d902      	bls.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	74fb      	strb	r3, [r7, #19]
        break;
 80075e2:	e005      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80075e4:	4b31      	ldr	r3, [pc, #196]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d0ef      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80075f0:	7cfb      	ldrb	r3, [r7, #19]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d15c      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80075f6:	4b2c      	ldr	r3, [pc, #176]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007600:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d01f      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	429a      	cmp	r2, r3
 8007612:	d019      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007614:	4b24      	ldr	r3, [pc, #144]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800761a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800761e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007620:	4b21      	ldr	r3, [pc, #132]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007626:	4a20      	ldr	r2, [pc, #128]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800762c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007630:	4b1d      	ldr	r3, [pc, #116]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007636:	4a1c      	ldr	r2, [pc, #112]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800763c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007640:	4a19      	ldr	r2, [pc, #100]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d016      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007652:	f7fb fcdf 	bl	8003014 <HAL_GetTick>
 8007656:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007658:	e00b      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800765a:	f7fb fcdb 	bl	8003014 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	f241 3288 	movw	r2, #5000	; 0x1388
 8007668:	4293      	cmp	r3, r2
 800766a:	d902      	bls.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	74fb      	strb	r3, [r7, #19]
            break;
 8007670:	e006      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007672:	4b0d      	ldr	r3, [pc, #52]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0ec      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007680:	7cfb      	ldrb	r3, [r7, #19]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10c      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007686:	4b08      	ldr	r3, [pc, #32]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007696:	4904      	ldr	r1, [pc, #16]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007698:	4313      	orrs	r3, r2
 800769a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800769e:	e009      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076a0:	7cfb      	ldrb	r3, [r7, #19]
 80076a2:	74bb      	strb	r3, [r7, #18]
 80076a4:	e006      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80076a6:	bf00      	nop
 80076a8:	40021000 	.word	0x40021000
 80076ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b0:	7cfb      	ldrb	r3, [r7, #19]
 80076b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076b4:	7c7b      	ldrb	r3, [r7, #17]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d105      	bne.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076ba:	4b9e      	ldr	r3, [pc, #632]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076be:	4a9d      	ldr	r2, [pc, #628]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076d2:	4b98      	ldr	r3, [pc, #608]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d8:	f023 0203 	bic.w	r2, r3, #3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e0:	4994      	ldr	r1, [pc, #592]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0302 	and.w	r3, r3, #2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00a      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076f4:	4b8f      	ldr	r3, [pc, #572]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076fa:	f023 020c 	bic.w	r2, r3, #12
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007702:	498c      	ldr	r1, [pc, #560]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007704:	4313      	orrs	r3, r2
 8007706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0304 	and.w	r3, r3, #4
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00a      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007716:	4b87      	ldr	r3, [pc, #540]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007724:	4983      	ldr	r1, [pc, #524]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007726:	4313      	orrs	r3, r2
 8007728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0308 	and.w	r3, r3, #8
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00a      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007738:	4b7e      	ldr	r3, [pc, #504]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800773a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007746:	497b      	ldr	r1, [pc, #492]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007748:	4313      	orrs	r3, r2
 800774a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0310 	and.w	r3, r3, #16
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800775a:	4b76      	ldr	r3, [pc, #472]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800775c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007768:	4972      	ldr	r1, [pc, #456]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800776a:	4313      	orrs	r3, r2
 800776c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00a      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800777c:	4b6d      	ldr	r3, [pc, #436]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800777e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007782:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800778a:	496a      	ldr	r1, [pc, #424]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800778c:	4313      	orrs	r3, r2
 800778e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00a      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800779e:	4b65      	ldr	r3, [pc, #404]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ac:	4961      	ldr	r1, [pc, #388]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00a      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077c0:	4b5c      	ldr	r3, [pc, #368]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ce:	4959      	ldr	r1, [pc, #356]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00a      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80077e2:	4b54      	ldr	r3, [pc, #336]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f0:	4950      	ldr	r1, [pc, #320]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00a      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007804:	4b4b      	ldr	r3, [pc, #300]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800780a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007812:	4948      	ldr	r1, [pc, #288]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007814:	4313      	orrs	r3, r2
 8007816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007826:	4b43      	ldr	r3, [pc, #268]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800782c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007834:	493f      	ldr	r1, [pc, #252]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007836:	4313      	orrs	r3, r2
 8007838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d028      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007848:	4b3a      	ldr	r3, [pc, #232]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800784a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800784e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007856:	4937      	ldr	r1, [pc, #220]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007858:	4313      	orrs	r3, r2
 800785a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007866:	d106      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007868:	4b32      	ldr	r3, [pc, #200]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	4a31      	ldr	r2, [pc, #196]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800786e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007872:	60d3      	str	r3, [r2, #12]
 8007874:	e011      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800787a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800787e:	d10c      	bne.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3304      	adds	r3, #4
 8007884:	2101      	movs	r1, #1
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f8c8 	bl	8007a1c <RCCEx_PLLSAI1_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007890:	7cfb      	ldrb	r3, [r7, #19]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007896:	7cfb      	ldrb	r3, [r7, #19]
 8007898:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d028      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80078a6:	4b23      	ldr	r3, [pc, #140]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b4:	491f      	ldr	r1, [pc, #124]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078c4:	d106      	bne.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078c6:	4b1b      	ldr	r3, [pc, #108]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	4a1a      	ldr	r2, [pc, #104]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078d0:	60d3      	str	r3, [r2, #12]
 80078d2:	e011      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078dc:	d10c      	bne.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	3304      	adds	r3, #4
 80078e2:	2101      	movs	r1, #1
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 f899 	bl	8007a1c <RCCEx_PLLSAI1_Config>
 80078ea:	4603      	mov	r3, r0
 80078ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078ee:	7cfb      	ldrb	r3, [r7, #19]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80078f4:	7cfb      	ldrb	r3, [r7, #19]
 80078f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d02b      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007904:	4b0b      	ldr	r3, [pc, #44]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800790a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007912:	4908      	ldr	r1, [pc, #32]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007914:	4313      	orrs	r3, r2
 8007916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800791e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007922:	d109      	bne.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007924:	4b03      	ldr	r3, [pc, #12]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	4a02      	ldr	r2, [pc, #8]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800792a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800792e:	60d3      	str	r3, [r2, #12]
 8007930:	e014      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007932:	bf00      	nop
 8007934:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800793c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007940:	d10c      	bne.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3304      	adds	r3, #4
 8007946:	2101      	movs	r1, #1
 8007948:	4618      	mov	r0, r3
 800794a:	f000 f867 	bl	8007a1c <RCCEx_PLLSAI1_Config>
 800794e:	4603      	mov	r3, r0
 8007950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007952:	7cfb      	ldrb	r3, [r7, #19]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007958:	7cfb      	ldrb	r3, [r7, #19]
 800795a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d02f      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007968:	4b2b      	ldr	r3, [pc, #172]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800796a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800796e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007976:	4928      	ldr	r1, [pc, #160]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007978:	4313      	orrs	r3, r2
 800797a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007986:	d10d      	bne.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	3304      	adds	r3, #4
 800798c:	2102      	movs	r1, #2
 800798e:	4618      	mov	r0, r3
 8007990:	f000 f844 	bl	8007a1c <RCCEx_PLLSAI1_Config>
 8007994:	4603      	mov	r3, r0
 8007996:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007998:	7cfb      	ldrb	r3, [r7, #19]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d014      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800799e:	7cfb      	ldrb	r3, [r7, #19]
 80079a0:	74bb      	strb	r3, [r7, #18]
 80079a2:	e011      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ac:	d10c      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3320      	adds	r3, #32
 80079b2:	2102      	movs	r1, #2
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 f925 	bl	8007c04 <RCCEx_PLLSAI2_Config>
 80079ba:	4603      	mov	r3, r0
 80079bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80079be:	7cfb      	ldrb	r3, [r7, #19]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80079c4:	7cfb      	ldrb	r3, [r7, #19]
 80079c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00a      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079d4:	4b10      	ldr	r3, [pc, #64]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80079d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079e2:	490d      	ldr	r1, [pc, #52]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00b      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079f6:	4b08      	ldr	r3, [pc, #32]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80079f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a06:	4904      	ldr	r1, [pc, #16]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007a0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3718      	adds	r7, #24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	40021000 	.word	0x40021000

08007a1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a2a:	4b75      	ldr	r3, [pc, #468]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d018      	beq.n	8007a68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007a36:	4b72      	ldr	r3, [pc, #456]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f003 0203 	and.w	r2, r3, #3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d10d      	bne.n	8007a62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
       ||
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d009      	beq.n	8007a62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007a4e:	4b6c      	ldr	r3, [pc, #432]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	091b      	lsrs	r3, r3, #4
 8007a54:	f003 0307 	and.w	r3, r3, #7
 8007a58:	1c5a      	adds	r2, r3, #1
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
       ||
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d047      	beq.n	8007af2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	73fb      	strb	r3, [r7, #15]
 8007a66:	e044      	b.n	8007af2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d018      	beq.n	8007aa2 <RCCEx_PLLSAI1_Config+0x86>
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d825      	bhi.n	8007ac0 <RCCEx_PLLSAI1_Config+0xa4>
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d002      	beq.n	8007a7e <RCCEx_PLLSAI1_Config+0x62>
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d009      	beq.n	8007a90 <RCCEx_PLLSAI1_Config+0x74>
 8007a7c:	e020      	b.n	8007ac0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a7e:	4b60      	ldr	r3, [pc, #384]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d11d      	bne.n	8007ac6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a8e:	e01a      	b.n	8007ac6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a90:	4b5b      	ldr	r3, [pc, #364]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d116      	bne.n	8007aca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007aa0:	e013      	b.n	8007aca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007aa2:	4b57      	ldr	r3, [pc, #348]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10f      	bne.n	8007ace <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007aae:	4b54      	ldr	r3, [pc, #336]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007abe:	e006      	b.n	8007ace <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac4:	e004      	b.n	8007ad0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007ac6:	bf00      	nop
 8007ac8:	e002      	b.n	8007ad0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007aca:	bf00      	nop
 8007acc:	e000      	b.n	8007ad0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007ace:	bf00      	nop
    }

    if(status == HAL_OK)
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10d      	bne.n	8007af2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007ad6:	4b4a      	ldr	r3, [pc, #296]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6819      	ldr	r1, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	430b      	orrs	r3, r1
 8007aec:	4944      	ldr	r1, [pc, #272]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d17d      	bne.n	8007bf4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007af8:	4b41      	ldr	r3, [pc, #260]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a40      	ldr	r2, [pc, #256]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007afe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b04:	f7fb fa86 	bl	8003014 <HAL_GetTick>
 8007b08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b0a:	e009      	b.n	8007b20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b0c:	f7fb fa82 	bl	8003014 <HAL_GetTick>
 8007b10:	4602      	mov	r2, r0
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d902      	bls.n	8007b20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8007b1e:	e005      	b.n	8007b2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b20:	4b37      	ldr	r3, [pc, #220]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1ef      	bne.n	8007b0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d160      	bne.n	8007bf4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d111      	bne.n	8007b5c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b38:	4b31      	ldr	r3, [pc, #196]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	6892      	ldr	r2, [r2, #8]
 8007b48:	0211      	lsls	r1, r2, #8
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	68d2      	ldr	r2, [r2, #12]
 8007b4e:	0912      	lsrs	r2, r2, #4
 8007b50:	0452      	lsls	r2, r2, #17
 8007b52:	430a      	orrs	r2, r1
 8007b54:	492a      	ldr	r1, [pc, #168]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	610b      	str	r3, [r1, #16]
 8007b5a:	e027      	b.n	8007bac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d112      	bne.n	8007b88 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b62:	4b27      	ldr	r3, [pc, #156]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007b6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	6892      	ldr	r2, [r2, #8]
 8007b72:	0211      	lsls	r1, r2, #8
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	6912      	ldr	r2, [r2, #16]
 8007b78:	0852      	lsrs	r2, r2, #1
 8007b7a:	3a01      	subs	r2, #1
 8007b7c:	0552      	lsls	r2, r2, #21
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	491f      	ldr	r1, [pc, #124]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	610b      	str	r3, [r1, #16]
 8007b86:	e011      	b.n	8007bac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b88:	4b1d      	ldr	r3, [pc, #116]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007b90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	6892      	ldr	r2, [r2, #8]
 8007b98:	0211      	lsls	r1, r2, #8
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6952      	ldr	r2, [r2, #20]
 8007b9e:	0852      	lsrs	r2, r2, #1
 8007ba0:	3a01      	subs	r2, #1
 8007ba2:	0652      	lsls	r2, r2, #25
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	4916      	ldr	r1, [pc, #88]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007bac:	4b14      	ldr	r3, [pc, #80]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a13      	ldr	r2, [pc, #76]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bb8:	f7fb fa2c 	bl	8003014 <HAL_GetTick>
 8007bbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007bbe:	e009      	b.n	8007bd4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007bc0:	f7fb fa28 	bl	8003014 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d902      	bls.n	8007bd4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	73fb      	strb	r3, [r7, #15]
          break;
 8007bd2:	e005      	b.n	8007be0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007bd4:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0ef      	beq.n	8007bc0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d106      	bne.n	8007bf4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007be6:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007be8:	691a      	ldr	r2, [r3, #16]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	4904      	ldr	r1, [pc, #16]	; (8007c00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	40021000 	.word	0x40021000

08007c04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007c12:	4b6a      	ldr	r3, [pc, #424]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f003 0303 	and.w	r3, r3, #3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d018      	beq.n	8007c50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007c1e:	4b67      	ldr	r3, [pc, #412]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f003 0203 	and.w	r2, r3, #3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d10d      	bne.n	8007c4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
       ||
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d009      	beq.n	8007c4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007c36:	4b61      	ldr	r3, [pc, #388]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	091b      	lsrs	r3, r3, #4
 8007c3c:	f003 0307 	and.w	r3, r3, #7
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
       ||
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d047      	beq.n	8007cda <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	73fb      	strb	r3, [r7, #15]
 8007c4e:	e044      	b.n	8007cda <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d018      	beq.n	8007c8a <RCCEx_PLLSAI2_Config+0x86>
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d825      	bhi.n	8007ca8 <RCCEx_PLLSAI2_Config+0xa4>
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d002      	beq.n	8007c66 <RCCEx_PLLSAI2_Config+0x62>
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d009      	beq.n	8007c78 <RCCEx_PLLSAI2_Config+0x74>
 8007c64:	e020      	b.n	8007ca8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007c66:	4b55      	ldr	r3, [pc, #340]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d11d      	bne.n	8007cae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c76:	e01a      	b.n	8007cae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007c78:	4b50      	ldr	r3, [pc, #320]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d116      	bne.n	8007cb2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c88:	e013      	b.n	8007cb2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007c8a:	4b4c      	ldr	r3, [pc, #304]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10f      	bne.n	8007cb6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007c96:	4b49      	ldr	r3, [pc, #292]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d109      	bne.n	8007cb6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ca6:	e006      	b.n	8007cb6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	73fb      	strb	r3, [r7, #15]
      break;
 8007cac:	e004      	b.n	8007cb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007cae:	bf00      	nop
 8007cb0:	e002      	b.n	8007cb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007cb2:	bf00      	nop
 8007cb4:	e000      	b.n	8007cb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007cb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10d      	bne.n	8007cda <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007cbe:	4b3f      	ldr	r3, [pc, #252]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6819      	ldr	r1, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	430b      	orrs	r3, r1
 8007cd4:	4939      	ldr	r1, [pc, #228]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d167      	bne.n	8007db0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007ce0:	4b36      	ldr	r3, [pc, #216]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a35      	ldr	r2, [pc, #212]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cec:	f7fb f992 	bl	8003014 <HAL_GetTick>
 8007cf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007cf2:	e009      	b.n	8007d08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007cf4:	f7fb f98e 	bl	8003014 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d902      	bls.n	8007d08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	73fb      	strb	r3, [r7, #15]
        break;
 8007d06:	e005      	b.n	8007d14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007d08:	4b2c      	ldr	r3, [pc, #176]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1ef      	bne.n	8007cf4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d14a      	bne.n	8007db0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d111      	bne.n	8007d44 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d20:	4b26      	ldr	r3, [pc, #152]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	6892      	ldr	r2, [r2, #8]
 8007d30:	0211      	lsls	r1, r2, #8
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	68d2      	ldr	r2, [r2, #12]
 8007d36:	0912      	lsrs	r2, r2, #4
 8007d38:	0452      	lsls	r2, r2, #17
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	491f      	ldr	r1, [pc, #124]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	614b      	str	r3, [r1, #20]
 8007d42:	e011      	b.n	8007d68 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d44:	4b1d      	ldr	r3, [pc, #116]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007d4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	6892      	ldr	r2, [r2, #8]
 8007d54:	0211      	lsls	r1, r2, #8
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	6912      	ldr	r2, [r2, #16]
 8007d5a:	0852      	lsrs	r2, r2, #1
 8007d5c:	3a01      	subs	r2, #1
 8007d5e:	0652      	lsls	r2, r2, #25
 8007d60:	430a      	orrs	r2, r1
 8007d62:	4916      	ldr	r1, [pc, #88]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007d68:	4b14      	ldr	r3, [pc, #80]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a13      	ldr	r2, [pc, #76]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d74:	f7fb f94e 	bl	8003014 <HAL_GetTick>
 8007d78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d7a:	e009      	b.n	8007d90 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007d7c:	f7fb f94a 	bl	8003014 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d902      	bls.n	8007d90 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	73fb      	strb	r3, [r7, #15]
          break;
 8007d8e:	e005      	b.n	8007d9c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d0ef      	beq.n	8007d7c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d106      	bne.n	8007db0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007da2:	4b06      	ldr	r3, [pc, #24]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007da4:	695a      	ldr	r2, [r3, #20]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	4904      	ldr	r1, [pc, #16]	; (8007dbc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	40021000 	.word	0x40021000

08007dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d101      	bne.n	8007dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e049      	b.n	8007e66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d106      	bne.n	8007dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7fd f898 	bl	8004f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	4610      	mov	r0, r2
 8007e00:	f000 fc60 	bl	80086c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d001      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e04f      	b.n	8007f28 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68da      	ldr	r2, [r3, #12]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0201 	orr.w	r2, r2, #1
 8007e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a23      	ldr	r2, [pc, #140]	; (8007f34 <HAL_TIM_Base_Start_IT+0xc4>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d01d      	beq.n	8007ee6 <HAL_TIM_Base_Start_IT+0x76>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb2:	d018      	beq.n	8007ee6 <HAL_TIM_Base_Start_IT+0x76>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a1f      	ldr	r2, [pc, #124]	; (8007f38 <HAL_TIM_Base_Start_IT+0xc8>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d013      	beq.n	8007ee6 <HAL_TIM_Base_Start_IT+0x76>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a1e      	ldr	r2, [pc, #120]	; (8007f3c <HAL_TIM_Base_Start_IT+0xcc>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d00e      	beq.n	8007ee6 <HAL_TIM_Base_Start_IT+0x76>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a1c      	ldr	r2, [pc, #112]	; (8007f40 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d009      	beq.n	8007ee6 <HAL_TIM_Base_Start_IT+0x76>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a1b      	ldr	r2, [pc, #108]	; (8007f44 <HAL_TIM_Base_Start_IT+0xd4>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d004      	beq.n	8007ee6 <HAL_TIM_Base_Start_IT+0x76>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a19      	ldr	r2, [pc, #100]	; (8007f48 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d115      	bne.n	8007f12 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	4b17      	ldr	r3, [pc, #92]	; (8007f4c <HAL_TIM_Base_Start_IT+0xdc>)
 8007eee:	4013      	ands	r3, r2
 8007ef0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b06      	cmp	r3, #6
 8007ef6:	d015      	beq.n	8007f24 <HAL_TIM_Base_Start_IT+0xb4>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007efe:	d011      	beq.n	8007f24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 0201 	orr.w	r2, r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f10:	e008      	b.n	8007f24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f042 0201 	orr.w	r2, r2, #1
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	e000      	b.n	8007f26 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	40012c00 	.word	0x40012c00
 8007f38:	40000400 	.word	0x40000400
 8007f3c:	40000800 	.word	0x40000800
 8007f40:	40000c00 	.word	0x40000c00
 8007f44:	40013400 	.word	0x40013400
 8007f48:	40014000 	.word	0x40014000
 8007f4c:	00010007 	.word	0x00010007

08007f50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e049      	b.n	8007ff6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d106      	bne.n	8007f7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fc ff8e 	bl	8004e98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4610      	mov	r0, r2
 8007f90:	f000 fb98 	bl	80086c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d109      	bne.n	8008024 <HAL_TIM_PWM_Start+0x24>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b01      	cmp	r3, #1
 800801a:	bf14      	ite	ne
 800801c:	2301      	movne	r3, #1
 800801e:	2300      	moveq	r3, #0
 8008020:	b2db      	uxtb	r3, r3
 8008022:	e03c      	b.n	800809e <HAL_TIM_PWM_Start+0x9e>
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	2b04      	cmp	r3, #4
 8008028:	d109      	bne.n	800803e <HAL_TIM_PWM_Start+0x3e>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b01      	cmp	r3, #1
 8008034:	bf14      	ite	ne
 8008036:	2301      	movne	r3, #1
 8008038:	2300      	moveq	r3, #0
 800803a:	b2db      	uxtb	r3, r3
 800803c:	e02f      	b.n	800809e <HAL_TIM_PWM_Start+0x9e>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b08      	cmp	r3, #8
 8008042:	d109      	bne.n	8008058 <HAL_TIM_PWM_Start+0x58>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b01      	cmp	r3, #1
 800804e:	bf14      	ite	ne
 8008050:	2301      	movne	r3, #1
 8008052:	2300      	moveq	r3, #0
 8008054:	b2db      	uxtb	r3, r3
 8008056:	e022      	b.n	800809e <HAL_TIM_PWM_Start+0x9e>
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2b0c      	cmp	r3, #12
 800805c:	d109      	bne.n	8008072 <HAL_TIM_PWM_Start+0x72>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b01      	cmp	r3, #1
 8008068:	bf14      	ite	ne
 800806a:	2301      	movne	r3, #1
 800806c:	2300      	moveq	r3, #0
 800806e:	b2db      	uxtb	r3, r3
 8008070:	e015      	b.n	800809e <HAL_TIM_PWM_Start+0x9e>
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b10      	cmp	r3, #16
 8008076:	d109      	bne.n	800808c <HAL_TIM_PWM_Start+0x8c>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b01      	cmp	r3, #1
 8008082:	bf14      	ite	ne
 8008084:	2301      	movne	r3, #1
 8008086:	2300      	moveq	r3, #0
 8008088:	b2db      	uxtb	r3, r3
 800808a:	e008      	b.n	800809e <HAL_TIM_PWM_Start+0x9e>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b01      	cmp	r3, #1
 8008096:	bf14      	ite	ne
 8008098:	2301      	movne	r3, #1
 800809a:	2300      	moveq	r3, #0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e09c      	b.n	80081e0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d104      	bne.n	80080b6 <HAL_TIM_PWM_Start+0xb6>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080b4:	e023      	b.n	80080fe <HAL_TIM_PWM_Start+0xfe>
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b04      	cmp	r3, #4
 80080ba:	d104      	bne.n	80080c6 <HAL_TIM_PWM_Start+0xc6>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080c4:	e01b      	b.n	80080fe <HAL_TIM_PWM_Start+0xfe>
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b08      	cmp	r3, #8
 80080ca:	d104      	bne.n	80080d6 <HAL_TIM_PWM_Start+0xd6>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080d4:	e013      	b.n	80080fe <HAL_TIM_PWM_Start+0xfe>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2b0c      	cmp	r3, #12
 80080da:	d104      	bne.n	80080e6 <HAL_TIM_PWM_Start+0xe6>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2202      	movs	r2, #2
 80080e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080e4:	e00b      	b.n	80080fe <HAL_TIM_PWM_Start+0xfe>
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	2b10      	cmp	r3, #16
 80080ea:	d104      	bne.n	80080f6 <HAL_TIM_PWM_Start+0xf6>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2202      	movs	r2, #2
 80080f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080f4:	e003      	b.n	80080fe <HAL_TIM_PWM_Start+0xfe>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2202      	movs	r2, #2
 80080fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2201      	movs	r2, #1
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	4618      	mov	r0, r3
 8008108:	f000 fe4c 	bl	8008da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a35      	ldr	r2, [pc, #212]	; (80081e8 <HAL_TIM_PWM_Start+0x1e8>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d013      	beq.n	800813e <HAL_TIM_PWM_Start+0x13e>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a34      	ldr	r2, [pc, #208]	; (80081ec <HAL_TIM_PWM_Start+0x1ec>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d00e      	beq.n	800813e <HAL_TIM_PWM_Start+0x13e>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a32      	ldr	r2, [pc, #200]	; (80081f0 <HAL_TIM_PWM_Start+0x1f0>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d009      	beq.n	800813e <HAL_TIM_PWM_Start+0x13e>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a31      	ldr	r2, [pc, #196]	; (80081f4 <HAL_TIM_PWM_Start+0x1f4>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d004      	beq.n	800813e <HAL_TIM_PWM_Start+0x13e>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a2f      	ldr	r2, [pc, #188]	; (80081f8 <HAL_TIM_PWM_Start+0x1f8>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d101      	bne.n	8008142 <HAL_TIM_PWM_Start+0x142>
 800813e:	2301      	movs	r3, #1
 8008140:	e000      	b.n	8008144 <HAL_TIM_PWM_Start+0x144>
 8008142:	2300      	movs	r3, #0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d007      	beq.n	8008158 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008156:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a22      	ldr	r2, [pc, #136]	; (80081e8 <HAL_TIM_PWM_Start+0x1e8>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d01d      	beq.n	800819e <HAL_TIM_PWM_Start+0x19e>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800816a:	d018      	beq.n	800819e <HAL_TIM_PWM_Start+0x19e>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a22      	ldr	r2, [pc, #136]	; (80081fc <HAL_TIM_PWM_Start+0x1fc>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d013      	beq.n	800819e <HAL_TIM_PWM_Start+0x19e>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a21      	ldr	r2, [pc, #132]	; (8008200 <HAL_TIM_PWM_Start+0x200>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d00e      	beq.n	800819e <HAL_TIM_PWM_Start+0x19e>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a1f      	ldr	r2, [pc, #124]	; (8008204 <HAL_TIM_PWM_Start+0x204>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d009      	beq.n	800819e <HAL_TIM_PWM_Start+0x19e>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a17      	ldr	r2, [pc, #92]	; (80081ec <HAL_TIM_PWM_Start+0x1ec>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d004      	beq.n	800819e <HAL_TIM_PWM_Start+0x19e>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a15      	ldr	r2, [pc, #84]	; (80081f0 <HAL_TIM_PWM_Start+0x1f0>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d115      	bne.n	80081ca <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	4b18      	ldr	r3, [pc, #96]	; (8008208 <HAL_TIM_PWM_Start+0x208>)
 80081a6:	4013      	ands	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b06      	cmp	r3, #6
 80081ae:	d015      	beq.n	80081dc <HAL_TIM_PWM_Start+0x1dc>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081b6:	d011      	beq.n	80081dc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f042 0201 	orr.w	r2, r2, #1
 80081c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c8:	e008      	b.n	80081dc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f042 0201 	orr.w	r2, r2, #1
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	e000      	b.n	80081de <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	40012c00 	.word	0x40012c00
 80081ec:	40013400 	.word	0x40013400
 80081f0:	40014000 	.word	0x40014000
 80081f4:	40014400 	.word	0x40014400
 80081f8:	40014800 	.word	0x40014800
 80081fc:	40000400 	.word	0x40000400
 8008200:	40000800 	.word	0x40000800
 8008204:	40000c00 	.word	0x40000c00
 8008208:	00010007 	.word	0x00010007

0800820c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	2b02      	cmp	r3, #2
 8008220:	d122      	bne.n	8008268 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f003 0302 	and.w	r3, r3, #2
 800822c:	2b02      	cmp	r3, #2
 800822e:	d11b      	bne.n	8008268 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f06f 0202 	mvn.w	r2, #2
 8008238:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	f003 0303 	and.w	r3, r3, #3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fa1a 	bl	8008688 <HAL_TIM_IC_CaptureCallback>
 8008254:	e005      	b.n	8008262 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fa0c 	bl	8008674 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fa1d 	bl	800869c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	f003 0304 	and.w	r3, r3, #4
 8008272:	2b04      	cmp	r3, #4
 8008274:	d122      	bne.n	80082bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	2b04      	cmp	r3, #4
 8008282:	d11b      	bne.n	80082bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f06f 0204 	mvn.w	r2, #4
 800828c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2202      	movs	r2, #2
 8008292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f9f0 	bl	8008688 <HAL_TIM_IC_CaptureCallback>
 80082a8:	e005      	b.n	80082b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f9e2 	bl	8008674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f9f3 	bl	800869c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	f003 0308 	and.w	r3, r3, #8
 80082c6:	2b08      	cmp	r3, #8
 80082c8:	d122      	bne.n	8008310 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	f003 0308 	and.w	r3, r3, #8
 80082d4:	2b08      	cmp	r3, #8
 80082d6:	d11b      	bne.n	8008310 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f06f 0208 	mvn.w	r2, #8
 80082e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2204      	movs	r2, #4
 80082e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	f003 0303 	and.w	r3, r3, #3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f9c6 	bl	8008688 <HAL_TIM_IC_CaptureCallback>
 80082fc:	e005      	b.n	800830a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f9b8 	bl	8008674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f9c9 	bl	800869c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	f003 0310 	and.w	r3, r3, #16
 800831a:	2b10      	cmp	r3, #16
 800831c:	d122      	bne.n	8008364 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	f003 0310 	and.w	r3, r3, #16
 8008328:	2b10      	cmp	r3, #16
 800832a:	d11b      	bne.n	8008364 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f06f 0210 	mvn.w	r2, #16
 8008334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2208      	movs	r2, #8
 800833a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f99c 	bl	8008688 <HAL_TIM_IC_CaptureCallback>
 8008350:	e005      	b.n	800835e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f98e 	bl	8008674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f99f 	bl	800869c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b01      	cmp	r3, #1
 8008370:	d10e      	bne.n	8008390 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	2b01      	cmp	r3, #1
 800837e:	d107      	bne.n	8008390 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f06f 0201 	mvn.w	r2, #1
 8008388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fb f8da 	bl	8003544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800839a:	2b80      	cmp	r3, #128	; 0x80
 800839c:	d10e      	bne.n	80083bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083a8:	2b80      	cmp	r3, #128	; 0x80
 80083aa:	d107      	bne.n	80083bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fdac 	bl	8008f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ca:	d10e      	bne.n	80083ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d6:	2b80      	cmp	r3, #128	; 0x80
 80083d8:	d107      	bne.n	80083ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80083e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fd9f 	bl	8008f28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f4:	2b40      	cmp	r3, #64	; 0x40
 80083f6:	d10e      	bne.n	8008416 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008402:	2b40      	cmp	r3, #64	; 0x40
 8008404:	d107      	bne.n	8008416 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800840e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f94d 	bl	80086b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	f003 0320 	and.w	r3, r3, #32
 8008420:	2b20      	cmp	r3, #32
 8008422:	d10e      	bne.n	8008442 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	f003 0320 	and.w	r3, r3, #32
 800842e:	2b20      	cmp	r3, #32
 8008430:	d107      	bne.n	8008442 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f06f 0220 	mvn.w	r2, #32
 800843a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fd5f 	bl	8008f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008442:	bf00      	nop
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008462:	2b01      	cmp	r3, #1
 8008464:	d101      	bne.n	800846a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008466:	2302      	movs	r3, #2
 8008468:	e0ff      	b.n	800866a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b14      	cmp	r3, #20
 8008476:	f200 80f0 	bhi.w	800865a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800847a:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	080084d5 	.word	0x080084d5
 8008484:	0800865b 	.word	0x0800865b
 8008488:	0800865b 	.word	0x0800865b
 800848c:	0800865b 	.word	0x0800865b
 8008490:	08008515 	.word	0x08008515
 8008494:	0800865b 	.word	0x0800865b
 8008498:	0800865b 	.word	0x0800865b
 800849c:	0800865b 	.word	0x0800865b
 80084a0:	08008557 	.word	0x08008557
 80084a4:	0800865b 	.word	0x0800865b
 80084a8:	0800865b 	.word	0x0800865b
 80084ac:	0800865b 	.word	0x0800865b
 80084b0:	08008597 	.word	0x08008597
 80084b4:	0800865b 	.word	0x0800865b
 80084b8:	0800865b 	.word	0x0800865b
 80084bc:	0800865b 	.word	0x0800865b
 80084c0:	080085d9 	.word	0x080085d9
 80084c4:	0800865b 	.word	0x0800865b
 80084c8:	0800865b 	.word	0x0800865b
 80084cc:	0800865b 	.word	0x0800865b
 80084d0:	08008619 	.word	0x08008619
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68b9      	ldr	r1, [r7, #8]
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 f98c 	bl	80087f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	699a      	ldr	r2, [r3, #24]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f042 0208 	orr.w	r2, r2, #8
 80084ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699a      	ldr	r2, [r3, #24]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0204 	bic.w	r2, r2, #4
 80084fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6999      	ldr	r1, [r3, #24]
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	691a      	ldr	r2, [r3, #16]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	430a      	orrs	r2, r1
 8008510:	619a      	str	r2, [r3, #24]
      break;
 8008512:	e0a5      	b.n	8008660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68b9      	ldr	r1, [r7, #8]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 f9fc 	bl	8008918 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	699a      	ldr	r2, [r3, #24]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800852e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699a      	ldr	r2, [r3, #24]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800853e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6999      	ldr	r1, [r3, #24]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	021a      	lsls	r2, r3, #8
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	430a      	orrs	r2, r1
 8008552:	619a      	str	r2, [r3, #24]
      break;
 8008554:	e084      	b.n	8008660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68b9      	ldr	r1, [r7, #8]
 800855c:	4618      	mov	r0, r3
 800855e:	f000 fa65 	bl	8008a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	69da      	ldr	r2, [r3, #28]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f042 0208 	orr.w	r2, r2, #8
 8008570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	69da      	ldr	r2, [r3, #28]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f022 0204 	bic.w	r2, r2, #4
 8008580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	69d9      	ldr	r1, [r3, #28]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	691a      	ldr	r2, [r3, #16]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	61da      	str	r2, [r3, #28]
      break;
 8008594:	e064      	b.n	8008660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68b9      	ldr	r1, [r7, #8]
 800859c:	4618      	mov	r0, r3
 800859e:	f000 facd 	bl	8008b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	69da      	ldr	r2, [r3, #28]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69da      	ldr	r2, [r3, #28]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69d9      	ldr	r1, [r3, #28]
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	021a      	lsls	r2, r3, #8
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	61da      	str	r2, [r3, #28]
      break;
 80085d6:	e043      	b.n	8008660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68b9      	ldr	r1, [r7, #8]
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 fb16 	bl	8008c10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f042 0208 	orr.w	r2, r2, #8
 80085f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f022 0204 	bic.w	r2, r2, #4
 8008602:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	691a      	ldr	r2, [r3, #16]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008616:	e023      	b.n	8008660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68b9      	ldr	r1, [r7, #8]
 800861e:	4618      	mov	r0, r3
 8008620:	f000 fb5a 	bl	8008cd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008632:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008642:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	021a      	lsls	r2, r3, #8
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	430a      	orrs	r2, r1
 8008656:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008658:	e002      	b.n	8008660 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	75fb      	strb	r3, [r7, #23]
      break;
 800865e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008668:	7dfb      	ldrb	r3, [r7, #23]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop

08008674 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a40      	ldr	r2, [pc, #256]	; (80087d8 <TIM_Base_SetConfig+0x114>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d013      	beq.n	8008704 <TIM_Base_SetConfig+0x40>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e2:	d00f      	beq.n	8008704 <TIM_Base_SetConfig+0x40>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a3d      	ldr	r2, [pc, #244]	; (80087dc <TIM_Base_SetConfig+0x118>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d00b      	beq.n	8008704 <TIM_Base_SetConfig+0x40>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a3c      	ldr	r2, [pc, #240]	; (80087e0 <TIM_Base_SetConfig+0x11c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d007      	beq.n	8008704 <TIM_Base_SetConfig+0x40>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a3b      	ldr	r2, [pc, #236]	; (80087e4 <TIM_Base_SetConfig+0x120>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d003      	beq.n	8008704 <TIM_Base_SetConfig+0x40>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a3a      	ldr	r2, [pc, #232]	; (80087e8 <TIM_Base_SetConfig+0x124>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d108      	bne.n	8008716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4313      	orrs	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a2f      	ldr	r2, [pc, #188]	; (80087d8 <TIM_Base_SetConfig+0x114>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d01f      	beq.n	800875e <TIM_Base_SetConfig+0x9a>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008724:	d01b      	beq.n	800875e <TIM_Base_SetConfig+0x9a>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a2c      	ldr	r2, [pc, #176]	; (80087dc <TIM_Base_SetConfig+0x118>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d017      	beq.n	800875e <TIM_Base_SetConfig+0x9a>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a2b      	ldr	r2, [pc, #172]	; (80087e0 <TIM_Base_SetConfig+0x11c>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d013      	beq.n	800875e <TIM_Base_SetConfig+0x9a>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a2a      	ldr	r2, [pc, #168]	; (80087e4 <TIM_Base_SetConfig+0x120>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d00f      	beq.n	800875e <TIM_Base_SetConfig+0x9a>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a29      	ldr	r2, [pc, #164]	; (80087e8 <TIM_Base_SetConfig+0x124>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d00b      	beq.n	800875e <TIM_Base_SetConfig+0x9a>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a28      	ldr	r2, [pc, #160]	; (80087ec <TIM_Base_SetConfig+0x128>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d007      	beq.n	800875e <TIM_Base_SetConfig+0x9a>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a27      	ldr	r2, [pc, #156]	; (80087f0 <TIM_Base_SetConfig+0x12c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d003      	beq.n	800875e <TIM_Base_SetConfig+0x9a>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a26      	ldr	r2, [pc, #152]	; (80087f4 <TIM_Base_SetConfig+0x130>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d108      	bne.n	8008770 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	4313      	orrs	r3, r2
 800876e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	689a      	ldr	r2, [r3, #8]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a10      	ldr	r2, [pc, #64]	; (80087d8 <TIM_Base_SetConfig+0x114>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d00f      	beq.n	80087bc <TIM_Base_SetConfig+0xf8>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a12      	ldr	r2, [pc, #72]	; (80087e8 <TIM_Base_SetConfig+0x124>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d00b      	beq.n	80087bc <TIM_Base_SetConfig+0xf8>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a11      	ldr	r2, [pc, #68]	; (80087ec <TIM_Base_SetConfig+0x128>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d007      	beq.n	80087bc <TIM_Base_SetConfig+0xf8>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a10      	ldr	r2, [pc, #64]	; (80087f0 <TIM_Base_SetConfig+0x12c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d003      	beq.n	80087bc <TIM_Base_SetConfig+0xf8>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a0f      	ldr	r2, [pc, #60]	; (80087f4 <TIM_Base_SetConfig+0x130>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d103      	bne.n	80087c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	691a      	ldr	r2, [r3, #16]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	615a      	str	r2, [r3, #20]
}
 80087ca:	bf00      	nop
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	40012c00 	.word	0x40012c00
 80087dc:	40000400 	.word	0x40000400
 80087e0:	40000800 	.word	0x40000800
 80087e4:	40000c00 	.word	0x40000c00
 80087e8:	40013400 	.word	0x40013400
 80087ec:	40014000 	.word	0x40014000
 80087f0:	40014400 	.word	0x40014400
 80087f4:	40014800 	.word	0x40014800

080087f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a1b      	ldr	r3, [r3, #32]
 8008806:	f023 0201 	bic.w	r2, r3, #1
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800882a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f023 0303 	bic.w	r3, r3, #3
 8008832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f023 0302 	bic.w	r3, r3, #2
 8008844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	4313      	orrs	r3, r2
 800884e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a2c      	ldr	r2, [pc, #176]	; (8008904 <TIM_OC1_SetConfig+0x10c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d00f      	beq.n	8008878 <TIM_OC1_SetConfig+0x80>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a2b      	ldr	r2, [pc, #172]	; (8008908 <TIM_OC1_SetConfig+0x110>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d00b      	beq.n	8008878 <TIM_OC1_SetConfig+0x80>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a2a      	ldr	r2, [pc, #168]	; (800890c <TIM_OC1_SetConfig+0x114>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d007      	beq.n	8008878 <TIM_OC1_SetConfig+0x80>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a29      	ldr	r2, [pc, #164]	; (8008910 <TIM_OC1_SetConfig+0x118>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d003      	beq.n	8008878 <TIM_OC1_SetConfig+0x80>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a28      	ldr	r2, [pc, #160]	; (8008914 <TIM_OC1_SetConfig+0x11c>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d10c      	bne.n	8008892 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f023 0308 	bic.w	r3, r3, #8
 800887e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	4313      	orrs	r3, r2
 8008888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f023 0304 	bic.w	r3, r3, #4
 8008890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a1b      	ldr	r2, [pc, #108]	; (8008904 <TIM_OC1_SetConfig+0x10c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d00f      	beq.n	80088ba <TIM_OC1_SetConfig+0xc2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a1a      	ldr	r2, [pc, #104]	; (8008908 <TIM_OC1_SetConfig+0x110>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d00b      	beq.n	80088ba <TIM_OC1_SetConfig+0xc2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a19      	ldr	r2, [pc, #100]	; (800890c <TIM_OC1_SetConfig+0x114>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d007      	beq.n	80088ba <TIM_OC1_SetConfig+0xc2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a18      	ldr	r2, [pc, #96]	; (8008910 <TIM_OC1_SetConfig+0x118>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d003      	beq.n	80088ba <TIM_OC1_SetConfig+0xc2>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a17      	ldr	r2, [pc, #92]	; (8008914 <TIM_OC1_SetConfig+0x11c>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d111      	bne.n	80088de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	4313      	orrs	r3, r2
 80088dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	621a      	str	r2, [r3, #32]
}
 80088f8:	bf00      	nop
 80088fa:	371c      	adds	r7, #28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	40012c00 	.word	0x40012c00
 8008908:	40013400 	.word	0x40013400
 800890c:	40014000 	.word	0x40014000
 8008910:	40014400 	.word	0x40014400
 8008914:	40014800 	.word	0x40014800

08008918 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	f023 0210 	bic.w	r2, r3, #16
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800894a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	021b      	lsls	r3, r3, #8
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	4313      	orrs	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f023 0320 	bic.w	r3, r3, #32
 8008966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	011b      	lsls	r3, r3, #4
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	4313      	orrs	r3, r2
 8008972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a28      	ldr	r2, [pc, #160]	; (8008a18 <TIM_OC2_SetConfig+0x100>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d003      	beq.n	8008984 <TIM_OC2_SetConfig+0x6c>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a27      	ldr	r2, [pc, #156]	; (8008a1c <TIM_OC2_SetConfig+0x104>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d10d      	bne.n	80089a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800898a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	011b      	lsls	r3, r3, #4
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	4313      	orrs	r3, r2
 8008996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800899e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a1d      	ldr	r2, [pc, #116]	; (8008a18 <TIM_OC2_SetConfig+0x100>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d00f      	beq.n	80089c8 <TIM_OC2_SetConfig+0xb0>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a1c      	ldr	r2, [pc, #112]	; (8008a1c <TIM_OC2_SetConfig+0x104>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d00b      	beq.n	80089c8 <TIM_OC2_SetConfig+0xb0>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a1b      	ldr	r2, [pc, #108]	; (8008a20 <TIM_OC2_SetConfig+0x108>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d007      	beq.n	80089c8 <TIM_OC2_SetConfig+0xb0>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a1a      	ldr	r2, [pc, #104]	; (8008a24 <TIM_OC2_SetConfig+0x10c>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d003      	beq.n	80089c8 <TIM_OC2_SetConfig+0xb0>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a19      	ldr	r2, [pc, #100]	; (8008a28 <TIM_OC2_SetConfig+0x110>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d113      	bne.n	80089f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	695b      	ldr	r3, [r3, #20]
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	621a      	str	r2, [r3, #32]
}
 8008a0a:	bf00      	nop
 8008a0c:	371c      	adds	r7, #28
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	40012c00 	.word	0x40012c00
 8008a1c:	40013400 	.word	0x40013400
 8008a20:	40014000 	.word	0x40014000
 8008a24:	40014400 	.word	0x40014400
 8008a28:	40014800 	.word	0x40014800

08008a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b087      	sub	sp, #28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f023 0303 	bic.w	r3, r3, #3
 8008a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	021b      	lsls	r3, r3, #8
 8008a80:	697a      	ldr	r2, [r7, #20]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a27      	ldr	r2, [pc, #156]	; (8008b28 <TIM_OC3_SetConfig+0xfc>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d003      	beq.n	8008a96 <TIM_OC3_SetConfig+0x6a>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a26      	ldr	r2, [pc, #152]	; (8008b2c <TIM_OC3_SetConfig+0x100>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d10d      	bne.n	8008ab2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	021b      	lsls	r3, r3, #8
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a1c      	ldr	r2, [pc, #112]	; (8008b28 <TIM_OC3_SetConfig+0xfc>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d00f      	beq.n	8008ada <TIM_OC3_SetConfig+0xae>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a1b      	ldr	r2, [pc, #108]	; (8008b2c <TIM_OC3_SetConfig+0x100>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d00b      	beq.n	8008ada <TIM_OC3_SetConfig+0xae>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a1a      	ldr	r2, [pc, #104]	; (8008b30 <TIM_OC3_SetConfig+0x104>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d007      	beq.n	8008ada <TIM_OC3_SetConfig+0xae>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a19      	ldr	r2, [pc, #100]	; (8008b34 <TIM_OC3_SetConfig+0x108>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d003      	beq.n	8008ada <TIM_OC3_SetConfig+0xae>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a18      	ldr	r2, [pc, #96]	; (8008b38 <TIM_OC3_SetConfig+0x10c>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d113      	bne.n	8008b02 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	011b      	lsls	r3, r3, #4
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	011b      	lsls	r3, r3, #4
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	621a      	str	r2, [r3, #32]
}
 8008b1c:	bf00      	nop
 8008b1e:	371c      	adds	r7, #28
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	40012c00 	.word	0x40012c00
 8008b2c:	40013400 	.word	0x40013400
 8008b30:	40014000 	.word	0x40014000
 8008b34:	40014400 	.word	0x40014400
 8008b38:	40014800 	.word	0x40014800

08008b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b087      	sub	sp, #28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	69db      	ldr	r3, [r3, #28]
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	021b      	lsls	r3, r3, #8
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	031b      	lsls	r3, r3, #12
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a18      	ldr	r2, [pc, #96]	; (8008bfc <TIM_OC4_SetConfig+0xc0>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d00f      	beq.n	8008bc0 <TIM_OC4_SetConfig+0x84>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a17      	ldr	r2, [pc, #92]	; (8008c00 <TIM_OC4_SetConfig+0xc4>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d00b      	beq.n	8008bc0 <TIM_OC4_SetConfig+0x84>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a16      	ldr	r2, [pc, #88]	; (8008c04 <TIM_OC4_SetConfig+0xc8>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d007      	beq.n	8008bc0 <TIM_OC4_SetConfig+0x84>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a15      	ldr	r2, [pc, #84]	; (8008c08 <TIM_OC4_SetConfig+0xcc>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d003      	beq.n	8008bc0 <TIM_OC4_SetConfig+0x84>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a14      	ldr	r2, [pc, #80]	; (8008c0c <TIM_OC4_SetConfig+0xd0>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d109      	bne.n	8008bd4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	019b      	lsls	r3, r3, #6
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	621a      	str	r2, [r3, #32]
}
 8008bee:	bf00      	nop
 8008bf0:	371c      	adds	r7, #28
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	40012c00 	.word	0x40012c00
 8008c00:	40013400 	.word	0x40013400
 8008c04:	40014000 	.word	0x40014000
 8008c08:	40014400 	.word	0x40014400
 8008c0c:	40014800 	.word	0x40014800

08008c10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	041b      	lsls	r3, r3, #16
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a17      	ldr	r2, [pc, #92]	; (8008cc4 <TIM_OC5_SetConfig+0xb4>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d00f      	beq.n	8008c8a <TIM_OC5_SetConfig+0x7a>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a16      	ldr	r2, [pc, #88]	; (8008cc8 <TIM_OC5_SetConfig+0xb8>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d00b      	beq.n	8008c8a <TIM_OC5_SetConfig+0x7a>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a15      	ldr	r2, [pc, #84]	; (8008ccc <TIM_OC5_SetConfig+0xbc>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d007      	beq.n	8008c8a <TIM_OC5_SetConfig+0x7a>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a14      	ldr	r2, [pc, #80]	; (8008cd0 <TIM_OC5_SetConfig+0xc0>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d003      	beq.n	8008c8a <TIM_OC5_SetConfig+0x7a>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a13      	ldr	r2, [pc, #76]	; (8008cd4 <TIM_OC5_SetConfig+0xc4>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d109      	bne.n	8008c9e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	021b      	lsls	r3, r3, #8
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	621a      	str	r2, [r3, #32]
}
 8008cb8:	bf00      	nop
 8008cba:	371c      	adds	r7, #28
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr
 8008cc4:	40012c00 	.word	0x40012c00
 8008cc8:	40013400 	.word	0x40013400
 8008ccc:	40014000 	.word	0x40014000
 8008cd0:	40014400 	.word	0x40014400
 8008cd4:	40014800 	.word	0x40014800

08008cd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a1b      	ldr	r3, [r3, #32]
 8008cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	051b      	lsls	r3, r3, #20
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a18      	ldr	r2, [pc, #96]	; (8008d90 <TIM_OC6_SetConfig+0xb8>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d00f      	beq.n	8008d54 <TIM_OC6_SetConfig+0x7c>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a17      	ldr	r2, [pc, #92]	; (8008d94 <TIM_OC6_SetConfig+0xbc>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d00b      	beq.n	8008d54 <TIM_OC6_SetConfig+0x7c>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a16      	ldr	r2, [pc, #88]	; (8008d98 <TIM_OC6_SetConfig+0xc0>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d007      	beq.n	8008d54 <TIM_OC6_SetConfig+0x7c>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a15      	ldr	r2, [pc, #84]	; (8008d9c <TIM_OC6_SetConfig+0xc4>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d003      	beq.n	8008d54 <TIM_OC6_SetConfig+0x7c>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a14      	ldr	r2, [pc, #80]	; (8008da0 <TIM_OC6_SetConfig+0xc8>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d109      	bne.n	8008d68 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	029b      	lsls	r3, r3, #10
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	621a      	str	r2, [r3, #32]
}
 8008d82:	bf00      	nop
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	40012c00 	.word	0x40012c00
 8008d94:	40013400 	.word	0x40013400
 8008d98:	40014000 	.word	0x40014000
 8008d9c:	40014400 	.word	0x40014400
 8008da0:	40014800 	.word	0x40014800

08008da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	f003 031f 	and.w	r3, r3, #31
 8008db6:	2201      	movs	r2, #1
 8008db8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6a1a      	ldr	r2, [r3, #32]
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	43db      	mvns	r3, r3
 8008dc6:	401a      	ands	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6a1a      	ldr	r2, [r3, #32]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	f003 031f 	and.w	r3, r3, #31
 8008dd6:	6879      	ldr	r1, [r7, #4]
 8008dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ddc:	431a      	orrs	r2, r3
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	621a      	str	r2, [r3, #32]
}
 8008de2:	bf00      	nop
 8008de4:	371c      	adds	r7, #28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
	...

08008df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d101      	bne.n	8008e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e04:	2302      	movs	r3, #2
 8008e06:	e068      	b.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2202      	movs	r2, #2
 8008e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a2e      	ldr	r2, [pc, #184]	; (8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d004      	beq.n	8008e3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a2d      	ldr	r2, [pc, #180]	; (8008eec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d108      	bne.n	8008e4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a1e      	ldr	r2, [pc, #120]	; (8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d01d      	beq.n	8008eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e7a:	d018      	beq.n	8008eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a1b      	ldr	r2, [pc, #108]	; (8008ef0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d013      	beq.n	8008eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a1a      	ldr	r2, [pc, #104]	; (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d00e      	beq.n	8008eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a18      	ldr	r2, [pc, #96]	; (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d009      	beq.n	8008eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a13      	ldr	r2, [pc, #76]	; (8008eec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d004      	beq.n	8008eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a14      	ldr	r2, [pc, #80]	; (8008efc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d10c      	bne.n	8008ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	40012c00 	.word	0x40012c00
 8008eec:	40013400 	.word	0x40013400
 8008ef0:	40000400 	.word	0x40000400
 8008ef4:	40000800 	.word	0x40000800
 8008ef8:	40000c00 	.word	0x40000c00
 8008efc:	40014000 	.word	0x40014000

08008f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e040      	b.n	8008fd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d106      	bne.n	8008f64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7fc f85e 	bl	8005020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2224      	movs	r2, #36	; 0x24
 8008f68:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f022 0201 	bic.w	r2, r2, #1
 8008f78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fe20 	bl	8009bc0 <UART_SetConfig>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d101      	bne.n	8008f8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e022      	b.n	8008fd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d002      	beq.n	8008f98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f001 f89e 	bl	800a0d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	689a      	ldr	r2, [r3, #8]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f042 0201 	orr.w	r2, r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f001 f925 	bl	800a218 <UART_CheckIdleState>
 8008fce:	4603      	mov	r3, r0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08a      	sub	sp, #40	; 0x28
 8008fdc:	af02      	add	r7, sp, #8
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fec:	2b20      	cmp	r3, #32
 8008fee:	f040 8082 	bne.w	80090f6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <HAL_UART_Transmit+0x26>
 8008ff8:	88fb      	ldrh	r3, [r7, #6]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e07a      	b.n	80090f8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009008:	2b01      	cmp	r3, #1
 800900a:	d101      	bne.n	8009010 <HAL_UART_Transmit+0x38>
 800900c:	2302      	movs	r3, #2
 800900e:	e073      	b.n	80090f8 <HAL_UART_Transmit+0x120>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2221      	movs	r2, #33	; 0x21
 8009024:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009026:	f7f9 fff5 	bl	8003014 <HAL_GetTick>
 800902a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	88fa      	ldrh	r2, [r7, #6]
 8009030:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	88fa      	ldrh	r2, [r7, #6]
 8009038:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009044:	d108      	bne.n	8009058 <HAL_UART_Transmit+0x80>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d104      	bne.n	8009058 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800904e:	2300      	movs	r3, #0
 8009050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	61bb      	str	r3, [r7, #24]
 8009056:	e003      	b.n	8009060 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800905c:	2300      	movs	r3, #0
 800905e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009068:	e02d      	b.n	80090c6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2200      	movs	r2, #0
 8009072:	2180      	movs	r1, #128	; 0x80
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f001 f918 	bl	800a2aa <UART_WaitOnFlagUntilTimeout>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d001      	beq.n	8009084 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009080:	2303      	movs	r3, #3
 8009082:	e039      	b.n	80090f8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10b      	bne.n	80090a2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	881a      	ldrh	r2, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009096:	b292      	uxth	r2, r2
 8009098:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	3302      	adds	r3, #2
 800909e:	61bb      	str	r3, [r7, #24]
 80090a0:	e008      	b.n	80090b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	781a      	ldrb	r2, [r3, #0]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	b292      	uxth	r2, r2
 80090ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	3301      	adds	r3, #1
 80090b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	3b01      	subs	r3, #1
 80090be:	b29a      	uxth	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1cb      	bne.n	800906a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2200      	movs	r2, #0
 80090da:	2140      	movs	r1, #64	; 0x40
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f001 f8e4 	bl	800a2aa <UART_WaitOnFlagUntilTimeout>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e005      	b.n	80090f8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2220      	movs	r2, #32
 80090f0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	e000      	b.n	80090f8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80090f6:	2302      	movs	r3, #2
  }
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3720      	adds	r7, #32
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08a      	sub	sp, #40	; 0x28
 8009104:	af02      	add	r7, sp, #8
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	603b      	str	r3, [r7, #0]
 800910c:	4613      	mov	r3, r2
 800910e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009114:	2b20      	cmp	r3, #32
 8009116:	f040 80bf 	bne.w	8009298 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <HAL_UART_Receive+0x26>
 8009120:	88fb      	ldrh	r3, [r7, #6]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e0b7      	b.n	800929a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009130:	2b01      	cmp	r3, #1
 8009132:	d101      	bne.n	8009138 <HAL_UART_Receive+0x38>
 8009134:	2302      	movs	r3, #2
 8009136:	e0b0      	b.n	800929a <HAL_UART_Receive+0x19a>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2222      	movs	r2, #34	; 0x22
 800914c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009154:	f7f9 ff5e 	bl	8003014 <HAL_GetTick>
 8009158:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	88fa      	ldrh	r2, [r7, #6]
 800915e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	88fa      	ldrh	r2, [r7, #6]
 8009166:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009172:	d10e      	bne.n	8009192 <HAL_UART_Receive+0x92>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d105      	bne.n	8009188 <HAL_UART_Receive+0x88>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009182:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009186:	e02d      	b.n	80091e4 <HAL_UART_Receive+0xe4>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	22ff      	movs	r2, #255	; 0xff
 800918c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009190:	e028      	b.n	80091e4 <HAL_UART_Receive+0xe4>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10d      	bne.n	80091b6 <HAL_UART_Receive+0xb6>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d104      	bne.n	80091ac <HAL_UART_Receive+0xac>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	22ff      	movs	r2, #255	; 0xff
 80091a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80091aa:	e01b      	b.n	80091e4 <HAL_UART_Receive+0xe4>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	227f      	movs	r2, #127	; 0x7f
 80091b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80091b4:	e016      	b.n	80091e4 <HAL_UART_Receive+0xe4>
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091be:	d10d      	bne.n	80091dc <HAL_UART_Receive+0xdc>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d104      	bne.n	80091d2 <HAL_UART_Receive+0xd2>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	227f      	movs	r2, #127	; 0x7f
 80091cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80091d0:	e008      	b.n	80091e4 <HAL_UART_Receive+0xe4>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	223f      	movs	r2, #63	; 0x3f
 80091d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80091da:	e003      	b.n	80091e4 <HAL_UART_Receive+0xe4>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091ea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091f4:	d108      	bne.n	8009208 <HAL_UART_Receive+0x108>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d104      	bne.n	8009208 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80091fe:	2300      	movs	r3, #0
 8009200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	61bb      	str	r3, [r7, #24]
 8009206:	e003      	b.n	8009210 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800920c:	2300      	movs	r3, #0
 800920e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009218:	e033      	b.n	8009282 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2200      	movs	r2, #0
 8009222:	2120      	movs	r1, #32
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f001 f840 	bl	800a2aa <UART_WaitOnFlagUntilTimeout>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e032      	b.n	800929a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d10c      	bne.n	8009254 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009240:	b29a      	uxth	r2, r3
 8009242:	8a7b      	ldrh	r3, [r7, #18]
 8009244:	4013      	ands	r3, r2
 8009246:	b29a      	uxth	r2, r3
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	3302      	adds	r3, #2
 8009250:	61bb      	str	r3, [r7, #24]
 8009252:	e00d      	b.n	8009270 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800925a:	b29b      	uxth	r3, r3
 800925c:	b2da      	uxtb	r2, r3
 800925e:	8a7b      	ldrh	r3, [r7, #18]
 8009260:	b2db      	uxtb	r3, r3
 8009262:	4013      	ands	r3, r2
 8009264:	b2da      	uxtb	r2, r3
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	3301      	adds	r3, #1
 800926e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009276:	b29b      	uxth	r3, r3
 8009278:	3b01      	subs	r3, #1
 800927a:	b29a      	uxth	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009288:	b29b      	uxth	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1c5      	bne.n	800921a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2220      	movs	r2, #32
 8009292:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	e000      	b.n	800929a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8009298:	2302      	movs	r3, #2
  }
}
 800929a:	4618      	mov	r0, r3
 800929c:	3720      	adds	r7, #32
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
	...

080092a4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b08b      	sub	sp, #44	; 0x2c
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	4613      	mov	r3, r2
 80092b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092b6:	2b20      	cmp	r3, #32
 80092b8:	d156      	bne.n	8009368 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <HAL_UART_Transmit_IT+0x22>
 80092c0:	88fb      	ldrh	r3, [r7, #6]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e04f      	b.n	800936a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d101      	bne.n	80092d8 <HAL_UART_Transmit_IT+0x34>
 80092d4:	2302      	movs	r3, #2
 80092d6:	e048      	b.n	800936a <HAL_UART_Transmit_IT+0xc6>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	88fa      	ldrh	r2, [r7, #6]
 80092ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	88fa      	ldrh	r2, [r7, #6]
 80092f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2221      	movs	r2, #33	; 0x21
 8009308:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009312:	d107      	bne.n	8009324 <HAL_UART_Transmit_IT+0x80>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d103      	bne.n	8009324 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4a16      	ldr	r2, [pc, #88]	; (8009378 <HAL_UART_Transmit_IT+0xd4>)
 8009320:	669a      	str	r2, [r3, #104]	; 0x68
 8009322:	e002      	b.n	800932a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	4a15      	ldr	r2, [pc, #84]	; (800937c <HAL_UART_Transmit_IT+0xd8>)
 8009328:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	613b      	str	r3, [r7, #16]
   return(result);
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009346:	627b      	str	r3, [r7, #36]	; 0x24
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	461a      	mov	r2, r3
 800934e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009350:	623b      	str	r3, [r7, #32]
 8009352:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	69f9      	ldr	r1, [r7, #28]
 8009356:	6a3a      	ldr	r2, [r7, #32]
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	61bb      	str	r3, [r7, #24]
   return(result);
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e6      	bne.n	8009332 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	e000      	b.n	800936a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8009368:	2302      	movs	r3, #2
  }
}
 800936a:	4618      	mov	r0, r3
 800936c:	372c      	adds	r7, #44	; 0x2c
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	0800a7bf 	.word	0x0800a7bf
 800937c:	0800a707 	.word	0x0800a707

08009380 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08a      	sub	sp, #40	; 0x28
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	4613      	mov	r3, r2
 800938c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009392:	2b20      	cmp	r3, #32
 8009394:	d142      	bne.n	800941c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <HAL_UART_Receive_IT+0x22>
 800939c:	88fb      	ldrh	r3, [r7, #6]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d101      	bne.n	80093a6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e03b      	b.n	800941e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d101      	bne.n	80093b4 <HAL_UART_Receive_IT+0x34>
 80093b0:	2302      	movs	r3, #2
 80093b2:	e034      	b.n	800941e <HAL_UART_Receive_IT+0x9e>
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a18      	ldr	r2, [pc, #96]	; (8009428 <HAL_UART_Receive_IT+0xa8>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d01f      	beq.n	800940c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d018      	beq.n	800940c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	e853 3f00 	ldrex	r3, [r3]
 80093e6:	613b      	str	r3, [r7, #16]
   return(result);
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093ee:	627b      	str	r3, [r7, #36]	; 0x24
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	461a      	mov	r2, r3
 80093f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f8:	623b      	str	r3, [r7, #32]
 80093fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fc:	69f9      	ldr	r1, [r7, #28]
 80093fe:	6a3a      	ldr	r2, [r7, #32]
 8009400:	e841 2300 	strex	r3, r2, [r1]
 8009404:	61bb      	str	r3, [r7, #24]
   return(result);
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1e6      	bne.n	80093da <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800940c:	88fb      	ldrh	r3, [r7, #6]
 800940e:	461a      	mov	r2, r3
 8009410:	68b9      	ldr	r1, [r7, #8]
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f001 f80e 	bl	800a434 <UART_Start_Receive_IT>
 8009418:	4603      	mov	r3, r0
 800941a:	e000      	b.n	800941e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800941c:	2302      	movs	r3, #2
  }
}
 800941e:	4618      	mov	r0, r3
 8009420:	3728      	adds	r7, #40	; 0x28
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	40008000 	.word	0x40008000

0800942c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b09a      	sub	sp, #104	; 0x68
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800943c:	e853 3f00 	ldrex	r3, [r3]
 8009440:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009448:	667b      	str	r3, [r7, #100]	; 0x64
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009452:	657b      	str	r3, [r7, #84]	; 0x54
 8009454:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009456:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009458:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800945a:	e841 2300 	strex	r3, r2, [r1]
 800945e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1e6      	bne.n	8009434 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3308      	adds	r3, #8
 800946c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009478:	f023 0301 	bic.w	r3, r3, #1
 800947c:	663b      	str	r3, [r7, #96]	; 0x60
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3308      	adds	r3, #8
 8009484:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009486:	643a      	str	r2, [r7, #64]	; 0x40
 8009488:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800948c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800948e:	e841 2300 	strex	r3, r2, [r1]
 8009492:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1e5      	bne.n	8009466 <HAL_UART_AbortReceive_IT+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d118      	bne.n	80094d4 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	e853 3f00 	ldrex	r3, [r3]
 80094ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	f023 0310 	bic.w	r3, r3, #16
 80094b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	461a      	mov	r2, r3
 80094be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094c2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094c8:	e841 2300 	strex	r3, r2, [r1]
 80094cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1e6      	bne.n	80094a2 <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094de:	2b40      	cmp	r3, #64	; 0x40
 80094e0:	d150      	bne.n	8009584 <HAL_UART_AbortReceive_IT+0x158>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	3308      	adds	r3, #8
 80094e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	e853 3f00 	ldrex	r3, [r3]
 80094f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3308      	adds	r3, #8
 8009500:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009502:	61ba      	str	r2, [r7, #24]
 8009504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009506:	6979      	ldr	r1, [r7, #20]
 8009508:	69ba      	ldr	r2, [r7, #24]
 800950a:	e841 2300 	strex	r3, r2, [r1]
 800950e:	613b      	str	r3, [r7, #16]
   return(result);
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1e5      	bne.n	80094e2 <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800951a:	2b00      	cmp	r3, #0
 800951c:	d013      	beq.n	8009546 <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009522:	4a25      	ldr	r2, [pc, #148]	; (80095b8 <HAL_UART_AbortReceive_IT+0x18c>)
 8009524:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952a:	4618      	mov	r0, r3
 800952c:	f7fc fc49 	bl	8005dc2 <HAL_DMA_Abort_IT>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d03a      	beq.n	80095ac <HAL_UART_AbortReceive_IT+0x180>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009540:	4610      	mov	r0, r2
 8009542:	4798      	blx	r3
 8009544:	e032      	b.n	80095ac <HAL_UART_AbortReceive_IT+0x180>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	220f      	movs	r2, #15
 800955a:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	8b1b      	ldrh	r3, [r3, #24]
 8009562:	b29a      	uxth	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f042 0208 	orr.w	r2, r2, #8
 800956c:	b292      	uxth	r2, r2
 800956e:	831a      	strh	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2220      	movs	r2, #32
 8009574:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fb09 	bl	8009b94 <HAL_UART_AbortReceiveCpltCallback>
 8009582:	e013      	b.n	80095ac <HAL_UART_AbortReceive_IT+0x180>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	220f      	movs	r2, #15
 8009598:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2220      	movs	r2, #32
 800959e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 faf4 	bl	8009b94 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3768      	adds	r7, #104	; 0x68
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	0800a6bb 	.word	0x0800a6bb

080095bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b0ba      	sub	sp, #232	; 0xe8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	69db      	ldr	r3, [r3, #28]
 80095ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80095e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80095e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80095ea:	4013      	ands	r3, r2
 80095ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80095f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d115      	bne.n	8009624 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80095f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095fc:	f003 0320 	and.w	r3, r3, #32
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00f      	beq.n	8009624 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009608:	f003 0320 	and.w	r3, r3, #32
 800960c:	2b00      	cmp	r3, #0
 800960e:	d009      	beq.n	8009624 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 82a6 	beq.w	8009b66 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	4798      	blx	r3
      }
      return;
 8009622:	e2a0      	b.n	8009b66 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 8117 	beq.w	800985c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800962e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800963a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800963e:	4b85      	ldr	r3, [pc, #532]	; (8009854 <HAL_UART_IRQHandler+0x298>)
 8009640:	4013      	ands	r3, r2
 8009642:	2b00      	cmp	r3, #0
 8009644:	f000 810a 	beq.w	800985c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800964c:	f003 0301 	and.w	r3, r3, #1
 8009650:	2b00      	cmp	r3, #0
 8009652:	d011      	beq.n	8009678 <HAL_UART_IRQHandler+0xbc>
 8009654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00b      	beq.n	8009678 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2201      	movs	r2, #1
 8009666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800966e:	f043 0201 	orr.w	r2, r3, #1
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800967c:	f003 0302 	and.w	r3, r3, #2
 8009680:	2b00      	cmp	r3, #0
 8009682:	d011      	beq.n	80096a8 <HAL_UART_IRQHandler+0xec>
 8009684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009688:	f003 0301 	and.w	r3, r3, #1
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00b      	beq.n	80096a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2202      	movs	r2, #2
 8009696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800969e:	f043 0204 	orr.w	r2, r3, #4
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ac:	f003 0304 	and.w	r3, r3, #4
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d011      	beq.n	80096d8 <HAL_UART_IRQHandler+0x11c>
 80096b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00b      	beq.n	80096d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2204      	movs	r2, #4
 80096c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096ce:	f043 0202 	orr.w	r2, r3, #2
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80096d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096dc:	f003 0308 	and.w	r3, r3, #8
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d017      	beq.n	8009714 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80096e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096e8:	f003 0320 	and.w	r3, r3, #32
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d105      	bne.n	80096fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80096f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00b      	beq.n	8009714 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2208      	movs	r2, #8
 8009702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800970a:	f043 0208 	orr.w	r2, r3, #8
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800971c:	2b00      	cmp	r3, #0
 800971e:	d012      	beq.n	8009746 <HAL_UART_IRQHandler+0x18a>
 8009720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009724:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00c      	beq.n	8009746 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009734:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800973c:	f043 0220 	orr.w	r2, r3, #32
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800974c:	2b00      	cmp	r3, #0
 800974e:	f000 820c 	beq.w	8009b6a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009756:	f003 0320 	and.w	r3, r3, #32
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00d      	beq.n	800977a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800975e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009762:	f003 0320 	and.w	r3, r3, #32
 8009766:	2b00      	cmp	r3, #0
 8009768:	d007      	beq.n	800977a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800976e:	2b00      	cmp	r3, #0
 8009770:	d003      	beq.n	800977a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009780:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978e:	2b40      	cmp	r3, #64	; 0x40
 8009790:	d005      	beq.n	800979e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009796:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800979a:	2b00      	cmp	r3, #0
 800979c:	d04f      	beq.n	800983e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 ff12 	bl	800a5c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ae:	2b40      	cmp	r3, #64	; 0x40
 80097b0:	d141      	bne.n	8009836 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	3308      	adds	r3, #8
 80097b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097c0:	e853 3f00 	ldrex	r3, [r3]
 80097c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80097c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3308      	adds	r3, #8
 80097da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80097de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80097e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80097ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80097ee:	e841 2300 	strex	r3, r2, [r1]
 80097f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80097f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1d9      	bne.n	80097b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009802:	2b00      	cmp	r3, #0
 8009804:	d013      	beq.n	800982e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980a:	4a13      	ldr	r2, [pc, #76]	; (8009858 <HAL_UART_IRQHandler+0x29c>)
 800980c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009812:	4618      	mov	r0, r3
 8009814:	f7fc fad5 	bl	8005dc2 <HAL_DMA_Abort_IT>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d017      	beq.n	800984e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009828:	4610      	mov	r0, r2
 800982a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800982c:	e00f      	b.n	800984e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f9a6 	bl	8009b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009834:	e00b      	b.n	800984e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f9a2 	bl	8009b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800983c:	e007      	b.n	800984e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f99e 	bl	8009b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800984c:	e18d      	b.n	8009b6a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800984e:	bf00      	nop
    return;
 8009850:	e18b      	b.n	8009b6a <HAL_UART_IRQHandler+0x5ae>
 8009852:	bf00      	nop
 8009854:	04000120 	.word	0x04000120
 8009858:	0800a68f 	.word	0x0800a68f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009860:	2b01      	cmp	r3, #1
 8009862:	f040 8146 	bne.w	8009af2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800986a:	f003 0310 	and.w	r3, r3, #16
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 813f 	beq.w	8009af2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009878:	f003 0310 	and.w	r3, r3, #16
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 8138 	beq.w	8009af2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2210      	movs	r2, #16
 8009888:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009894:	2b40      	cmp	r3, #64	; 0x40
 8009896:	f040 80b4 	bne.w	8009a02 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 815f 	beq.w	8009b6e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80098b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098ba:	429a      	cmp	r2, r3
 80098bc:	f080 8157 	bcs.w	8009b6e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 0320 	and.w	r3, r3, #32
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f040 8085 	bne.w	80099e6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098e8:	e853 3f00 	ldrex	r3, [r3]
 80098ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80098f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	461a      	mov	r2, r3
 8009902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009906:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800990a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009912:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009916:	e841 2300 	strex	r3, r2, [r1]
 800991a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800991e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1da      	bne.n	80098dc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3308      	adds	r3, #8
 800992c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009930:	e853 3f00 	ldrex	r3, [r3]
 8009934:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009938:	f023 0301 	bic.w	r3, r3, #1
 800993c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3308      	adds	r3, #8
 8009946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800994a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800994e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009950:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009952:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009956:	e841 2300 	strex	r3, r2, [r1]
 800995a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800995c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1e1      	bne.n	8009926 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	3308      	adds	r3, #8
 8009968:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3308      	adds	r3, #8
 8009982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009986:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009988:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800998c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e3      	bne.n	8009962 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2220      	movs	r2, #32
 800999e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099ae:	e853 3f00 	ldrex	r3, [r3]
 80099b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80099b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099b6:	f023 0310 	bic.w	r3, r3, #16
 80099ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80099ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099d0:	e841 2300 	strex	r3, r2, [r1]
 80099d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80099d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e4      	bne.n	80099a6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7fc f9b0 	bl	8005d46 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f8d4 	bl	8009ba8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a00:	e0b5      	b.n	8009b6e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f000 80a7 	beq.w	8009b72 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8009a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 80a2 	beq.w	8009b72 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a36:	e853 3f00 	ldrex	r3, [r3]
 8009a3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009a50:	647b      	str	r3, [r7, #68]	; 0x44
 8009a52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a58:	e841 2300 	strex	r3, r2, [r1]
 8009a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1e4      	bne.n	8009a2e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	3308      	adds	r3, #8
 8009a6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6e:	e853 3f00 	ldrex	r3, [r3]
 8009a72:	623b      	str	r3, [r7, #32]
   return(result);
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	f023 0301 	bic.w	r3, r3, #1
 8009a7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3308      	adds	r3, #8
 8009a84:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009a88:	633a      	str	r2, [r7, #48]	; 0x30
 8009a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a90:	e841 2300 	strex	r3, r2, [r1]
 8009a94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1e3      	bne.n	8009a64 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2220      	movs	r2, #32
 8009aa0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	e853 3f00 	ldrex	r3, [r3]
 8009aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0310 	bic.w	r3, r3, #16
 8009ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	461a      	mov	r2, r3
 8009acc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ad0:	61fb      	str	r3, [r7, #28]
 8009ad2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad4:	69b9      	ldr	r1, [r7, #24]
 8009ad6:	69fa      	ldr	r2, [r7, #28]
 8009ad8:	e841 2300 	strex	r3, r2, [r1]
 8009adc:	617b      	str	r3, [r7, #20]
   return(result);
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e4      	bne.n	8009aae <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f85c 	bl	8009ba8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009af0:	e03f      	b.n	8009b72 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00e      	beq.n	8009b1c <HAL_UART_IRQHandler+0x560>
 8009afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d008      	beq.n	8009b1c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009b12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f001 f83c 	bl	800ab92 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b1a:	e02d      	b.n	8009b78 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00e      	beq.n	8009b46 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d008      	beq.n	8009b46 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01c      	beq.n	8009b76 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	4798      	blx	r3
    }
    return;
 8009b44:	e017      	b.n	8009b76 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d012      	beq.n	8009b78 <HAL_UART_IRQHandler+0x5bc>
 8009b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00c      	beq.n	8009b78 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fe8d 	bl	800a87e <UART_EndTransmit_IT>
    return;
 8009b64:	e008      	b.n	8009b78 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009b66:	bf00      	nop
 8009b68:	e006      	b.n	8009b78 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009b6a:	bf00      	nop
 8009b6c:	e004      	b.n	8009b78 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009b6e:	bf00      	nop
 8009b70:	e002      	b.n	8009b78 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009b72:	bf00      	nop
 8009b74:	e000      	b.n	8009b78 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009b76:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009b78:	37e8      	adds	r7, #232	; 0xe8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop

08009b80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bc0:	b5b0      	push	{r4, r5, r7, lr}
 8009bc2:	b088      	sub	sp, #32
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689a      	ldr	r2, [r3, #8]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	431a      	orrs	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	69db      	ldr	r3, [r3, #28]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	4bad      	ldr	r3, [pc, #692]	; (8009ea0 <UART_SetConfig+0x2e0>)
 8009bec:	4013      	ands	r3, r2
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	6812      	ldr	r2, [r2, #0]
 8009bf2:	69f9      	ldr	r1, [r7, #28]
 8009bf4:	430b      	orrs	r3, r1
 8009bf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	68da      	ldr	r2, [r3, #12]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4aa2      	ldr	r2, [pc, #648]	; (8009ea4 <UART_SetConfig+0x2e4>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d004      	beq.n	8009c28 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	69fa      	ldr	r2, [r7, #28]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	430a      	orrs	r2, r1
 8009c3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a99      	ldr	r2, [pc, #612]	; (8009ea8 <UART_SetConfig+0x2e8>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d121      	bne.n	8009c8a <UART_SetConfig+0xca>
 8009c46:	4b99      	ldr	r3, [pc, #612]	; (8009eac <UART_SetConfig+0x2ec>)
 8009c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c4c:	f003 0303 	and.w	r3, r3, #3
 8009c50:	2b03      	cmp	r3, #3
 8009c52:	d817      	bhi.n	8009c84 <UART_SetConfig+0xc4>
 8009c54:	a201      	add	r2, pc, #4	; (adr r2, 8009c5c <UART_SetConfig+0x9c>)
 8009c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5a:	bf00      	nop
 8009c5c:	08009c6d 	.word	0x08009c6d
 8009c60:	08009c79 	.word	0x08009c79
 8009c64:	08009c73 	.word	0x08009c73
 8009c68:	08009c7f 	.word	0x08009c7f
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	76fb      	strb	r3, [r7, #27]
 8009c70:	e0e7      	b.n	8009e42 <UART_SetConfig+0x282>
 8009c72:	2302      	movs	r3, #2
 8009c74:	76fb      	strb	r3, [r7, #27]
 8009c76:	e0e4      	b.n	8009e42 <UART_SetConfig+0x282>
 8009c78:	2304      	movs	r3, #4
 8009c7a:	76fb      	strb	r3, [r7, #27]
 8009c7c:	e0e1      	b.n	8009e42 <UART_SetConfig+0x282>
 8009c7e:	2308      	movs	r3, #8
 8009c80:	76fb      	strb	r3, [r7, #27]
 8009c82:	e0de      	b.n	8009e42 <UART_SetConfig+0x282>
 8009c84:	2310      	movs	r3, #16
 8009c86:	76fb      	strb	r3, [r7, #27]
 8009c88:	e0db      	b.n	8009e42 <UART_SetConfig+0x282>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a88      	ldr	r2, [pc, #544]	; (8009eb0 <UART_SetConfig+0x2f0>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d132      	bne.n	8009cfa <UART_SetConfig+0x13a>
 8009c94:	4b85      	ldr	r3, [pc, #532]	; (8009eac <UART_SetConfig+0x2ec>)
 8009c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c9a:	f003 030c 	and.w	r3, r3, #12
 8009c9e:	2b0c      	cmp	r3, #12
 8009ca0:	d828      	bhi.n	8009cf4 <UART_SetConfig+0x134>
 8009ca2:	a201      	add	r2, pc, #4	; (adr r2, 8009ca8 <UART_SetConfig+0xe8>)
 8009ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca8:	08009cdd 	.word	0x08009cdd
 8009cac:	08009cf5 	.word	0x08009cf5
 8009cb0:	08009cf5 	.word	0x08009cf5
 8009cb4:	08009cf5 	.word	0x08009cf5
 8009cb8:	08009ce9 	.word	0x08009ce9
 8009cbc:	08009cf5 	.word	0x08009cf5
 8009cc0:	08009cf5 	.word	0x08009cf5
 8009cc4:	08009cf5 	.word	0x08009cf5
 8009cc8:	08009ce3 	.word	0x08009ce3
 8009ccc:	08009cf5 	.word	0x08009cf5
 8009cd0:	08009cf5 	.word	0x08009cf5
 8009cd4:	08009cf5 	.word	0x08009cf5
 8009cd8:	08009cef 	.word	0x08009cef
 8009cdc:	2300      	movs	r3, #0
 8009cde:	76fb      	strb	r3, [r7, #27]
 8009ce0:	e0af      	b.n	8009e42 <UART_SetConfig+0x282>
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	76fb      	strb	r3, [r7, #27]
 8009ce6:	e0ac      	b.n	8009e42 <UART_SetConfig+0x282>
 8009ce8:	2304      	movs	r3, #4
 8009cea:	76fb      	strb	r3, [r7, #27]
 8009cec:	e0a9      	b.n	8009e42 <UART_SetConfig+0x282>
 8009cee:	2308      	movs	r3, #8
 8009cf0:	76fb      	strb	r3, [r7, #27]
 8009cf2:	e0a6      	b.n	8009e42 <UART_SetConfig+0x282>
 8009cf4:	2310      	movs	r3, #16
 8009cf6:	76fb      	strb	r3, [r7, #27]
 8009cf8:	e0a3      	b.n	8009e42 <UART_SetConfig+0x282>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a6d      	ldr	r2, [pc, #436]	; (8009eb4 <UART_SetConfig+0x2f4>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d120      	bne.n	8009d46 <UART_SetConfig+0x186>
 8009d04:	4b69      	ldr	r3, [pc, #420]	; (8009eac <UART_SetConfig+0x2ec>)
 8009d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d0e:	2b30      	cmp	r3, #48	; 0x30
 8009d10:	d013      	beq.n	8009d3a <UART_SetConfig+0x17a>
 8009d12:	2b30      	cmp	r3, #48	; 0x30
 8009d14:	d814      	bhi.n	8009d40 <UART_SetConfig+0x180>
 8009d16:	2b20      	cmp	r3, #32
 8009d18:	d009      	beq.n	8009d2e <UART_SetConfig+0x16e>
 8009d1a:	2b20      	cmp	r3, #32
 8009d1c:	d810      	bhi.n	8009d40 <UART_SetConfig+0x180>
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d002      	beq.n	8009d28 <UART_SetConfig+0x168>
 8009d22:	2b10      	cmp	r3, #16
 8009d24:	d006      	beq.n	8009d34 <UART_SetConfig+0x174>
 8009d26:	e00b      	b.n	8009d40 <UART_SetConfig+0x180>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	76fb      	strb	r3, [r7, #27]
 8009d2c:	e089      	b.n	8009e42 <UART_SetConfig+0x282>
 8009d2e:	2302      	movs	r3, #2
 8009d30:	76fb      	strb	r3, [r7, #27]
 8009d32:	e086      	b.n	8009e42 <UART_SetConfig+0x282>
 8009d34:	2304      	movs	r3, #4
 8009d36:	76fb      	strb	r3, [r7, #27]
 8009d38:	e083      	b.n	8009e42 <UART_SetConfig+0x282>
 8009d3a:	2308      	movs	r3, #8
 8009d3c:	76fb      	strb	r3, [r7, #27]
 8009d3e:	e080      	b.n	8009e42 <UART_SetConfig+0x282>
 8009d40:	2310      	movs	r3, #16
 8009d42:	76fb      	strb	r3, [r7, #27]
 8009d44:	e07d      	b.n	8009e42 <UART_SetConfig+0x282>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a5b      	ldr	r2, [pc, #364]	; (8009eb8 <UART_SetConfig+0x2f8>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d120      	bne.n	8009d92 <UART_SetConfig+0x1d2>
 8009d50:	4b56      	ldr	r3, [pc, #344]	; (8009eac <UART_SetConfig+0x2ec>)
 8009d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009d5a:	2bc0      	cmp	r3, #192	; 0xc0
 8009d5c:	d013      	beq.n	8009d86 <UART_SetConfig+0x1c6>
 8009d5e:	2bc0      	cmp	r3, #192	; 0xc0
 8009d60:	d814      	bhi.n	8009d8c <UART_SetConfig+0x1cc>
 8009d62:	2b80      	cmp	r3, #128	; 0x80
 8009d64:	d009      	beq.n	8009d7a <UART_SetConfig+0x1ba>
 8009d66:	2b80      	cmp	r3, #128	; 0x80
 8009d68:	d810      	bhi.n	8009d8c <UART_SetConfig+0x1cc>
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <UART_SetConfig+0x1b4>
 8009d6e:	2b40      	cmp	r3, #64	; 0x40
 8009d70:	d006      	beq.n	8009d80 <UART_SetConfig+0x1c0>
 8009d72:	e00b      	b.n	8009d8c <UART_SetConfig+0x1cc>
 8009d74:	2300      	movs	r3, #0
 8009d76:	76fb      	strb	r3, [r7, #27]
 8009d78:	e063      	b.n	8009e42 <UART_SetConfig+0x282>
 8009d7a:	2302      	movs	r3, #2
 8009d7c:	76fb      	strb	r3, [r7, #27]
 8009d7e:	e060      	b.n	8009e42 <UART_SetConfig+0x282>
 8009d80:	2304      	movs	r3, #4
 8009d82:	76fb      	strb	r3, [r7, #27]
 8009d84:	e05d      	b.n	8009e42 <UART_SetConfig+0x282>
 8009d86:	2308      	movs	r3, #8
 8009d88:	76fb      	strb	r3, [r7, #27]
 8009d8a:	e05a      	b.n	8009e42 <UART_SetConfig+0x282>
 8009d8c:	2310      	movs	r3, #16
 8009d8e:	76fb      	strb	r3, [r7, #27]
 8009d90:	e057      	b.n	8009e42 <UART_SetConfig+0x282>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a49      	ldr	r2, [pc, #292]	; (8009ebc <UART_SetConfig+0x2fc>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d125      	bne.n	8009de8 <UART_SetConfig+0x228>
 8009d9c:	4b43      	ldr	r3, [pc, #268]	; (8009eac <UART_SetConfig+0x2ec>)
 8009d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009daa:	d017      	beq.n	8009ddc <UART_SetConfig+0x21c>
 8009dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009db0:	d817      	bhi.n	8009de2 <UART_SetConfig+0x222>
 8009db2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009db6:	d00b      	beq.n	8009dd0 <UART_SetConfig+0x210>
 8009db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dbc:	d811      	bhi.n	8009de2 <UART_SetConfig+0x222>
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d003      	beq.n	8009dca <UART_SetConfig+0x20a>
 8009dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dc6:	d006      	beq.n	8009dd6 <UART_SetConfig+0x216>
 8009dc8:	e00b      	b.n	8009de2 <UART_SetConfig+0x222>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	76fb      	strb	r3, [r7, #27]
 8009dce:	e038      	b.n	8009e42 <UART_SetConfig+0x282>
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	76fb      	strb	r3, [r7, #27]
 8009dd4:	e035      	b.n	8009e42 <UART_SetConfig+0x282>
 8009dd6:	2304      	movs	r3, #4
 8009dd8:	76fb      	strb	r3, [r7, #27]
 8009dda:	e032      	b.n	8009e42 <UART_SetConfig+0x282>
 8009ddc:	2308      	movs	r3, #8
 8009dde:	76fb      	strb	r3, [r7, #27]
 8009de0:	e02f      	b.n	8009e42 <UART_SetConfig+0x282>
 8009de2:	2310      	movs	r3, #16
 8009de4:	76fb      	strb	r3, [r7, #27]
 8009de6:	e02c      	b.n	8009e42 <UART_SetConfig+0x282>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a2d      	ldr	r2, [pc, #180]	; (8009ea4 <UART_SetConfig+0x2e4>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d125      	bne.n	8009e3e <UART_SetConfig+0x27e>
 8009df2:	4b2e      	ldr	r3, [pc, #184]	; (8009eac <UART_SetConfig+0x2ec>)
 8009df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009df8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009dfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009e00:	d017      	beq.n	8009e32 <UART_SetConfig+0x272>
 8009e02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009e06:	d817      	bhi.n	8009e38 <UART_SetConfig+0x278>
 8009e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e0c:	d00b      	beq.n	8009e26 <UART_SetConfig+0x266>
 8009e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e12:	d811      	bhi.n	8009e38 <UART_SetConfig+0x278>
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d003      	beq.n	8009e20 <UART_SetConfig+0x260>
 8009e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e1c:	d006      	beq.n	8009e2c <UART_SetConfig+0x26c>
 8009e1e:	e00b      	b.n	8009e38 <UART_SetConfig+0x278>
 8009e20:	2300      	movs	r3, #0
 8009e22:	76fb      	strb	r3, [r7, #27]
 8009e24:	e00d      	b.n	8009e42 <UART_SetConfig+0x282>
 8009e26:	2302      	movs	r3, #2
 8009e28:	76fb      	strb	r3, [r7, #27]
 8009e2a:	e00a      	b.n	8009e42 <UART_SetConfig+0x282>
 8009e2c:	2304      	movs	r3, #4
 8009e2e:	76fb      	strb	r3, [r7, #27]
 8009e30:	e007      	b.n	8009e42 <UART_SetConfig+0x282>
 8009e32:	2308      	movs	r3, #8
 8009e34:	76fb      	strb	r3, [r7, #27]
 8009e36:	e004      	b.n	8009e42 <UART_SetConfig+0x282>
 8009e38:	2310      	movs	r3, #16
 8009e3a:	76fb      	strb	r3, [r7, #27]
 8009e3c:	e001      	b.n	8009e42 <UART_SetConfig+0x282>
 8009e3e:	2310      	movs	r3, #16
 8009e40:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a17      	ldr	r2, [pc, #92]	; (8009ea4 <UART_SetConfig+0x2e4>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	f040 8087 	bne.w	8009f5c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e4e:	7efb      	ldrb	r3, [r7, #27]
 8009e50:	2b08      	cmp	r3, #8
 8009e52:	d837      	bhi.n	8009ec4 <UART_SetConfig+0x304>
 8009e54:	a201      	add	r2, pc, #4	; (adr r2, 8009e5c <UART_SetConfig+0x29c>)
 8009e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5a:	bf00      	nop
 8009e5c:	08009e81 	.word	0x08009e81
 8009e60:	08009ec5 	.word	0x08009ec5
 8009e64:	08009e89 	.word	0x08009e89
 8009e68:	08009ec5 	.word	0x08009ec5
 8009e6c:	08009e8f 	.word	0x08009e8f
 8009e70:	08009ec5 	.word	0x08009ec5
 8009e74:	08009ec5 	.word	0x08009ec5
 8009e78:	08009ec5 	.word	0x08009ec5
 8009e7c:	08009e97 	.word	0x08009e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e80:	f7fd fa56 	bl	8007330 <HAL_RCC_GetPCLK1Freq>
 8009e84:	6178      	str	r0, [r7, #20]
        break;
 8009e86:	e022      	b.n	8009ece <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e88:	4b0d      	ldr	r3, [pc, #52]	; (8009ec0 <UART_SetConfig+0x300>)
 8009e8a:	617b      	str	r3, [r7, #20]
        break;
 8009e8c:	e01f      	b.n	8009ece <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e8e:	f7fd f9b7 	bl	8007200 <HAL_RCC_GetSysClockFreq>
 8009e92:	6178      	str	r0, [r7, #20]
        break;
 8009e94:	e01b      	b.n	8009ece <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e9a:	617b      	str	r3, [r7, #20]
        break;
 8009e9c:	e017      	b.n	8009ece <UART_SetConfig+0x30e>
 8009e9e:	bf00      	nop
 8009ea0:	efff69f3 	.word	0xefff69f3
 8009ea4:	40008000 	.word	0x40008000
 8009ea8:	40013800 	.word	0x40013800
 8009eac:	40021000 	.word	0x40021000
 8009eb0:	40004400 	.word	0x40004400
 8009eb4:	40004800 	.word	0x40004800
 8009eb8:	40004c00 	.word	0x40004c00
 8009ebc:	40005000 	.word	0x40005000
 8009ec0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	76bb      	strb	r3, [r7, #26]
        break;
 8009ecc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 80f1 	beq.w	800a0b8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685a      	ldr	r2, [r3, #4]
 8009eda:	4613      	mov	r3, r2
 8009edc:	005b      	lsls	r3, r3, #1
 8009ede:	4413      	add	r3, r2
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d305      	bcc.n	8009ef2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009eec:	697a      	ldr	r2, [r7, #20]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d902      	bls.n	8009ef8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	76bb      	strb	r3, [r7, #26]
 8009ef6:	e0df      	b.n	800a0b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	4618      	mov	r0, r3
 8009efc:	f04f 0100 	mov.w	r1, #0
 8009f00:	f04f 0200 	mov.w	r2, #0
 8009f04:	f04f 0300 	mov.w	r3, #0
 8009f08:	020b      	lsls	r3, r1, #8
 8009f0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f0e:	0202      	lsls	r2, r0, #8
 8009f10:	6879      	ldr	r1, [r7, #4]
 8009f12:	6849      	ldr	r1, [r1, #4]
 8009f14:	0849      	lsrs	r1, r1, #1
 8009f16:	4608      	mov	r0, r1
 8009f18:	f04f 0100 	mov.w	r1, #0
 8009f1c:	1814      	adds	r4, r2, r0
 8009f1e:	eb43 0501 	adc.w	r5, r3, r1
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	461a      	mov	r2, r3
 8009f28:	f04f 0300 	mov.w	r3, #0
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	4629      	mov	r1, r5
 8009f30:	f7f6 fe92 	bl	8000c58 <__aeabi_uldivmod>
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	4613      	mov	r3, r2
 8009f3a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f42:	d308      	bcc.n	8009f56 <UART_SetConfig+0x396>
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f4a:	d204      	bcs.n	8009f56 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	60da      	str	r2, [r3, #12]
 8009f54:	e0b0      	b.n	800a0b8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	76bb      	strb	r3, [r7, #26]
 8009f5a:	e0ad      	b.n	800a0b8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	69db      	ldr	r3, [r3, #28]
 8009f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f64:	d15b      	bne.n	800a01e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8009f66:	7efb      	ldrb	r3, [r7, #27]
 8009f68:	2b08      	cmp	r3, #8
 8009f6a:	d828      	bhi.n	8009fbe <UART_SetConfig+0x3fe>
 8009f6c:	a201      	add	r2, pc, #4	; (adr r2, 8009f74 <UART_SetConfig+0x3b4>)
 8009f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f72:	bf00      	nop
 8009f74:	08009f99 	.word	0x08009f99
 8009f78:	08009fa1 	.word	0x08009fa1
 8009f7c:	08009fa9 	.word	0x08009fa9
 8009f80:	08009fbf 	.word	0x08009fbf
 8009f84:	08009faf 	.word	0x08009faf
 8009f88:	08009fbf 	.word	0x08009fbf
 8009f8c:	08009fbf 	.word	0x08009fbf
 8009f90:	08009fbf 	.word	0x08009fbf
 8009f94:	08009fb7 	.word	0x08009fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f98:	f7fd f9ca 	bl	8007330 <HAL_RCC_GetPCLK1Freq>
 8009f9c:	6178      	str	r0, [r7, #20]
        break;
 8009f9e:	e013      	b.n	8009fc8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fa0:	f7fd f9dc 	bl	800735c <HAL_RCC_GetPCLK2Freq>
 8009fa4:	6178      	str	r0, [r7, #20]
        break;
 8009fa6:	e00f      	b.n	8009fc8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fa8:	4b49      	ldr	r3, [pc, #292]	; (800a0d0 <UART_SetConfig+0x510>)
 8009faa:	617b      	str	r3, [r7, #20]
        break;
 8009fac:	e00c      	b.n	8009fc8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fae:	f7fd f927 	bl	8007200 <HAL_RCC_GetSysClockFreq>
 8009fb2:	6178      	str	r0, [r7, #20]
        break;
 8009fb4:	e008      	b.n	8009fc8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fba:	617b      	str	r3, [r7, #20]
        break;
 8009fbc:	e004      	b.n	8009fc8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	76bb      	strb	r3, [r7, #26]
        break;
 8009fc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d074      	beq.n	800a0b8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	005a      	lsls	r2, r3, #1
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	085b      	lsrs	r3, r3, #1
 8009fd8:	441a      	add	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fe2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	2b0f      	cmp	r3, #15
 8009fe8:	d916      	bls.n	800a018 <UART_SetConfig+0x458>
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ff0:	d212      	bcs.n	800a018 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	f023 030f 	bic.w	r3, r3, #15
 8009ffa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	085b      	lsrs	r3, r3, #1
 800a000:	b29b      	uxth	r3, r3
 800a002:	f003 0307 	and.w	r3, r3, #7
 800a006:	b29a      	uxth	r2, r3
 800a008:	89fb      	ldrh	r3, [r7, #14]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	89fa      	ldrh	r2, [r7, #14]
 800a014:	60da      	str	r2, [r3, #12]
 800a016:	e04f      	b.n	800a0b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	76bb      	strb	r3, [r7, #26]
 800a01c:	e04c      	b.n	800a0b8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a01e:	7efb      	ldrb	r3, [r7, #27]
 800a020:	2b08      	cmp	r3, #8
 800a022:	d828      	bhi.n	800a076 <UART_SetConfig+0x4b6>
 800a024:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <UART_SetConfig+0x46c>)
 800a026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02a:	bf00      	nop
 800a02c:	0800a051 	.word	0x0800a051
 800a030:	0800a059 	.word	0x0800a059
 800a034:	0800a061 	.word	0x0800a061
 800a038:	0800a077 	.word	0x0800a077
 800a03c:	0800a067 	.word	0x0800a067
 800a040:	0800a077 	.word	0x0800a077
 800a044:	0800a077 	.word	0x0800a077
 800a048:	0800a077 	.word	0x0800a077
 800a04c:	0800a06f 	.word	0x0800a06f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a050:	f7fd f96e 	bl	8007330 <HAL_RCC_GetPCLK1Freq>
 800a054:	6178      	str	r0, [r7, #20]
        break;
 800a056:	e013      	b.n	800a080 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a058:	f7fd f980 	bl	800735c <HAL_RCC_GetPCLK2Freq>
 800a05c:	6178      	str	r0, [r7, #20]
        break;
 800a05e:	e00f      	b.n	800a080 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a060:	4b1b      	ldr	r3, [pc, #108]	; (800a0d0 <UART_SetConfig+0x510>)
 800a062:	617b      	str	r3, [r7, #20]
        break;
 800a064:	e00c      	b.n	800a080 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a066:	f7fd f8cb 	bl	8007200 <HAL_RCC_GetSysClockFreq>
 800a06a:	6178      	str	r0, [r7, #20]
        break;
 800a06c:	e008      	b.n	800a080 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a06e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a072:	617b      	str	r3, [r7, #20]
        break;
 800a074:	e004      	b.n	800a080 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a076:	2300      	movs	r3, #0
 800a078:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	76bb      	strb	r3, [r7, #26]
        break;
 800a07e:	bf00      	nop
    }

    if (pclk != 0U)
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d018      	beq.n	800a0b8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	085a      	lsrs	r2, r3, #1
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	441a      	add	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	fbb2 f3f3 	udiv	r3, r2, r3
 800a098:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	2b0f      	cmp	r3, #15
 800a09e:	d909      	bls.n	800a0b4 <UART_SetConfig+0x4f4>
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0a6:	d205      	bcs.n	800a0b4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	60da      	str	r2, [r3, #12]
 800a0b2:	e001      	b.n	800a0b8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a0c4:	7ebb      	ldrb	r3, [r7, #26]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3720      	adds	r7, #32
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	00f42400 	.word	0x00f42400

0800a0d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e0:	f003 0301 	and.w	r3, r3, #1
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00a      	beq.n	800a0fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	430a      	orrs	r2, r1
 800a0fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a102:	f003 0302 	and.w	r3, r3, #2
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00a      	beq.n	800a120 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	430a      	orrs	r2, r1
 800a11e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00a      	beq.n	800a142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	430a      	orrs	r2, r1
 800a140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a146:	f003 0308 	and.w	r3, r3, #8
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00a      	beq.n	800a164 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	430a      	orrs	r2, r1
 800a162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a168:	f003 0310 	and.w	r3, r3, #16
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00a      	beq.n	800a186 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	430a      	orrs	r2, r1
 800a184:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18a:	f003 0320 	and.w	r3, r3, #32
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00a      	beq.n	800a1a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	430a      	orrs	r2, r1
 800a1a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d01a      	beq.n	800a1ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	430a      	orrs	r2, r1
 800a1c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1d2:	d10a      	bne.n	800a1ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00a      	beq.n	800a20c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	430a      	orrs	r2, r1
 800a20a:	605a      	str	r2, [r3, #4]
  }
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af02      	add	r7, sp, #8
 800a21e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a228:	f7f8 fef4 	bl	8003014 <HAL_GetTick>
 800a22c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 0308 	and.w	r3, r3, #8
 800a238:	2b08      	cmp	r3, #8
 800a23a:	d10e      	bne.n	800a25a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a23c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f82d 	bl	800a2aa <UART_WaitOnFlagUntilTimeout>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a256:	2303      	movs	r3, #3
 800a258:	e023      	b.n	800a2a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	2b04      	cmp	r3, #4
 800a266:	d10e      	bne.n	800a286 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a268:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 f817 	bl	800a2aa <UART_WaitOnFlagUntilTimeout>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a282:	2303      	movs	r3, #3
 800a284:	e00d      	b.n	800a2a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2220      	movs	r2, #32
 800a28a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2220      	movs	r2, #32
 800a290:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b09c      	sub	sp, #112	; 0x70
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	60f8      	str	r0, [r7, #12]
 800a2b2:	60b9      	str	r1, [r7, #8]
 800a2b4:	603b      	str	r3, [r7, #0]
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2ba:	e0a5      	b.n	800a408 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c2:	f000 80a1 	beq.w	800a408 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2c6:	f7f8 fea5 	bl	8003014 <HAL_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d302      	bcc.n	800a2dc <UART_WaitOnFlagUntilTimeout+0x32>
 800a2d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d13e      	bne.n	800a35a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2e4:	e853 3f00 	ldrex	r3, [r3]
 800a2e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a2ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2f0:	667b      	str	r3, [r7, #100]	; 0x64
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a300:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a302:	e841 2300 	strex	r3, r2, [r1]
 800a306:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1e6      	bne.n	800a2dc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3308      	adds	r3, #8
 800a314:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a318:	e853 3f00 	ldrex	r3, [r3]
 800a31c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a320:	f023 0301 	bic.w	r3, r3, #1
 800a324:	663b      	str	r3, [r7, #96]	; 0x60
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3308      	adds	r3, #8
 800a32c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a32e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a330:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a332:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a334:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a336:	e841 2300 	strex	r3, r2, [r1]
 800a33a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1e5      	bne.n	800a30e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2220      	movs	r2, #32
 800a346:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2220      	movs	r2, #32
 800a34c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2200      	movs	r2, #0
 800a352:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a356:	2303      	movs	r3, #3
 800a358:	e067      	b.n	800a42a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0304 	and.w	r3, r3, #4
 800a364:	2b00      	cmp	r3, #0
 800a366:	d04f      	beq.n	800a408 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	69db      	ldr	r3, [r3, #28]
 800a36e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a376:	d147      	bne.n	800a408 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a380:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38a:	e853 3f00 	ldrex	r3, [r3]
 800a38e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a396:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	461a      	mov	r2, r3
 800a39e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3a0:	637b      	str	r3, [r7, #52]	; 0x34
 800a3a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a3a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3a8:	e841 2300 	strex	r3, r2, [r1]
 800a3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1e6      	bne.n	800a382 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	e853 3f00 	ldrex	r3, [r3]
 800a3c2:	613b      	str	r3, [r7, #16]
   return(result);
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	f023 0301 	bic.w	r3, r3, #1
 800a3ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	3308      	adds	r3, #8
 800a3d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a3d4:	623a      	str	r2, [r7, #32]
 800a3d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d8:	69f9      	ldr	r1, [r7, #28]
 800a3da:	6a3a      	ldr	r2, [r7, #32]
 800a3dc:	e841 2300 	strex	r3, r2, [r1]
 800a3e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1e5      	bne.n	800a3b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2220      	movs	r2, #32
 800a3ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2220      	movs	r2, #32
 800a3f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a404:	2303      	movs	r3, #3
 800a406:	e010      	b.n	800a42a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	69da      	ldr	r2, [r3, #28]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	4013      	ands	r3, r2
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	429a      	cmp	r2, r3
 800a416:	bf0c      	ite	eq
 800a418:	2301      	moveq	r3, #1
 800a41a:	2300      	movne	r3, #0
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	461a      	mov	r2, r3
 800a420:	79fb      	ldrb	r3, [r7, #7]
 800a422:	429a      	cmp	r2, r3
 800a424:	f43f af4a 	beq.w	800a2bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3770      	adds	r7, #112	; 0x70
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
	...

0800a434 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a434:	b480      	push	{r7}
 800a436:	b097      	sub	sp, #92	; 0x5c
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	4613      	mov	r3, r2
 800a440:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	88fa      	ldrh	r2, [r7, #6]
 800a44c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	88fa      	ldrh	r2, [r7, #6]
 800a454:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a466:	d10e      	bne.n	800a486 <UART_Start_Receive_IT+0x52>
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d105      	bne.n	800a47c <UART_Start_Receive_IT+0x48>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a476:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a47a:	e02d      	b.n	800a4d8 <UART_Start_Receive_IT+0xa4>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	22ff      	movs	r2, #255	; 0xff
 800a480:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a484:	e028      	b.n	800a4d8 <UART_Start_Receive_IT+0xa4>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10d      	bne.n	800a4aa <UART_Start_Receive_IT+0x76>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d104      	bne.n	800a4a0 <UART_Start_Receive_IT+0x6c>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	22ff      	movs	r2, #255	; 0xff
 800a49a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a49e:	e01b      	b.n	800a4d8 <UART_Start_Receive_IT+0xa4>
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	227f      	movs	r2, #127	; 0x7f
 800a4a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4a8:	e016      	b.n	800a4d8 <UART_Start_Receive_IT+0xa4>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4b2:	d10d      	bne.n	800a4d0 <UART_Start_Receive_IT+0x9c>
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d104      	bne.n	800a4c6 <UART_Start_Receive_IT+0x92>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	227f      	movs	r2, #127	; 0x7f
 800a4c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4c4:	e008      	b.n	800a4d8 <UART_Start_Receive_IT+0xa4>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	223f      	movs	r2, #63	; 0x3f
 800a4ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4ce:	e003      	b.n	800a4d8 <UART_Start_Receive_IT+0xa4>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2222      	movs	r2, #34	; 0x22
 800a4e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3308      	adds	r3, #8
 800a4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f0:	e853 3f00 	ldrex	r3, [r3]
 800a4f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f8:	f043 0301 	orr.w	r3, r3, #1
 800a4fc:	657b      	str	r3, [r7, #84]	; 0x54
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3308      	adds	r3, #8
 800a504:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a506:	64ba      	str	r2, [r7, #72]	; 0x48
 800a508:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a50c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a50e:	e841 2300 	strex	r3, r2, [r1]
 800a512:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1e5      	bne.n	800a4e6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a522:	d107      	bne.n	800a534 <UART_Start_Receive_IT+0x100>
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d103      	bne.n	800a534 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	4a24      	ldr	r2, [pc, #144]	; (800a5c0 <UART_Start_Receive_IT+0x18c>)
 800a530:	665a      	str	r2, [r3, #100]	; 0x64
 800a532:	e002      	b.n	800a53a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	4a23      	ldr	r2, [pc, #140]	; (800a5c4 <UART_Start_Receive_IT+0x190>)
 800a538:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d019      	beq.n	800a57e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a552:	e853 3f00 	ldrex	r3, [r3]
 800a556:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a55e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	461a      	mov	r2, r3
 800a566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a568:	637b      	str	r3, [r7, #52]	; 0x34
 800a56a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a56e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a570:	e841 2300 	strex	r3, r2, [r1]
 800a574:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1e6      	bne.n	800a54a <UART_Start_Receive_IT+0x116>
 800a57c:	e018      	b.n	800a5b0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	e853 3f00 	ldrex	r3, [r3]
 800a58a:	613b      	str	r3, [r7, #16]
   return(result);
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	f043 0320 	orr.w	r3, r3, #32
 800a592:	653b      	str	r3, [r7, #80]	; 0x50
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	461a      	mov	r2, r3
 800a59a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a59c:	623b      	str	r3, [r7, #32]
 800a59e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a0:	69f9      	ldr	r1, [r7, #28]
 800a5a2:	6a3a      	ldr	r2, [r7, #32]
 800a5a4:	e841 2300 	strex	r3, r2, [r1]
 800a5a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d1e6      	bne.n	800a57e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	375c      	adds	r7, #92	; 0x5c
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	0800aa33 	.word	0x0800aa33
 800a5c4:	0800a8d3 	.word	0x0800a8d3

0800a5c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b095      	sub	sp, #84	; 0x54
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d8:	e853 3f00 	ldrex	r3, [r3]
 800a5dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5ee:	643b      	str	r3, [r7, #64]	; 0x40
 800a5f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a5f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5f6:	e841 2300 	strex	r3, r2, [r1]
 800a5fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1e6      	bne.n	800a5d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	3308      	adds	r3, #8
 800a608:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60a:	6a3b      	ldr	r3, [r7, #32]
 800a60c:	e853 3f00 	ldrex	r3, [r3]
 800a610:	61fb      	str	r3, [r7, #28]
   return(result);
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	f023 0301 	bic.w	r3, r3, #1
 800a618:	64bb      	str	r3, [r7, #72]	; 0x48
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3308      	adds	r3, #8
 800a620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a622:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a624:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a62a:	e841 2300 	strex	r3, r2, [r1]
 800a62e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1e5      	bne.n	800a602 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d118      	bne.n	800a670 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	e853 3f00 	ldrex	r3, [r3]
 800a64a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	f023 0310 	bic.w	r3, r3, #16
 800a652:	647b      	str	r3, [r7, #68]	; 0x44
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	461a      	mov	r2, r3
 800a65a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a65c:	61bb      	str	r3, [r7, #24]
 800a65e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a660:	6979      	ldr	r1, [r7, #20]
 800a662:	69ba      	ldr	r2, [r7, #24]
 800a664:	e841 2300 	strex	r3, r2, [r1]
 800a668:	613b      	str	r3, [r7, #16]
   return(result);
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1e6      	bne.n	800a63e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2220      	movs	r2, #32
 800a674:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a682:	bf00      	nop
 800a684:	3754      	adds	r7, #84	; 0x54
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b084      	sub	sp, #16
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a69a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f7ff fa67 	bl	8009b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6b2:	bf00      	nop
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b084      	sub	sp, #16
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c6:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	220f      	movs	r2, #15
 800a6d6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	8b1b      	ldrh	r3, [r3, #24]
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f042 0208 	orr.w	r2, r2, #8
 800a6e8:	b292      	uxth	r2, r2
 800a6ea:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2220      	movs	r2, #32
 800a6f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f7ff fa4b 	bl	8009b94 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6fe:	bf00      	nop
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a706:	b480      	push	{r7}
 800a708:	b08f      	sub	sp, #60	; 0x3c
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a712:	2b21      	cmp	r3, #33	; 0x21
 800a714:	d14d      	bne.n	800a7b2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d132      	bne.n	800a788 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a728:	6a3b      	ldr	r3, [r7, #32]
 800a72a:	e853 3f00 	ldrex	r3, [r3]
 800a72e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a736:	637b      	str	r3, [r7, #52]	; 0x34
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	461a      	mov	r2, r3
 800a73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a740:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a742:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a748:	e841 2300 	strex	r3, r2, [r1]
 800a74c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a750:	2b00      	cmp	r3, #0
 800a752:	d1e6      	bne.n	800a722 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	e853 3f00 	ldrex	r3, [r3]
 800a760:	60bb      	str	r3, [r7, #8]
   return(result);
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a768:	633b      	str	r3, [r7, #48]	; 0x30
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	461a      	mov	r2, r3
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	61bb      	str	r3, [r7, #24]
 800a774:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a776:	6979      	ldr	r1, [r7, #20]
 800a778:	69ba      	ldr	r2, [r7, #24]
 800a77a:	e841 2300 	strex	r3, r2, [r1]
 800a77e:	613b      	str	r3, [r7, #16]
   return(result);
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1e6      	bne.n	800a754 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a786:	e014      	b.n	800a7b2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a78c:	781a      	ldrb	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	b292      	uxth	r2, r2
 800a794:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a7b2:	bf00      	nop
 800a7b4:	373c      	adds	r7, #60	; 0x3c
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b091      	sub	sp, #68	; 0x44
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7ca:	2b21      	cmp	r3, #33	; 0x21
 800a7cc:	d151      	bne.n	800a872 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d132      	bne.n	800a840 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	e853 3f00 	ldrex	r3, [r3]
 800a7e6:	623b      	str	r3, [r7, #32]
   return(result);
 800a7e8:	6a3b      	ldr	r3, [r7, #32]
 800a7ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f8:	633b      	str	r3, [r7, #48]	; 0x30
 800a7fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a800:	e841 2300 	strex	r3, r2, [r1]
 800a804:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1e6      	bne.n	800a7da <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	e853 3f00 	ldrex	r3, [r3]
 800a818:	60fb      	str	r3, [r7, #12]
   return(result);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a820:	637b      	str	r3, [r7, #52]	; 0x34
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	461a      	mov	r2, r3
 800a828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a82a:	61fb      	str	r3, [r7, #28]
 800a82c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82e:	69b9      	ldr	r1, [r7, #24]
 800a830:	69fa      	ldr	r2, [r7, #28]
 800a832:	e841 2300 	strex	r3, r2, [r1]
 800a836:	617b      	str	r3, [r7, #20]
   return(result);
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1e6      	bne.n	800a80c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a83e:	e018      	b.n	800a872 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a844:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a848:	881a      	ldrh	r2, [r3, #0]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a852:	b292      	uxth	r2, r2
 800a854:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a85a:	1c9a      	adds	r2, r3, #2
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a866:	b29b      	uxth	r3, r3
 800a868:	3b01      	subs	r3, #1
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800a872:	bf00      	nop
 800a874:	3744      	adds	r7, #68	; 0x44
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b088      	sub	sp, #32
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	e853 3f00 	ldrex	r3, [r3]
 800a892:	60bb      	str	r3, [r7, #8]
   return(result);
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a89a:	61fb      	str	r3, [r7, #28]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	61bb      	str	r3, [r7, #24]
 800a8a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a8:	6979      	ldr	r1, [r7, #20]
 800a8aa:	69ba      	ldr	r2, [r7, #24]
 800a8ac:	e841 2300 	strex	r3, r2, [r1]
 800a8b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1e6      	bne.n	800a886 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2220      	movs	r2, #32
 800a8bc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f7f8 fce1 	bl	800328c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8ca:	bf00      	nop
 800a8cc:	3720      	adds	r7, #32
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b096      	sub	sp, #88	; 0x58
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a8e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8e8:	2b22      	cmp	r3, #34	; 0x22
 800a8ea:	f040 8094 	bne.w	800aa16 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a8f4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a8f8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a8fc:	b2d9      	uxtb	r1, r3
 800a8fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a902:	b2da      	uxtb	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a908:	400a      	ands	r2, r1
 800a90a:	b2d2      	uxtb	r2, r2
 800a90c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a91e:	b29b      	uxth	r3, r3
 800a920:	3b01      	subs	r3, #1
 800a922:	b29a      	uxth	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a930:	b29b      	uxth	r3, r3
 800a932:	2b00      	cmp	r3, #0
 800a934:	d179      	bne.n	800aa2a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	e853 3f00 	ldrex	r3, [r3]
 800a942:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a946:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a94a:	653b      	str	r3, [r7, #80]	; 0x50
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	461a      	mov	r2, r3
 800a952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a954:	647b      	str	r3, [r7, #68]	; 0x44
 800a956:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a958:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a95a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a95c:	e841 2300 	strex	r3, r2, [r1]
 800a960:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1e6      	bne.n	800a936 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3308      	adds	r3, #8
 800a96e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	e853 3f00 	ldrex	r3, [r3]
 800a976:	623b      	str	r3, [r7, #32]
   return(result);
 800a978:	6a3b      	ldr	r3, [r7, #32]
 800a97a:	f023 0301 	bic.w	r3, r3, #1
 800a97e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	3308      	adds	r3, #8
 800a986:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a988:	633a      	str	r2, [r7, #48]	; 0x30
 800a98a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a98e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a990:	e841 2300 	strex	r3, r2, [r1]
 800a994:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1e5      	bne.n	800a968 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2220      	movs	r2, #32
 800a9a0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d12e      	bne.n	800aa0e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	e853 3f00 	ldrex	r3, [r3]
 800a9c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f023 0310 	bic.w	r3, r3, #16
 800a9ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9d4:	61fb      	str	r3, [r7, #28]
 800a9d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d8:	69b9      	ldr	r1, [r7, #24]
 800a9da:	69fa      	ldr	r2, [r7, #28]
 800a9dc:	e841 2300 	strex	r3, r2, [r1]
 800a9e0:	617b      	str	r3, [r7, #20]
   return(result);
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d1e6      	bne.n	800a9b6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	69db      	ldr	r3, [r3, #28]
 800a9ee:	f003 0310 	and.w	r3, r3, #16
 800a9f2:	2b10      	cmp	r3, #16
 800a9f4:	d103      	bne.n	800a9fe <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2210      	movs	r2, #16
 800a9fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aa04:	4619      	mov	r1, r3
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7ff f8ce 	bl	8009ba8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa0c:	e00d      	b.n	800aa2a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7f8 fbec 	bl	80031ec <HAL_UART_RxCpltCallback>
}
 800aa14:	e009      	b.n	800aa2a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	8b1b      	ldrh	r3, [r3, #24]
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f042 0208 	orr.w	r2, r2, #8
 800aa26:	b292      	uxth	r2, r2
 800aa28:	831a      	strh	r2, [r3, #24]
}
 800aa2a:	bf00      	nop
 800aa2c:	3758      	adds	r7, #88	; 0x58
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b096      	sub	sp, #88	; 0x58
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa48:	2b22      	cmp	r3, #34	; 0x22
 800aa4a:	f040 8094 	bne.w	800ab76 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aa54:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa5c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800aa5e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800aa62:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800aa66:	4013      	ands	r3, r2
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa72:	1c9a      	adds	r2, r3, #2
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	3b01      	subs	r3, #1
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d179      	bne.n	800ab8a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa9e:	e853 3f00 	ldrex	r3, [r3]
 800aaa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aaaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	461a      	mov	r2, r3
 800aab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aab4:	643b      	str	r3, [r7, #64]	; 0x40
 800aab6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aaba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aabc:	e841 2300 	strex	r3, r2, [r1]
 800aac0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1e6      	bne.n	800aa96 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	3308      	adds	r3, #8
 800aace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad0:	6a3b      	ldr	r3, [r7, #32]
 800aad2:	e853 3f00 	ldrex	r3, [r3]
 800aad6:	61fb      	str	r3, [r7, #28]
   return(result);
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	f023 0301 	bic.w	r3, r3, #1
 800aade:	64bb      	str	r3, [r7, #72]	; 0x48
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	3308      	adds	r3, #8
 800aae6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aae8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aaea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aaee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaf0:	e841 2300 	strex	r3, r2, [r1]
 800aaf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1e5      	bne.n	800aac8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2220      	movs	r2, #32
 800ab00:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d12e      	bne.n	800ab6e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	e853 3f00 	ldrex	r3, [r3]
 800ab22:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	f023 0310 	bic.w	r3, r3, #16
 800ab2a:	647b      	str	r3, [r7, #68]	; 0x44
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	461a      	mov	r2, r3
 800ab32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab34:	61bb      	str	r3, [r7, #24]
 800ab36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab38:	6979      	ldr	r1, [r7, #20]
 800ab3a:	69ba      	ldr	r2, [r7, #24]
 800ab3c:	e841 2300 	strex	r3, r2, [r1]
 800ab40:	613b      	str	r3, [r7, #16]
   return(result);
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1e6      	bne.n	800ab16 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	69db      	ldr	r3, [r3, #28]
 800ab4e:	f003 0310 	and.w	r3, r3, #16
 800ab52:	2b10      	cmp	r3, #16
 800ab54:	d103      	bne.n	800ab5e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2210      	movs	r2, #16
 800ab5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ab64:	4619      	mov	r1, r3
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f7ff f81e 	bl	8009ba8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab6c:	e00d      	b.n	800ab8a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7f8 fb3c 	bl	80031ec <HAL_UART_RxCpltCallback>
}
 800ab74:	e009      	b.n	800ab8a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	8b1b      	ldrh	r3, [r3, #24]
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f042 0208 	orr.w	r2, r2, #8
 800ab86:	b292      	uxth	r2, r2
 800ab88:	831a      	strh	r2, [r3, #24]
}
 800ab8a:	bf00      	nop
 800ab8c:	3758      	adds	r7, #88	; 0x58
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab92:	b480      	push	{r7}
 800ab94:	b083      	sub	sp, #12
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab9a:	bf00      	nop
 800ab9c:	370c      	adds	r7, #12
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr

0800aba6 <atof>:
 800aba6:	2100      	movs	r1, #0
 800aba8:	f000 becc 	b.w	800b944 <strtod>

0800abac <atoi>:
 800abac:	220a      	movs	r2, #10
 800abae:	2100      	movs	r1, #0
 800abb0:	f000 bfb4 	b.w	800bb1c <strtol>

0800abb4 <__errno>:
 800abb4:	4b01      	ldr	r3, [pc, #4]	; (800abbc <__errno+0x8>)
 800abb6:	6818      	ldr	r0, [r3, #0]
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	2000006c 	.word	0x2000006c

0800abc0 <__libc_init_array>:
 800abc0:	b570      	push	{r4, r5, r6, lr}
 800abc2:	4d0d      	ldr	r5, [pc, #52]	; (800abf8 <__libc_init_array+0x38>)
 800abc4:	4c0d      	ldr	r4, [pc, #52]	; (800abfc <__libc_init_array+0x3c>)
 800abc6:	1b64      	subs	r4, r4, r5
 800abc8:	10a4      	asrs	r4, r4, #2
 800abca:	2600      	movs	r6, #0
 800abcc:	42a6      	cmp	r6, r4
 800abce:	d109      	bne.n	800abe4 <__libc_init_array+0x24>
 800abd0:	4d0b      	ldr	r5, [pc, #44]	; (800ac00 <__libc_init_array+0x40>)
 800abd2:	4c0c      	ldr	r4, [pc, #48]	; (800ac04 <__libc_init_array+0x44>)
 800abd4:	f004 f916 	bl	800ee04 <_init>
 800abd8:	1b64      	subs	r4, r4, r5
 800abda:	10a4      	asrs	r4, r4, #2
 800abdc:	2600      	movs	r6, #0
 800abde:	42a6      	cmp	r6, r4
 800abe0:	d105      	bne.n	800abee <__libc_init_array+0x2e>
 800abe2:	bd70      	pop	{r4, r5, r6, pc}
 800abe4:	f855 3b04 	ldr.w	r3, [r5], #4
 800abe8:	4798      	blx	r3
 800abea:	3601      	adds	r6, #1
 800abec:	e7ee      	b.n	800abcc <__libc_init_array+0xc>
 800abee:	f855 3b04 	ldr.w	r3, [r5], #4
 800abf2:	4798      	blx	r3
 800abf4:	3601      	adds	r6, #1
 800abf6:	e7f2      	b.n	800abde <__libc_init_array+0x1e>
 800abf8:	08010170 	.word	0x08010170
 800abfc:	08010170 	.word	0x08010170
 800ac00:	08010170 	.word	0x08010170
 800ac04:	08010174 	.word	0x08010174

0800ac08 <memcpy>:
 800ac08:	440a      	add	r2, r1
 800ac0a:	4291      	cmp	r1, r2
 800ac0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac10:	d100      	bne.n	800ac14 <memcpy+0xc>
 800ac12:	4770      	bx	lr
 800ac14:	b510      	push	{r4, lr}
 800ac16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac1e:	4291      	cmp	r1, r2
 800ac20:	d1f9      	bne.n	800ac16 <memcpy+0xe>
 800ac22:	bd10      	pop	{r4, pc}

0800ac24 <memmove>:
 800ac24:	4288      	cmp	r0, r1
 800ac26:	b510      	push	{r4, lr}
 800ac28:	eb01 0402 	add.w	r4, r1, r2
 800ac2c:	d902      	bls.n	800ac34 <memmove+0x10>
 800ac2e:	4284      	cmp	r4, r0
 800ac30:	4623      	mov	r3, r4
 800ac32:	d807      	bhi.n	800ac44 <memmove+0x20>
 800ac34:	1e43      	subs	r3, r0, #1
 800ac36:	42a1      	cmp	r1, r4
 800ac38:	d008      	beq.n	800ac4c <memmove+0x28>
 800ac3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac42:	e7f8      	b.n	800ac36 <memmove+0x12>
 800ac44:	4402      	add	r2, r0
 800ac46:	4601      	mov	r1, r0
 800ac48:	428a      	cmp	r2, r1
 800ac4a:	d100      	bne.n	800ac4e <memmove+0x2a>
 800ac4c:	bd10      	pop	{r4, pc}
 800ac4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac56:	e7f7      	b.n	800ac48 <memmove+0x24>

0800ac58 <memset>:
 800ac58:	4402      	add	r2, r0
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d100      	bne.n	800ac62 <memset+0xa>
 800ac60:	4770      	bx	lr
 800ac62:	f803 1b01 	strb.w	r1, [r3], #1
 800ac66:	e7f9      	b.n	800ac5c <memset+0x4>

0800ac68 <siprintf>:
 800ac68:	b40e      	push	{r1, r2, r3}
 800ac6a:	b500      	push	{lr}
 800ac6c:	b09c      	sub	sp, #112	; 0x70
 800ac6e:	ab1d      	add	r3, sp, #116	; 0x74
 800ac70:	9002      	str	r0, [sp, #8]
 800ac72:	9006      	str	r0, [sp, #24]
 800ac74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac78:	4809      	ldr	r0, [pc, #36]	; (800aca0 <siprintf+0x38>)
 800ac7a:	9107      	str	r1, [sp, #28]
 800ac7c:	9104      	str	r1, [sp, #16]
 800ac7e:	4909      	ldr	r1, [pc, #36]	; (800aca4 <siprintf+0x3c>)
 800ac80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac84:	9105      	str	r1, [sp, #20]
 800ac86:	6800      	ldr	r0, [r0, #0]
 800ac88:	9301      	str	r3, [sp, #4]
 800ac8a:	a902      	add	r1, sp, #8
 800ac8c:	f002 f8da 	bl	800ce44 <_svfiprintf_r>
 800ac90:	9b02      	ldr	r3, [sp, #8]
 800ac92:	2200      	movs	r2, #0
 800ac94:	701a      	strb	r2, [r3, #0]
 800ac96:	b01c      	add	sp, #112	; 0x70
 800ac98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac9c:	b003      	add	sp, #12
 800ac9e:	4770      	bx	lr
 800aca0:	2000006c 	.word	0x2000006c
 800aca4:	ffff0208 	.word	0xffff0208

0800aca8 <strcat>:
 800aca8:	b510      	push	{r4, lr}
 800acaa:	4602      	mov	r2, r0
 800acac:	7814      	ldrb	r4, [r2, #0]
 800acae:	4613      	mov	r3, r2
 800acb0:	3201      	adds	r2, #1
 800acb2:	2c00      	cmp	r4, #0
 800acb4:	d1fa      	bne.n	800acac <strcat+0x4>
 800acb6:	3b01      	subs	r3, #1
 800acb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acbc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acc0:	2a00      	cmp	r2, #0
 800acc2:	d1f9      	bne.n	800acb8 <strcat+0x10>
 800acc4:	bd10      	pop	{r4, pc}

0800acc6 <strcpy>:
 800acc6:	4603      	mov	r3, r0
 800acc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800accc:	f803 2b01 	strb.w	r2, [r3], #1
 800acd0:	2a00      	cmp	r2, #0
 800acd2:	d1f9      	bne.n	800acc8 <strcpy+0x2>
 800acd4:	4770      	bx	lr

0800acd6 <strcspn>:
 800acd6:	b570      	push	{r4, r5, r6, lr}
 800acd8:	4603      	mov	r3, r0
 800acda:	461e      	mov	r6, r3
 800acdc:	f813 4b01 	ldrb.w	r4, [r3], #1
 800ace0:	b144      	cbz	r4, 800acf4 <strcspn+0x1e>
 800ace2:	1e4a      	subs	r2, r1, #1
 800ace4:	e001      	b.n	800acea <strcspn+0x14>
 800ace6:	42a5      	cmp	r5, r4
 800ace8:	d004      	beq.n	800acf4 <strcspn+0x1e>
 800acea:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800acee:	2d00      	cmp	r5, #0
 800acf0:	d1f9      	bne.n	800ace6 <strcspn+0x10>
 800acf2:	e7f2      	b.n	800acda <strcspn+0x4>
 800acf4:	1a30      	subs	r0, r6, r0
 800acf6:	bd70      	pop	{r4, r5, r6, pc}

0800acf8 <sulp>:
 800acf8:	b570      	push	{r4, r5, r6, lr}
 800acfa:	4604      	mov	r4, r0
 800acfc:	460d      	mov	r5, r1
 800acfe:	ec45 4b10 	vmov	d0, r4, r5
 800ad02:	4616      	mov	r6, r2
 800ad04:	f001 fe3a 	bl	800c97c <__ulp>
 800ad08:	ec51 0b10 	vmov	r0, r1, d0
 800ad0c:	b17e      	cbz	r6, 800ad2e <sulp+0x36>
 800ad0e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ad12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	dd09      	ble.n	800ad2e <sulp+0x36>
 800ad1a:	051b      	lsls	r3, r3, #20
 800ad1c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ad20:	2400      	movs	r4, #0
 800ad22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ad26:	4622      	mov	r2, r4
 800ad28:	462b      	mov	r3, r5
 800ad2a:	f7f5 fc75 	bl	8000618 <__aeabi_dmul>
 800ad2e:	bd70      	pop	{r4, r5, r6, pc}

0800ad30 <_strtod_l>:
 800ad30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad34:	b0a3      	sub	sp, #140	; 0x8c
 800ad36:	461f      	mov	r7, r3
 800ad38:	2300      	movs	r3, #0
 800ad3a:	931e      	str	r3, [sp, #120]	; 0x78
 800ad3c:	4ba4      	ldr	r3, [pc, #656]	; (800afd0 <_strtod_l+0x2a0>)
 800ad3e:	9219      	str	r2, [sp, #100]	; 0x64
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	9307      	str	r3, [sp, #28]
 800ad44:	4604      	mov	r4, r0
 800ad46:	4618      	mov	r0, r3
 800ad48:	4688      	mov	r8, r1
 800ad4a:	f7f5 fa4b 	bl	80001e4 <strlen>
 800ad4e:	f04f 0a00 	mov.w	sl, #0
 800ad52:	4605      	mov	r5, r0
 800ad54:	f04f 0b00 	mov.w	fp, #0
 800ad58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ad5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad5e:	781a      	ldrb	r2, [r3, #0]
 800ad60:	2a2b      	cmp	r2, #43	; 0x2b
 800ad62:	d04c      	beq.n	800adfe <_strtod_l+0xce>
 800ad64:	d839      	bhi.n	800adda <_strtod_l+0xaa>
 800ad66:	2a0d      	cmp	r2, #13
 800ad68:	d832      	bhi.n	800add0 <_strtod_l+0xa0>
 800ad6a:	2a08      	cmp	r2, #8
 800ad6c:	d832      	bhi.n	800add4 <_strtod_l+0xa4>
 800ad6e:	2a00      	cmp	r2, #0
 800ad70:	d03c      	beq.n	800adec <_strtod_l+0xbc>
 800ad72:	2300      	movs	r3, #0
 800ad74:	930e      	str	r3, [sp, #56]	; 0x38
 800ad76:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ad78:	7833      	ldrb	r3, [r6, #0]
 800ad7a:	2b30      	cmp	r3, #48	; 0x30
 800ad7c:	f040 80b4 	bne.w	800aee8 <_strtod_l+0x1b8>
 800ad80:	7873      	ldrb	r3, [r6, #1]
 800ad82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ad86:	2b58      	cmp	r3, #88	; 0x58
 800ad88:	d16c      	bne.n	800ae64 <_strtod_l+0x134>
 800ad8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad8c:	9301      	str	r3, [sp, #4]
 800ad8e:	ab1e      	add	r3, sp, #120	; 0x78
 800ad90:	9702      	str	r7, [sp, #8]
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	4a8f      	ldr	r2, [pc, #572]	; (800afd4 <_strtod_l+0x2a4>)
 800ad96:	ab1f      	add	r3, sp, #124	; 0x7c
 800ad98:	a91d      	add	r1, sp, #116	; 0x74
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 ff60 	bl	800bc60 <__gethex>
 800ada0:	f010 0707 	ands.w	r7, r0, #7
 800ada4:	4605      	mov	r5, r0
 800ada6:	d005      	beq.n	800adb4 <_strtod_l+0x84>
 800ada8:	2f06      	cmp	r7, #6
 800adaa:	d12a      	bne.n	800ae02 <_strtod_l+0xd2>
 800adac:	3601      	adds	r6, #1
 800adae:	2300      	movs	r3, #0
 800adb0:	961d      	str	r6, [sp, #116]	; 0x74
 800adb2:	930e      	str	r3, [sp, #56]	; 0x38
 800adb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	f040 8596 	bne.w	800b8e8 <_strtod_l+0xbb8>
 800adbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adbe:	b1db      	cbz	r3, 800adf8 <_strtod_l+0xc8>
 800adc0:	4652      	mov	r2, sl
 800adc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800adc6:	ec43 2b10 	vmov	d0, r2, r3
 800adca:	b023      	add	sp, #140	; 0x8c
 800adcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800add0:	2a20      	cmp	r2, #32
 800add2:	d1ce      	bne.n	800ad72 <_strtod_l+0x42>
 800add4:	3301      	adds	r3, #1
 800add6:	931d      	str	r3, [sp, #116]	; 0x74
 800add8:	e7c0      	b.n	800ad5c <_strtod_l+0x2c>
 800adda:	2a2d      	cmp	r2, #45	; 0x2d
 800addc:	d1c9      	bne.n	800ad72 <_strtod_l+0x42>
 800adde:	2201      	movs	r2, #1
 800ade0:	920e      	str	r2, [sp, #56]	; 0x38
 800ade2:	1c5a      	adds	r2, r3, #1
 800ade4:	921d      	str	r2, [sp, #116]	; 0x74
 800ade6:	785b      	ldrb	r3, [r3, #1]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1c4      	bne.n	800ad76 <_strtod_l+0x46>
 800adec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f040 8576 	bne.w	800b8e4 <_strtod_l+0xbb4>
 800adf8:	4652      	mov	r2, sl
 800adfa:	465b      	mov	r3, fp
 800adfc:	e7e3      	b.n	800adc6 <_strtod_l+0x96>
 800adfe:	2200      	movs	r2, #0
 800ae00:	e7ee      	b.n	800ade0 <_strtod_l+0xb0>
 800ae02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ae04:	b13a      	cbz	r2, 800ae16 <_strtod_l+0xe6>
 800ae06:	2135      	movs	r1, #53	; 0x35
 800ae08:	a820      	add	r0, sp, #128	; 0x80
 800ae0a:	f001 fec2 	bl	800cb92 <__copybits>
 800ae0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ae10:	4620      	mov	r0, r4
 800ae12:	f001 fa87 	bl	800c324 <_Bfree>
 800ae16:	3f01      	subs	r7, #1
 800ae18:	2f05      	cmp	r7, #5
 800ae1a:	d807      	bhi.n	800ae2c <_strtod_l+0xfc>
 800ae1c:	e8df f007 	tbb	[pc, r7]
 800ae20:	1d180b0e 	.word	0x1d180b0e
 800ae24:	030e      	.short	0x030e
 800ae26:	f04f 0b00 	mov.w	fp, #0
 800ae2a:	46da      	mov	sl, fp
 800ae2c:	0728      	lsls	r0, r5, #28
 800ae2e:	d5c1      	bpl.n	800adb4 <_strtod_l+0x84>
 800ae30:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ae34:	e7be      	b.n	800adb4 <_strtod_l+0x84>
 800ae36:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800ae3a:	e7f7      	b.n	800ae2c <_strtod_l+0xfc>
 800ae3c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800ae40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ae42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ae46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ae4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ae4e:	e7ed      	b.n	800ae2c <_strtod_l+0xfc>
 800ae50:	f8df b184 	ldr.w	fp, [pc, #388]	; 800afd8 <_strtod_l+0x2a8>
 800ae54:	f04f 0a00 	mov.w	sl, #0
 800ae58:	e7e8      	b.n	800ae2c <_strtod_l+0xfc>
 800ae5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ae5e:	f04f 3aff 	mov.w	sl, #4294967295
 800ae62:	e7e3      	b.n	800ae2c <_strtod_l+0xfc>
 800ae64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae66:	1c5a      	adds	r2, r3, #1
 800ae68:	921d      	str	r2, [sp, #116]	; 0x74
 800ae6a:	785b      	ldrb	r3, [r3, #1]
 800ae6c:	2b30      	cmp	r3, #48	; 0x30
 800ae6e:	d0f9      	beq.n	800ae64 <_strtod_l+0x134>
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d09f      	beq.n	800adb4 <_strtod_l+0x84>
 800ae74:	2301      	movs	r3, #1
 800ae76:	f04f 0900 	mov.w	r9, #0
 800ae7a:	9304      	str	r3, [sp, #16]
 800ae7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae80:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ae84:	464f      	mov	r7, r9
 800ae86:	220a      	movs	r2, #10
 800ae88:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ae8a:	7806      	ldrb	r6, [r0, #0]
 800ae8c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ae90:	b2d9      	uxtb	r1, r3
 800ae92:	2909      	cmp	r1, #9
 800ae94:	d92a      	bls.n	800aeec <_strtod_l+0x1bc>
 800ae96:	9907      	ldr	r1, [sp, #28]
 800ae98:	462a      	mov	r2, r5
 800ae9a:	f002 fbd9 	bl	800d650 <strncmp>
 800ae9e:	b398      	cbz	r0, 800af08 <_strtod_l+0x1d8>
 800aea0:	2000      	movs	r0, #0
 800aea2:	4633      	mov	r3, r6
 800aea4:	463d      	mov	r5, r7
 800aea6:	9007      	str	r0, [sp, #28]
 800aea8:	4602      	mov	r2, r0
 800aeaa:	2b65      	cmp	r3, #101	; 0x65
 800aeac:	d001      	beq.n	800aeb2 <_strtod_l+0x182>
 800aeae:	2b45      	cmp	r3, #69	; 0x45
 800aeb0:	d118      	bne.n	800aee4 <_strtod_l+0x1b4>
 800aeb2:	b91d      	cbnz	r5, 800aebc <_strtod_l+0x18c>
 800aeb4:	9b04      	ldr	r3, [sp, #16]
 800aeb6:	4303      	orrs	r3, r0
 800aeb8:	d098      	beq.n	800adec <_strtod_l+0xbc>
 800aeba:	2500      	movs	r5, #0
 800aebc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800aec0:	f108 0301 	add.w	r3, r8, #1
 800aec4:	931d      	str	r3, [sp, #116]	; 0x74
 800aec6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800aeca:	2b2b      	cmp	r3, #43	; 0x2b
 800aecc:	d075      	beq.n	800afba <_strtod_l+0x28a>
 800aece:	2b2d      	cmp	r3, #45	; 0x2d
 800aed0:	d07b      	beq.n	800afca <_strtod_l+0x29a>
 800aed2:	f04f 0c00 	mov.w	ip, #0
 800aed6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800aeda:	2909      	cmp	r1, #9
 800aedc:	f240 8082 	bls.w	800afe4 <_strtod_l+0x2b4>
 800aee0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800aee4:	2600      	movs	r6, #0
 800aee6:	e09d      	b.n	800b024 <_strtod_l+0x2f4>
 800aee8:	2300      	movs	r3, #0
 800aeea:	e7c4      	b.n	800ae76 <_strtod_l+0x146>
 800aeec:	2f08      	cmp	r7, #8
 800aeee:	bfd8      	it	le
 800aef0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800aef2:	f100 0001 	add.w	r0, r0, #1
 800aef6:	bfda      	itte	le
 800aef8:	fb02 3301 	mlale	r3, r2, r1, r3
 800aefc:	9309      	strle	r3, [sp, #36]	; 0x24
 800aefe:	fb02 3909 	mlagt	r9, r2, r9, r3
 800af02:	3701      	adds	r7, #1
 800af04:	901d      	str	r0, [sp, #116]	; 0x74
 800af06:	e7bf      	b.n	800ae88 <_strtod_l+0x158>
 800af08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af0a:	195a      	adds	r2, r3, r5
 800af0c:	921d      	str	r2, [sp, #116]	; 0x74
 800af0e:	5d5b      	ldrb	r3, [r3, r5]
 800af10:	2f00      	cmp	r7, #0
 800af12:	d037      	beq.n	800af84 <_strtod_l+0x254>
 800af14:	9007      	str	r0, [sp, #28]
 800af16:	463d      	mov	r5, r7
 800af18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800af1c:	2a09      	cmp	r2, #9
 800af1e:	d912      	bls.n	800af46 <_strtod_l+0x216>
 800af20:	2201      	movs	r2, #1
 800af22:	e7c2      	b.n	800aeaa <_strtod_l+0x17a>
 800af24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af26:	1c5a      	adds	r2, r3, #1
 800af28:	921d      	str	r2, [sp, #116]	; 0x74
 800af2a:	785b      	ldrb	r3, [r3, #1]
 800af2c:	3001      	adds	r0, #1
 800af2e:	2b30      	cmp	r3, #48	; 0x30
 800af30:	d0f8      	beq.n	800af24 <_strtod_l+0x1f4>
 800af32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800af36:	2a08      	cmp	r2, #8
 800af38:	f200 84db 	bhi.w	800b8f2 <_strtod_l+0xbc2>
 800af3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800af3e:	9007      	str	r0, [sp, #28]
 800af40:	2000      	movs	r0, #0
 800af42:	920a      	str	r2, [sp, #40]	; 0x28
 800af44:	4605      	mov	r5, r0
 800af46:	3b30      	subs	r3, #48	; 0x30
 800af48:	f100 0201 	add.w	r2, r0, #1
 800af4c:	d014      	beq.n	800af78 <_strtod_l+0x248>
 800af4e:	9907      	ldr	r1, [sp, #28]
 800af50:	4411      	add	r1, r2
 800af52:	9107      	str	r1, [sp, #28]
 800af54:	462a      	mov	r2, r5
 800af56:	eb00 0e05 	add.w	lr, r0, r5
 800af5a:	210a      	movs	r1, #10
 800af5c:	4572      	cmp	r2, lr
 800af5e:	d113      	bne.n	800af88 <_strtod_l+0x258>
 800af60:	182a      	adds	r2, r5, r0
 800af62:	2a08      	cmp	r2, #8
 800af64:	f105 0501 	add.w	r5, r5, #1
 800af68:	4405      	add	r5, r0
 800af6a:	dc1c      	bgt.n	800afa6 <_strtod_l+0x276>
 800af6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af6e:	220a      	movs	r2, #10
 800af70:	fb02 3301 	mla	r3, r2, r1, r3
 800af74:	9309      	str	r3, [sp, #36]	; 0x24
 800af76:	2200      	movs	r2, #0
 800af78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af7a:	1c59      	adds	r1, r3, #1
 800af7c:	911d      	str	r1, [sp, #116]	; 0x74
 800af7e:	785b      	ldrb	r3, [r3, #1]
 800af80:	4610      	mov	r0, r2
 800af82:	e7c9      	b.n	800af18 <_strtod_l+0x1e8>
 800af84:	4638      	mov	r0, r7
 800af86:	e7d2      	b.n	800af2e <_strtod_l+0x1fe>
 800af88:	2a08      	cmp	r2, #8
 800af8a:	dc04      	bgt.n	800af96 <_strtod_l+0x266>
 800af8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800af8e:	434e      	muls	r6, r1
 800af90:	9609      	str	r6, [sp, #36]	; 0x24
 800af92:	3201      	adds	r2, #1
 800af94:	e7e2      	b.n	800af5c <_strtod_l+0x22c>
 800af96:	f102 0c01 	add.w	ip, r2, #1
 800af9a:	f1bc 0f10 	cmp.w	ip, #16
 800af9e:	bfd8      	it	le
 800afa0:	fb01 f909 	mulle.w	r9, r1, r9
 800afa4:	e7f5      	b.n	800af92 <_strtod_l+0x262>
 800afa6:	2d10      	cmp	r5, #16
 800afa8:	bfdc      	itt	le
 800afaa:	220a      	movle	r2, #10
 800afac:	fb02 3909 	mlale	r9, r2, r9, r3
 800afb0:	e7e1      	b.n	800af76 <_strtod_l+0x246>
 800afb2:	2300      	movs	r3, #0
 800afb4:	9307      	str	r3, [sp, #28]
 800afb6:	2201      	movs	r2, #1
 800afb8:	e77c      	b.n	800aeb4 <_strtod_l+0x184>
 800afba:	f04f 0c00 	mov.w	ip, #0
 800afbe:	f108 0302 	add.w	r3, r8, #2
 800afc2:	931d      	str	r3, [sp, #116]	; 0x74
 800afc4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800afc8:	e785      	b.n	800aed6 <_strtod_l+0x1a6>
 800afca:	f04f 0c01 	mov.w	ip, #1
 800afce:	e7f6      	b.n	800afbe <_strtod_l+0x28e>
 800afd0:	0800ff20 	.word	0x0800ff20
 800afd4:	0800fca0 	.word	0x0800fca0
 800afd8:	7ff00000 	.word	0x7ff00000
 800afdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800afde:	1c59      	adds	r1, r3, #1
 800afe0:	911d      	str	r1, [sp, #116]	; 0x74
 800afe2:	785b      	ldrb	r3, [r3, #1]
 800afe4:	2b30      	cmp	r3, #48	; 0x30
 800afe6:	d0f9      	beq.n	800afdc <_strtod_l+0x2ac>
 800afe8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800afec:	2908      	cmp	r1, #8
 800afee:	f63f af79 	bhi.w	800aee4 <_strtod_l+0x1b4>
 800aff2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800aff6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aff8:	9308      	str	r3, [sp, #32]
 800affa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800affc:	1c59      	adds	r1, r3, #1
 800affe:	911d      	str	r1, [sp, #116]	; 0x74
 800b000:	785b      	ldrb	r3, [r3, #1]
 800b002:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b006:	2e09      	cmp	r6, #9
 800b008:	d937      	bls.n	800b07a <_strtod_l+0x34a>
 800b00a:	9e08      	ldr	r6, [sp, #32]
 800b00c:	1b89      	subs	r1, r1, r6
 800b00e:	2908      	cmp	r1, #8
 800b010:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b014:	dc02      	bgt.n	800b01c <_strtod_l+0x2ec>
 800b016:	4576      	cmp	r6, lr
 800b018:	bfa8      	it	ge
 800b01a:	4676      	movge	r6, lr
 800b01c:	f1bc 0f00 	cmp.w	ip, #0
 800b020:	d000      	beq.n	800b024 <_strtod_l+0x2f4>
 800b022:	4276      	negs	r6, r6
 800b024:	2d00      	cmp	r5, #0
 800b026:	d14f      	bne.n	800b0c8 <_strtod_l+0x398>
 800b028:	9904      	ldr	r1, [sp, #16]
 800b02a:	4301      	orrs	r1, r0
 800b02c:	f47f aec2 	bne.w	800adb4 <_strtod_l+0x84>
 800b030:	2a00      	cmp	r2, #0
 800b032:	f47f aedb 	bne.w	800adec <_strtod_l+0xbc>
 800b036:	2b69      	cmp	r3, #105	; 0x69
 800b038:	d027      	beq.n	800b08a <_strtod_l+0x35a>
 800b03a:	dc24      	bgt.n	800b086 <_strtod_l+0x356>
 800b03c:	2b49      	cmp	r3, #73	; 0x49
 800b03e:	d024      	beq.n	800b08a <_strtod_l+0x35a>
 800b040:	2b4e      	cmp	r3, #78	; 0x4e
 800b042:	f47f aed3 	bne.w	800adec <_strtod_l+0xbc>
 800b046:	499e      	ldr	r1, [pc, #632]	; (800b2c0 <_strtod_l+0x590>)
 800b048:	a81d      	add	r0, sp, #116	; 0x74
 800b04a:	f001 f861 	bl	800c110 <__match>
 800b04e:	2800      	cmp	r0, #0
 800b050:	f43f aecc 	beq.w	800adec <_strtod_l+0xbc>
 800b054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	2b28      	cmp	r3, #40	; 0x28
 800b05a:	d12d      	bne.n	800b0b8 <_strtod_l+0x388>
 800b05c:	4999      	ldr	r1, [pc, #612]	; (800b2c4 <_strtod_l+0x594>)
 800b05e:	aa20      	add	r2, sp, #128	; 0x80
 800b060:	a81d      	add	r0, sp, #116	; 0x74
 800b062:	f001 f869 	bl	800c138 <__hexnan>
 800b066:	2805      	cmp	r0, #5
 800b068:	d126      	bne.n	800b0b8 <_strtod_l+0x388>
 800b06a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b06c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b070:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b074:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b078:	e69c      	b.n	800adb4 <_strtod_l+0x84>
 800b07a:	210a      	movs	r1, #10
 800b07c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b080:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b084:	e7b9      	b.n	800affa <_strtod_l+0x2ca>
 800b086:	2b6e      	cmp	r3, #110	; 0x6e
 800b088:	e7db      	b.n	800b042 <_strtod_l+0x312>
 800b08a:	498f      	ldr	r1, [pc, #572]	; (800b2c8 <_strtod_l+0x598>)
 800b08c:	a81d      	add	r0, sp, #116	; 0x74
 800b08e:	f001 f83f 	bl	800c110 <__match>
 800b092:	2800      	cmp	r0, #0
 800b094:	f43f aeaa 	beq.w	800adec <_strtod_l+0xbc>
 800b098:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b09a:	498c      	ldr	r1, [pc, #560]	; (800b2cc <_strtod_l+0x59c>)
 800b09c:	3b01      	subs	r3, #1
 800b09e:	a81d      	add	r0, sp, #116	; 0x74
 800b0a0:	931d      	str	r3, [sp, #116]	; 0x74
 800b0a2:	f001 f835 	bl	800c110 <__match>
 800b0a6:	b910      	cbnz	r0, 800b0ae <_strtod_l+0x37e>
 800b0a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	931d      	str	r3, [sp, #116]	; 0x74
 800b0ae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b2dc <_strtod_l+0x5ac>
 800b0b2:	f04f 0a00 	mov.w	sl, #0
 800b0b6:	e67d      	b.n	800adb4 <_strtod_l+0x84>
 800b0b8:	4885      	ldr	r0, [pc, #532]	; (800b2d0 <_strtod_l+0x5a0>)
 800b0ba:	f002 fab1 	bl	800d620 <nan>
 800b0be:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b0c2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b0c6:	e675      	b.n	800adb4 <_strtod_l+0x84>
 800b0c8:	9b07      	ldr	r3, [sp, #28]
 800b0ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0cc:	1af3      	subs	r3, r6, r3
 800b0ce:	2f00      	cmp	r7, #0
 800b0d0:	bf08      	it	eq
 800b0d2:	462f      	moveq	r7, r5
 800b0d4:	2d10      	cmp	r5, #16
 800b0d6:	9308      	str	r3, [sp, #32]
 800b0d8:	46a8      	mov	r8, r5
 800b0da:	bfa8      	it	ge
 800b0dc:	f04f 0810 	movge.w	r8, #16
 800b0e0:	f7f5 fa20 	bl	8000524 <__aeabi_ui2d>
 800b0e4:	2d09      	cmp	r5, #9
 800b0e6:	4682      	mov	sl, r0
 800b0e8:	468b      	mov	fp, r1
 800b0ea:	dd13      	ble.n	800b114 <_strtod_l+0x3e4>
 800b0ec:	4b79      	ldr	r3, [pc, #484]	; (800b2d4 <_strtod_l+0x5a4>)
 800b0ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b0f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b0f6:	f7f5 fa8f 	bl	8000618 <__aeabi_dmul>
 800b0fa:	4682      	mov	sl, r0
 800b0fc:	4648      	mov	r0, r9
 800b0fe:	468b      	mov	fp, r1
 800b100:	f7f5 fa10 	bl	8000524 <__aeabi_ui2d>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4650      	mov	r0, sl
 800b10a:	4659      	mov	r1, fp
 800b10c:	f7f5 f8ce 	bl	80002ac <__adddf3>
 800b110:	4682      	mov	sl, r0
 800b112:	468b      	mov	fp, r1
 800b114:	2d0f      	cmp	r5, #15
 800b116:	dc38      	bgt.n	800b18a <_strtod_l+0x45a>
 800b118:	9b08      	ldr	r3, [sp, #32]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f43f ae4a 	beq.w	800adb4 <_strtod_l+0x84>
 800b120:	dd24      	ble.n	800b16c <_strtod_l+0x43c>
 800b122:	2b16      	cmp	r3, #22
 800b124:	dc0b      	bgt.n	800b13e <_strtod_l+0x40e>
 800b126:	4d6b      	ldr	r5, [pc, #428]	; (800b2d4 <_strtod_l+0x5a4>)
 800b128:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800b12c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b130:	4652      	mov	r2, sl
 800b132:	465b      	mov	r3, fp
 800b134:	f7f5 fa70 	bl	8000618 <__aeabi_dmul>
 800b138:	4682      	mov	sl, r0
 800b13a:	468b      	mov	fp, r1
 800b13c:	e63a      	b.n	800adb4 <_strtod_l+0x84>
 800b13e:	9a08      	ldr	r2, [sp, #32]
 800b140:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b144:	4293      	cmp	r3, r2
 800b146:	db20      	blt.n	800b18a <_strtod_l+0x45a>
 800b148:	4c62      	ldr	r4, [pc, #392]	; (800b2d4 <_strtod_l+0x5a4>)
 800b14a:	f1c5 050f 	rsb	r5, r5, #15
 800b14e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b152:	4652      	mov	r2, sl
 800b154:	465b      	mov	r3, fp
 800b156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b15a:	f7f5 fa5d 	bl	8000618 <__aeabi_dmul>
 800b15e:	9b08      	ldr	r3, [sp, #32]
 800b160:	1b5d      	subs	r5, r3, r5
 800b162:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b166:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b16a:	e7e3      	b.n	800b134 <_strtod_l+0x404>
 800b16c:	9b08      	ldr	r3, [sp, #32]
 800b16e:	3316      	adds	r3, #22
 800b170:	db0b      	blt.n	800b18a <_strtod_l+0x45a>
 800b172:	9b07      	ldr	r3, [sp, #28]
 800b174:	4a57      	ldr	r2, [pc, #348]	; (800b2d4 <_strtod_l+0x5a4>)
 800b176:	1b9e      	subs	r6, r3, r6
 800b178:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b17c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b180:	4650      	mov	r0, sl
 800b182:	4659      	mov	r1, fp
 800b184:	f7f5 fb72 	bl	800086c <__aeabi_ddiv>
 800b188:	e7d6      	b.n	800b138 <_strtod_l+0x408>
 800b18a:	9b08      	ldr	r3, [sp, #32]
 800b18c:	eba5 0808 	sub.w	r8, r5, r8
 800b190:	4498      	add	r8, r3
 800b192:	f1b8 0f00 	cmp.w	r8, #0
 800b196:	dd71      	ble.n	800b27c <_strtod_l+0x54c>
 800b198:	f018 030f 	ands.w	r3, r8, #15
 800b19c:	d00a      	beq.n	800b1b4 <_strtod_l+0x484>
 800b19e:	494d      	ldr	r1, [pc, #308]	; (800b2d4 <_strtod_l+0x5a4>)
 800b1a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b1a4:	4652      	mov	r2, sl
 800b1a6:	465b      	mov	r3, fp
 800b1a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1ac:	f7f5 fa34 	bl	8000618 <__aeabi_dmul>
 800b1b0:	4682      	mov	sl, r0
 800b1b2:	468b      	mov	fp, r1
 800b1b4:	f038 080f 	bics.w	r8, r8, #15
 800b1b8:	d04d      	beq.n	800b256 <_strtod_l+0x526>
 800b1ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b1be:	dd22      	ble.n	800b206 <_strtod_l+0x4d6>
 800b1c0:	2500      	movs	r5, #0
 800b1c2:	462e      	mov	r6, r5
 800b1c4:	9509      	str	r5, [sp, #36]	; 0x24
 800b1c6:	9507      	str	r5, [sp, #28]
 800b1c8:	2322      	movs	r3, #34	; 0x22
 800b1ca:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b2dc <_strtod_l+0x5ac>
 800b1ce:	6023      	str	r3, [r4, #0]
 800b1d0:	f04f 0a00 	mov.w	sl, #0
 800b1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f43f adec 	beq.w	800adb4 <_strtod_l+0x84>
 800b1dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f001 f8a0 	bl	800c324 <_Bfree>
 800b1e4:	9907      	ldr	r1, [sp, #28]
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f001 f89c 	bl	800c324 <_Bfree>
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f001 f898 	bl	800c324 <_Bfree>
 800b1f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	f001 f894 	bl	800c324 <_Bfree>
 800b1fc:	4629      	mov	r1, r5
 800b1fe:	4620      	mov	r0, r4
 800b200:	f001 f890 	bl	800c324 <_Bfree>
 800b204:	e5d6      	b.n	800adb4 <_strtod_l+0x84>
 800b206:	2300      	movs	r3, #0
 800b208:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b20c:	4650      	mov	r0, sl
 800b20e:	4659      	mov	r1, fp
 800b210:	4699      	mov	r9, r3
 800b212:	f1b8 0f01 	cmp.w	r8, #1
 800b216:	dc21      	bgt.n	800b25c <_strtod_l+0x52c>
 800b218:	b10b      	cbz	r3, 800b21e <_strtod_l+0x4ee>
 800b21a:	4682      	mov	sl, r0
 800b21c:	468b      	mov	fp, r1
 800b21e:	4b2e      	ldr	r3, [pc, #184]	; (800b2d8 <_strtod_l+0x5a8>)
 800b220:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b224:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b228:	4652      	mov	r2, sl
 800b22a:	465b      	mov	r3, fp
 800b22c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b230:	f7f5 f9f2 	bl	8000618 <__aeabi_dmul>
 800b234:	4b29      	ldr	r3, [pc, #164]	; (800b2dc <_strtod_l+0x5ac>)
 800b236:	460a      	mov	r2, r1
 800b238:	400b      	ands	r3, r1
 800b23a:	4929      	ldr	r1, [pc, #164]	; (800b2e0 <_strtod_l+0x5b0>)
 800b23c:	428b      	cmp	r3, r1
 800b23e:	4682      	mov	sl, r0
 800b240:	d8be      	bhi.n	800b1c0 <_strtod_l+0x490>
 800b242:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b246:	428b      	cmp	r3, r1
 800b248:	bf86      	itte	hi
 800b24a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b2e4 <_strtod_l+0x5b4>
 800b24e:	f04f 3aff 	movhi.w	sl, #4294967295
 800b252:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b256:	2300      	movs	r3, #0
 800b258:	9304      	str	r3, [sp, #16]
 800b25a:	e081      	b.n	800b360 <_strtod_l+0x630>
 800b25c:	f018 0f01 	tst.w	r8, #1
 800b260:	d007      	beq.n	800b272 <_strtod_l+0x542>
 800b262:	4b1d      	ldr	r3, [pc, #116]	; (800b2d8 <_strtod_l+0x5a8>)
 800b264:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	f7f5 f9d4 	bl	8000618 <__aeabi_dmul>
 800b270:	2301      	movs	r3, #1
 800b272:	f109 0901 	add.w	r9, r9, #1
 800b276:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b27a:	e7ca      	b.n	800b212 <_strtod_l+0x4e2>
 800b27c:	d0eb      	beq.n	800b256 <_strtod_l+0x526>
 800b27e:	f1c8 0800 	rsb	r8, r8, #0
 800b282:	f018 020f 	ands.w	r2, r8, #15
 800b286:	d00a      	beq.n	800b29e <_strtod_l+0x56e>
 800b288:	4b12      	ldr	r3, [pc, #72]	; (800b2d4 <_strtod_l+0x5a4>)
 800b28a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b28e:	4650      	mov	r0, sl
 800b290:	4659      	mov	r1, fp
 800b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b296:	f7f5 fae9 	bl	800086c <__aeabi_ddiv>
 800b29a:	4682      	mov	sl, r0
 800b29c:	468b      	mov	fp, r1
 800b29e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b2a2:	d0d8      	beq.n	800b256 <_strtod_l+0x526>
 800b2a4:	f1b8 0f1f 	cmp.w	r8, #31
 800b2a8:	dd1e      	ble.n	800b2e8 <_strtod_l+0x5b8>
 800b2aa:	2500      	movs	r5, #0
 800b2ac:	462e      	mov	r6, r5
 800b2ae:	9509      	str	r5, [sp, #36]	; 0x24
 800b2b0:	9507      	str	r5, [sp, #28]
 800b2b2:	2322      	movs	r3, #34	; 0x22
 800b2b4:	f04f 0a00 	mov.w	sl, #0
 800b2b8:	f04f 0b00 	mov.w	fp, #0
 800b2bc:	6023      	str	r3, [r4, #0]
 800b2be:	e789      	b.n	800b1d4 <_strtod_l+0x4a4>
 800b2c0:	0800fc9d 	.word	0x0800fc9d
 800b2c4:	0800fcb4 	.word	0x0800fcb4
 800b2c8:	0800fc94 	.word	0x0800fc94
 800b2cc:	0800fc97 	.word	0x0800fc97
 800b2d0:	0800fda3 	.word	0x0800fda3
 800b2d4:	0800ffc0 	.word	0x0800ffc0
 800b2d8:	0800ff98 	.word	0x0800ff98
 800b2dc:	7ff00000 	.word	0x7ff00000
 800b2e0:	7ca00000 	.word	0x7ca00000
 800b2e4:	7fefffff 	.word	0x7fefffff
 800b2e8:	f018 0310 	ands.w	r3, r8, #16
 800b2ec:	bf18      	it	ne
 800b2ee:	236a      	movne	r3, #106	; 0x6a
 800b2f0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800b6a8 <_strtod_l+0x978>
 800b2f4:	9304      	str	r3, [sp, #16]
 800b2f6:	4650      	mov	r0, sl
 800b2f8:	4659      	mov	r1, fp
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	f018 0f01 	tst.w	r8, #1
 800b300:	d004      	beq.n	800b30c <_strtod_l+0x5dc>
 800b302:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b306:	f7f5 f987 	bl	8000618 <__aeabi_dmul>
 800b30a:	2301      	movs	r3, #1
 800b30c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b310:	f109 0908 	add.w	r9, r9, #8
 800b314:	d1f2      	bne.n	800b2fc <_strtod_l+0x5cc>
 800b316:	b10b      	cbz	r3, 800b31c <_strtod_l+0x5ec>
 800b318:	4682      	mov	sl, r0
 800b31a:	468b      	mov	fp, r1
 800b31c:	9b04      	ldr	r3, [sp, #16]
 800b31e:	b1bb      	cbz	r3, 800b350 <_strtod_l+0x620>
 800b320:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b324:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b328:	2b00      	cmp	r3, #0
 800b32a:	4659      	mov	r1, fp
 800b32c:	dd10      	ble.n	800b350 <_strtod_l+0x620>
 800b32e:	2b1f      	cmp	r3, #31
 800b330:	f340 8128 	ble.w	800b584 <_strtod_l+0x854>
 800b334:	2b34      	cmp	r3, #52	; 0x34
 800b336:	bfde      	ittt	le
 800b338:	3b20      	suble	r3, #32
 800b33a:	f04f 32ff 	movle.w	r2, #4294967295
 800b33e:	fa02 f303 	lslle.w	r3, r2, r3
 800b342:	f04f 0a00 	mov.w	sl, #0
 800b346:	bfcc      	ite	gt
 800b348:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b34c:	ea03 0b01 	andle.w	fp, r3, r1
 800b350:	2200      	movs	r2, #0
 800b352:	2300      	movs	r3, #0
 800b354:	4650      	mov	r0, sl
 800b356:	4659      	mov	r1, fp
 800b358:	f7f5 fbc6 	bl	8000ae8 <__aeabi_dcmpeq>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d1a4      	bne.n	800b2aa <_strtod_l+0x57a>
 800b360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b366:	462b      	mov	r3, r5
 800b368:	463a      	mov	r2, r7
 800b36a:	4620      	mov	r0, r4
 800b36c:	f001 f846 	bl	800c3fc <__s2b>
 800b370:	9009      	str	r0, [sp, #36]	; 0x24
 800b372:	2800      	cmp	r0, #0
 800b374:	f43f af24 	beq.w	800b1c0 <_strtod_l+0x490>
 800b378:	9b07      	ldr	r3, [sp, #28]
 800b37a:	1b9e      	subs	r6, r3, r6
 800b37c:	9b08      	ldr	r3, [sp, #32]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	bfb4      	ite	lt
 800b382:	4633      	movlt	r3, r6
 800b384:	2300      	movge	r3, #0
 800b386:	9310      	str	r3, [sp, #64]	; 0x40
 800b388:	9b08      	ldr	r3, [sp, #32]
 800b38a:	2500      	movs	r5, #0
 800b38c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b390:	9318      	str	r3, [sp, #96]	; 0x60
 800b392:	462e      	mov	r6, r5
 800b394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b396:	4620      	mov	r0, r4
 800b398:	6859      	ldr	r1, [r3, #4]
 800b39a:	f000 ff83 	bl	800c2a4 <_Balloc>
 800b39e:	9007      	str	r0, [sp, #28]
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	f43f af11 	beq.w	800b1c8 <_strtod_l+0x498>
 800b3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3a8:	691a      	ldr	r2, [r3, #16]
 800b3aa:	3202      	adds	r2, #2
 800b3ac:	f103 010c 	add.w	r1, r3, #12
 800b3b0:	0092      	lsls	r2, r2, #2
 800b3b2:	300c      	adds	r0, #12
 800b3b4:	f7ff fc28 	bl	800ac08 <memcpy>
 800b3b8:	ec4b ab10 	vmov	d0, sl, fp
 800b3bc:	aa20      	add	r2, sp, #128	; 0x80
 800b3be:	a91f      	add	r1, sp, #124	; 0x7c
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b3c6:	f001 fb55 	bl	800ca74 <__d2b>
 800b3ca:	901e      	str	r0, [sp, #120]	; 0x78
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	f43f aefb 	beq.w	800b1c8 <_strtod_l+0x498>
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f001 f8ab 	bl	800c530 <__i2b>
 800b3da:	4606      	mov	r6, r0
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	f43f aef3 	beq.w	800b1c8 <_strtod_l+0x498>
 800b3e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b3e4:	9904      	ldr	r1, [sp, #16]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	bfab      	itete	ge
 800b3ea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800b3ec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800b3ee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800b3f0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800b3f4:	bfac      	ite	ge
 800b3f6:	eb03 0902 	addge.w	r9, r3, r2
 800b3fa:	1ad7      	sublt	r7, r2, r3
 800b3fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b3fe:	eba3 0801 	sub.w	r8, r3, r1
 800b402:	4490      	add	r8, r2
 800b404:	4ba3      	ldr	r3, [pc, #652]	; (800b694 <_strtod_l+0x964>)
 800b406:	f108 38ff 	add.w	r8, r8, #4294967295
 800b40a:	4598      	cmp	r8, r3
 800b40c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b410:	f280 80cc 	bge.w	800b5ac <_strtod_l+0x87c>
 800b414:	eba3 0308 	sub.w	r3, r3, r8
 800b418:	2b1f      	cmp	r3, #31
 800b41a:	eba2 0203 	sub.w	r2, r2, r3
 800b41e:	f04f 0101 	mov.w	r1, #1
 800b422:	f300 80b6 	bgt.w	800b592 <_strtod_l+0x862>
 800b426:	fa01 f303 	lsl.w	r3, r1, r3
 800b42a:	9311      	str	r3, [sp, #68]	; 0x44
 800b42c:	2300      	movs	r3, #0
 800b42e:	930c      	str	r3, [sp, #48]	; 0x30
 800b430:	eb09 0802 	add.w	r8, r9, r2
 800b434:	9b04      	ldr	r3, [sp, #16]
 800b436:	45c1      	cmp	r9, r8
 800b438:	4417      	add	r7, r2
 800b43a:	441f      	add	r7, r3
 800b43c:	464b      	mov	r3, r9
 800b43e:	bfa8      	it	ge
 800b440:	4643      	movge	r3, r8
 800b442:	42bb      	cmp	r3, r7
 800b444:	bfa8      	it	ge
 800b446:	463b      	movge	r3, r7
 800b448:	2b00      	cmp	r3, #0
 800b44a:	bfc2      	ittt	gt
 800b44c:	eba8 0803 	subgt.w	r8, r8, r3
 800b450:	1aff      	subgt	r7, r7, r3
 800b452:	eba9 0903 	subgt.w	r9, r9, r3
 800b456:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b458:	2b00      	cmp	r3, #0
 800b45a:	dd17      	ble.n	800b48c <_strtod_l+0x75c>
 800b45c:	4631      	mov	r1, r6
 800b45e:	461a      	mov	r2, r3
 800b460:	4620      	mov	r0, r4
 800b462:	f001 f921 	bl	800c6a8 <__pow5mult>
 800b466:	4606      	mov	r6, r0
 800b468:	2800      	cmp	r0, #0
 800b46a:	f43f aead 	beq.w	800b1c8 <_strtod_l+0x498>
 800b46e:	4601      	mov	r1, r0
 800b470:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b472:	4620      	mov	r0, r4
 800b474:	f001 f872 	bl	800c55c <__multiply>
 800b478:	900f      	str	r0, [sp, #60]	; 0x3c
 800b47a:	2800      	cmp	r0, #0
 800b47c:	f43f aea4 	beq.w	800b1c8 <_strtod_l+0x498>
 800b480:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b482:	4620      	mov	r0, r4
 800b484:	f000 ff4e 	bl	800c324 <_Bfree>
 800b488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b48a:	931e      	str	r3, [sp, #120]	; 0x78
 800b48c:	f1b8 0f00 	cmp.w	r8, #0
 800b490:	f300 8091 	bgt.w	800b5b6 <_strtod_l+0x886>
 800b494:	9b08      	ldr	r3, [sp, #32]
 800b496:	2b00      	cmp	r3, #0
 800b498:	dd08      	ble.n	800b4ac <_strtod_l+0x77c>
 800b49a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b49c:	9907      	ldr	r1, [sp, #28]
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f001 f902 	bl	800c6a8 <__pow5mult>
 800b4a4:	9007      	str	r0, [sp, #28]
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	f43f ae8e 	beq.w	800b1c8 <_strtod_l+0x498>
 800b4ac:	2f00      	cmp	r7, #0
 800b4ae:	dd08      	ble.n	800b4c2 <_strtod_l+0x792>
 800b4b0:	9907      	ldr	r1, [sp, #28]
 800b4b2:	463a      	mov	r2, r7
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f001 f951 	bl	800c75c <__lshift>
 800b4ba:	9007      	str	r0, [sp, #28]
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	f43f ae83 	beq.w	800b1c8 <_strtod_l+0x498>
 800b4c2:	f1b9 0f00 	cmp.w	r9, #0
 800b4c6:	dd08      	ble.n	800b4da <_strtod_l+0x7aa>
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	464a      	mov	r2, r9
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f001 f945 	bl	800c75c <__lshift>
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	f43f ae77 	beq.w	800b1c8 <_strtod_l+0x498>
 800b4da:	9a07      	ldr	r2, [sp, #28]
 800b4dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f001 f9c4 	bl	800c86c <__mdiff>
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	f43f ae6e 	beq.w	800b1c8 <_strtod_l+0x498>
 800b4ec:	68c3      	ldr	r3, [r0, #12]
 800b4ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	60c3      	str	r3, [r0, #12]
 800b4f4:	4631      	mov	r1, r6
 800b4f6:	f001 f99d 	bl	800c834 <__mcmp>
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	da65      	bge.n	800b5ca <_strtod_l+0x89a>
 800b4fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b500:	ea53 030a 	orrs.w	r3, r3, sl
 800b504:	f040 8087 	bne.w	800b616 <_strtod_l+0x8e6>
 800b508:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f040 8082 	bne.w	800b616 <_strtod_l+0x8e6>
 800b512:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b516:	0d1b      	lsrs	r3, r3, #20
 800b518:	051b      	lsls	r3, r3, #20
 800b51a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b51e:	d97a      	bls.n	800b616 <_strtod_l+0x8e6>
 800b520:	696b      	ldr	r3, [r5, #20]
 800b522:	b913      	cbnz	r3, 800b52a <_strtod_l+0x7fa>
 800b524:	692b      	ldr	r3, [r5, #16]
 800b526:	2b01      	cmp	r3, #1
 800b528:	dd75      	ble.n	800b616 <_strtod_l+0x8e6>
 800b52a:	4629      	mov	r1, r5
 800b52c:	2201      	movs	r2, #1
 800b52e:	4620      	mov	r0, r4
 800b530:	f001 f914 	bl	800c75c <__lshift>
 800b534:	4631      	mov	r1, r6
 800b536:	4605      	mov	r5, r0
 800b538:	f001 f97c 	bl	800c834 <__mcmp>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	dd6a      	ble.n	800b616 <_strtod_l+0x8e6>
 800b540:	9904      	ldr	r1, [sp, #16]
 800b542:	4a55      	ldr	r2, [pc, #340]	; (800b698 <_strtod_l+0x968>)
 800b544:	465b      	mov	r3, fp
 800b546:	2900      	cmp	r1, #0
 800b548:	f000 8085 	beq.w	800b656 <_strtod_l+0x926>
 800b54c:	ea02 010b 	and.w	r1, r2, fp
 800b550:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b554:	dc7f      	bgt.n	800b656 <_strtod_l+0x926>
 800b556:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b55a:	f77f aeaa 	ble.w	800b2b2 <_strtod_l+0x582>
 800b55e:	4a4f      	ldr	r2, [pc, #316]	; (800b69c <_strtod_l+0x96c>)
 800b560:	2300      	movs	r3, #0
 800b562:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800b566:	4650      	mov	r0, sl
 800b568:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800b56c:	4659      	mov	r1, fp
 800b56e:	f7f5 f853 	bl	8000618 <__aeabi_dmul>
 800b572:	460b      	mov	r3, r1
 800b574:	4303      	orrs	r3, r0
 800b576:	bf08      	it	eq
 800b578:	2322      	moveq	r3, #34	; 0x22
 800b57a:	4682      	mov	sl, r0
 800b57c:	468b      	mov	fp, r1
 800b57e:	bf08      	it	eq
 800b580:	6023      	streq	r3, [r4, #0]
 800b582:	e62b      	b.n	800b1dc <_strtod_l+0x4ac>
 800b584:	f04f 32ff 	mov.w	r2, #4294967295
 800b588:	fa02 f303 	lsl.w	r3, r2, r3
 800b58c:	ea03 0a0a 	and.w	sl, r3, sl
 800b590:	e6de      	b.n	800b350 <_strtod_l+0x620>
 800b592:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b596:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b59a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b59e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b5a2:	fa01 f308 	lsl.w	r3, r1, r8
 800b5a6:	930c      	str	r3, [sp, #48]	; 0x30
 800b5a8:	9111      	str	r1, [sp, #68]	; 0x44
 800b5aa:	e741      	b.n	800b430 <_strtod_l+0x700>
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	930c      	str	r3, [sp, #48]	; 0x30
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	9311      	str	r3, [sp, #68]	; 0x44
 800b5b4:	e73c      	b.n	800b430 <_strtod_l+0x700>
 800b5b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b5b8:	4642      	mov	r2, r8
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f001 f8ce 	bl	800c75c <__lshift>
 800b5c0:	901e      	str	r0, [sp, #120]	; 0x78
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	f47f af66 	bne.w	800b494 <_strtod_l+0x764>
 800b5c8:	e5fe      	b.n	800b1c8 <_strtod_l+0x498>
 800b5ca:	465f      	mov	r7, fp
 800b5cc:	d16e      	bne.n	800b6ac <_strtod_l+0x97c>
 800b5ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b5d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5d4:	b342      	cbz	r2, 800b628 <_strtod_l+0x8f8>
 800b5d6:	4a32      	ldr	r2, [pc, #200]	; (800b6a0 <_strtod_l+0x970>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d128      	bne.n	800b62e <_strtod_l+0x8fe>
 800b5dc:	9b04      	ldr	r3, [sp, #16]
 800b5de:	4650      	mov	r0, sl
 800b5e0:	b1eb      	cbz	r3, 800b61e <_strtod_l+0x8ee>
 800b5e2:	4a2d      	ldr	r2, [pc, #180]	; (800b698 <_strtod_l+0x968>)
 800b5e4:	403a      	ands	r2, r7
 800b5e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b5ea:	f04f 31ff 	mov.w	r1, #4294967295
 800b5ee:	d819      	bhi.n	800b624 <_strtod_l+0x8f4>
 800b5f0:	0d12      	lsrs	r2, r2, #20
 800b5f2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b5f6:	fa01 f303 	lsl.w	r3, r1, r3
 800b5fa:	4298      	cmp	r0, r3
 800b5fc:	d117      	bne.n	800b62e <_strtod_l+0x8fe>
 800b5fe:	4b29      	ldr	r3, [pc, #164]	; (800b6a4 <_strtod_l+0x974>)
 800b600:	429f      	cmp	r7, r3
 800b602:	d102      	bne.n	800b60a <_strtod_l+0x8da>
 800b604:	3001      	adds	r0, #1
 800b606:	f43f addf 	beq.w	800b1c8 <_strtod_l+0x498>
 800b60a:	4b23      	ldr	r3, [pc, #140]	; (800b698 <_strtod_l+0x968>)
 800b60c:	403b      	ands	r3, r7
 800b60e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b612:	f04f 0a00 	mov.w	sl, #0
 800b616:	9b04      	ldr	r3, [sp, #16]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1a0      	bne.n	800b55e <_strtod_l+0x82e>
 800b61c:	e5de      	b.n	800b1dc <_strtod_l+0x4ac>
 800b61e:	f04f 33ff 	mov.w	r3, #4294967295
 800b622:	e7ea      	b.n	800b5fa <_strtod_l+0x8ca>
 800b624:	460b      	mov	r3, r1
 800b626:	e7e8      	b.n	800b5fa <_strtod_l+0x8ca>
 800b628:	ea53 030a 	orrs.w	r3, r3, sl
 800b62c:	d088      	beq.n	800b540 <_strtod_l+0x810>
 800b62e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b630:	b1db      	cbz	r3, 800b66a <_strtod_l+0x93a>
 800b632:	423b      	tst	r3, r7
 800b634:	d0ef      	beq.n	800b616 <_strtod_l+0x8e6>
 800b636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b638:	9a04      	ldr	r2, [sp, #16]
 800b63a:	4650      	mov	r0, sl
 800b63c:	4659      	mov	r1, fp
 800b63e:	b1c3      	cbz	r3, 800b672 <_strtod_l+0x942>
 800b640:	f7ff fb5a 	bl	800acf8 <sulp>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b64c:	f7f4 fe2e 	bl	80002ac <__adddf3>
 800b650:	4682      	mov	sl, r0
 800b652:	468b      	mov	fp, r1
 800b654:	e7df      	b.n	800b616 <_strtod_l+0x8e6>
 800b656:	4013      	ands	r3, r2
 800b658:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b65c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b660:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b664:	f04f 3aff 	mov.w	sl, #4294967295
 800b668:	e7d5      	b.n	800b616 <_strtod_l+0x8e6>
 800b66a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b66c:	ea13 0f0a 	tst.w	r3, sl
 800b670:	e7e0      	b.n	800b634 <_strtod_l+0x904>
 800b672:	f7ff fb41 	bl	800acf8 <sulp>
 800b676:	4602      	mov	r2, r0
 800b678:	460b      	mov	r3, r1
 800b67a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b67e:	f7f4 fe13 	bl	80002a8 <__aeabi_dsub>
 800b682:	2200      	movs	r2, #0
 800b684:	2300      	movs	r3, #0
 800b686:	4682      	mov	sl, r0
 800b688:	468b      	mov	fp, r1
 800b68a:	f7f5 fa2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b68e:	2800      	cmp	r0, #0
 800b690:	d0c1      	beq.n	800b616 <_strtod_l+0x8e6>
 800b692:	e60e      	b.n	800b2b2 <_strtod_l+0x582>
 800b694:	fffffc02 	.word	0xfffffc02
 800b698:	7ff00000 	.word	0x7ff00000
 800b69c:	39500000 	.word	0x39500000
 800b6a0:	000fffff 	.word	0x000fffff
 800b6a4:	7fefffff 	.word	0x7fefffff
 800b6a8:	0800fcc8 	.word	0x0800fcc8
 800b6ac:	4631      	mov	r1, r6
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f001 fa3c 	bl	800cb2c <__ratio>
 800b6b4:	ec59 8b10 	vmov	r8, r9, d0
 800b6b8:	ee10 0a10 	vmov	r0, s0
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6c2:	4649      	mov	r1, r9
 800b6c4:	f7f5 fa24 	bl	8000b10 <__aeabi_dcmple>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d07c      	beq.n	800b7c6 <_strtod_l+0xa96>
 800b6cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d04c      	beq.n	800b76c <_strtod_l+0xa3c>
 800b6d2:	4b95      	ldr	r3, [pc, #596]	; (800b928 <_strtod_l+0xbf8>)
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b6da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b928 <_strtod_l+0xbf8>
 800b6de:	f04f 0800 	mov.w	r8, #0
 800b6e2:	4b92      	ldr	r3, [pc, #584]	; (800b92c <_strtod_l+0xbfc>)
 800b6e4:	403b      	ands	r3, r7
 800b6e6:	9311      	str	r3, [sp, #68]	; 0x44
 800b6e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b6ea:	4b91      	ldr	r3, [pc, #580]	; (800b930 <_strtod_l+0xc00>)
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	f040 80b2 	bne.w	800b856 <_strtod_l+0xb26>
 800b6f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b6f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b6fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b6fe:	ec4b ab10 	vmov	d0, sl, fp
 800b702:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b706:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b70a:	f001 f937 	bl	800c97c <__ulp>
 800b70e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b712:	ec53 2b10 	vmov	r2, r3, d0
 800b716:	f7f4 ff7f 	bl	8000618 <__aeabi_dmul>
 800b71a:	4652      	mov	r2, sl
 800b71c:	465b      	mov	r3, fp
 800b71e:	f7f4 fdc5 	bl	80002ac <__adddf3>
 800b722:	460b      	mov	r3, r1
 800b724:	4981      	ldr	r1, [pc, #516]	; (800b92c <_strtod_l+0xbfc>)
 800b726:	4a83      	ldr	r2, [pc, #524]	; (800b934 <_strtod_l+0xc04>)
 800b728:	4019      	ands	r1, r3
 800b72a:	4291      	cmp	r1, r2
 800b72c:	4682      	mov	sl, r0
 800b72e:	d95e      	bls.n	800b7ee <_strtod_l+0xabe>
 800b730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b732:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b736:	4293      	cmp	r3, r2
 800b738:	d103      	bne.n	800b742 <_strtod_l+0xa12>
 800b73a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b73c:	3301      	adds	r3, #1
 800b73e:	f43f ad43 	beq.w	800b1c8 <_strtod_l+0x498>
 800b742:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b940 <_strtod_l+0xc10>
 800b746:	f04f 3aff 	mov.w	sl, #4294967295
 800b74a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b74c:	4620      	mov	r0, r4
 800b74e:	f000 fde9 	bl	800c324 <_Bfree>
 800b752:	9907      	ldr	r1, [sp, #28]
 800b754:	4620      	mov	r0, r4
 800b756:	f000 fde5 	bl	800c324 <_Bfree>
 800b75a:	4631      	mov	r1, r6
 800b75c:	4620      	mov	r0, r4
 800b75e:	f000 fde1 	bl	800c324 <_Bfree>
 800b762:	4629      	mov	r1, r5
 800b764:	4620      	mov	r0, r4
 800b766:	f000 fddd 	bl	800c324 <_Bfree>
 800b76a:	e613      	b.n	800b394 <_strtod_l+0x664>
 800b76c:	f1ba 0f00 	cmp.w	sl, #0
 800b770:	d11b      	bne.n	800b7aa <_strtod_l+0xa7a>
 800b772:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b776:	b9f3      	cbnz	r3, 800b7b6 <_strtod_l+0xa86>
 800b778:	4b6b      	ldr	r3, [pc, #428]	; (800b928 <_strtod_l+0xbf8>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	4640      	mov	r0, r8
 800b77e:	4649      	mov	r1, r9
 800b780:	f7f5 f9bc 	bl	8000afc <__aeabi_dcmplt>
 800b784:	b9d0      	cbnz	r0, 800b7bc <_strtod_l+0xa8c>
 800b786:	4640      	mov	r0, r8
 800b788:	4649      	mov	r1, r9
 800b78a:	4b6b      	ldr	r3, [pc, #428]	; (800b938 <_strtod_l+0xc08>)
 800b78c:	2200      	movs	r2, #0
 800b78e:	f7f4 ff43 	bl	8000618 <__aeabi_dmul>
 800b792:	4680      	mov	r8, r0
 800b794:	4689      	mov	r9, r1
 800b796:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b79a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b79e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b7a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b7a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b7a8:	e79b      	b.n	800b6e2 <_strtod_l+0x9b2>
 800b7aa:	f1ba 0f01 	cmp.w	sl, #1
 800b7ae:	d102      	bne.n	800b7b6 <_strtod_l+0xa86>
 800b7b0:	2f00      	cmp	r7, #0
 800b7b2:	f43f ad7e 	beq.w	800b2b2 <_strtod_l+0x582>
 800b7b6:	4b61      	ldr	r3, [pc, #388]	; (800b93c <_strtod_l+0xc0c>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	e78c      	b.n	800b6d6 <_strtod_l+0x9a6>
 800b7bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b938 <_strtod_l+0xc08>
 800b7c0:	f04f 0800 	mov.w	r8, #0
 800b7c4:	e7e7      	b.n	800b796 <_strtod_l+0xa66>
 800b7c6:	4b5c      	ldr	r3, [pc, #368]	; (800b938 <_strtod_l+0xc08>)
 800b7c8:	4640      	mov	r0, r8
 800b7ca:	4649      	mov	r1, r9
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f7f4 ff23 	bl	8000618 <__aeabi_dmul>
 800b7d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7d4:	4680      	mov	r8, r0
 800b7d6:	4689      	mov	r9, r1
 800b7d8:	b933      	cbnz	r3, 800b7e8 <_strtod_l+0xab8>
 800b7da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7de:	9012      	str	r0, [sp, #72]	; 0x48
 800b7e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b7e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b7e6:	e7dd      	b.n	800b7a4 <_strtod_l+0xa74>
 800b7e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b7ec:	e7f9      	b.n	800b7e2 <_strtod_l+0xab2>
 800b7ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b7f2:	9b04      	ldr	r3, [sp, #16]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d1a8      	bne.n	800b74a <_strtod_l+0xa1a>
 800b7f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b7fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b7fe:	0d1b      	lsrs	r3, r3, #20
 800b800:	051b      	lsls	r3, r3, #20
 800b802:	429a      	cmp	r2, r3
 800b804:	d1a1      	bne.n	800b74a <_strtod_l+0xa1a>
 800b806:	4640      	mov	r0, r8
 800b808:	4649      	mov	r1, r9
 800b80a:	f7f5 fa3d 	bl	8000c88 <__aeabi_d2lz>
 800b80e:	f7f4 fed5 	bl	80005bc <__aeabi_l2d>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	4640      	mov	r0, r8
 800b818:	4649      	mov	r1, r9
 800b81a:	f7f4 fd45 	bl	80002a8 <__aeabi_dsub>
 800b81e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b820:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b824:	ea43 030a 	orr.w	r3, r3, sl
 800b828:	4313      	orrs	r3, r2
 800b82a:	4680      	mov	r8, r0
 800b82c:	4689      	mov	r9, r1
 800b82e:	d053      	beq.n	800b8d8 <_strtod_l+0xba8>
 800b830:	a335      	add	r3, pc, #212	; (adr r3, 800b908 <_strtod_l+0xbd8>)
 800b832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b836:	f7f5 f961 	bl	8000afc <__aeabi_dcmplt>
 800b83a:	2800      	cmp	r0, #0
 800b83c:	f47f acce 	bne.w	800b1dc <_strtod_l+0x4ac>
 800b840:	a333      	add	r3, pc, #204	; (adr r3, 800b910 <_strtod_l+0xbe0>)
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	4640      	mov	r0, r8
 800b848:	4649      	mov	r1, r9
 800b84a:	f7f5 f975 	bl	8000b38 <__aeabi_dcmpgt>
 800b84e:	2800      	cmp	r0, #0
 800b850:	f43f af7b 	beq.w	800b74a <_strtod_l+0xa1a>
 800b854:	e4c2      	b.n	800b1dc <_strtod_l+0x4ac>
 800b856:	9b04      	ldr	r3, [sp, #16]
 800b858:	b333      	cbz	r3, 800b8a8 <_strtod_l+0xb78>
 800b85a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b85c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b860:	d822      	bhi.n	800b8a8 <_strtod_l+0xb78>
 800b862:	a32d      	add	r3, pc, #180	; (adr r3, 800b918 <_strtod_l+0xbe8>)
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	4640      	mov	r0, r8
 800b86a:	4649      	mov	r1, r9
 800b86c:	f7f5 f950 	bl	8000b10 <__aeabi_dcmple>
 800b870:	b1a0      	cbz	r0, 800b89c <_strtod_l+0xb6c>
 800b872:	4649      	mov	r1, r9
 800b874:	4640      	mov	r0, r8
 800b876:	f7f5 f97f 	bl	8000b78 <__aeabi_d2uiz>
 800b87a:	2801      	cmp	r0, #1
 800b87c:	bf38      	it	cc
 800b87e:	2001      	movcc	r0, #1
 800b880:	f7f4 fe50 	bl	8000524 <__aeabi_ui2d>
 800b884:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b886:	4680      	mov	r8, r0
 800b888:	4689      	mov	r9, r1
 800b88a:	bb13      	cbnz	r3, 800b8d2 <_strtod_l+0xba2>
 800b88c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b890:	9014      	str	r0, [sp, #80]	; 0x50
 800b892:	9315      	str	r3, [sp, #84]	; 0x54
 800b894:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b898:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b89c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b89e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b8a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b8a4:	1a9b      	subs	r3, r3, r2
 800b8a6:	930d      	str	r3, [sp, #52]	; 0x34
 800b8a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b8ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b8b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b8b4:	f001 f862 	bl	800c97c <__ulp>
 800b8b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b8bc:	ec53 2b10 	vmov	r2, r3, d0
 800b8c0:	f7f4 feaa 	bl	8000618 <__aeabi_dmul>
 800b8c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b8c8:	f7f4 fcf0 	bl	80002ac <__adddf3>
 800b8cc:	4682      	mov	sl, r0
 800b8ce:	468b      	mov	fp, r1
 800b8d0:	e78f      	b.n	800b7f2 <_strtod_l+0xac2>
 800b8d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b8d6:	e7dd      	b.n	800b894 <_strtod_l+0xb64>
 800b8d8:	a311      	add	r3, pc, #68	; (adr r3, 800b920 <_strtod_l+0xbf0>)
 800b8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8de:	f7f5 f90d 	bl	8000afc <__aeabi_dcmplt>
 800b8e2:	e7b4      	b.n	800b84e <_strtod_l+0xb1e>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	930e      	str	r3, [sp, #56]	; 0x38
 800b8e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b8ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	f7ff ba65 	b.w	800adbc <_strtod_l+0x8c>
 800b8f2:	2b65      	cmp	r3, #101	; 0x65
 800b8f4:	f43f ab5d 	beq.w	800afb2 <_strtod_l+0x282>
 800b8f8:	2b45      	cmp	r3, #69	; 0x45
 800b8fa:	f43f ab5a 	beq.w	800afb2 <_strtod_l+0x282>
 800b8fe:	2201      	movs	r2, #1
 800b900:	f7ff bb92 	b.w	800b028 <_strtod_l+0x2f8>
 800b904:	f3af 8000 	nop.w
 800b908:	94a03595 	.word	0x94a03595
 800b90c:	3fdfffff 	.word	0x3fdfffff
 800b910:	35afe535 	.word	0x35afe535
 800b914:	3fe00000 	.word	0x3fe00000
 800b918:	ffc00000 	.word	0xffc00000
 800b91c:	41dfffff 	.word	0x41dfffff
 800b920:	94a03595 	.word	0x94a03595
 800b924:	3fcfffff 	.word	0x3fcfffff
 800b928:	3ff00000 	.word	0x3ff00000
 800b92c:	7ff00000 	.word	0x7ff00000
 800b930:	7fe00000 	.word	0x7fe00000
 800b934:	7c9fffff 	.word	0x7c9fffff
 800b938:	3fe00000 	.word	0x3fe00000
 800b93c:	bff00000 	.word	0xbff00000
 800b940:	7fefffff 	.word	0x7fefffff

0800b944 <strtod>:
 800b944:	460a      	mov	r2, r1
 800b946:	4601      	mov	r1, r0
 800b948:	4802      	ldr	r0, [pc, #8]	; (800b954 <strtod+0x10>)
 800b94a:	4b03      	ldr	r3, [pc, #12]	; (800b958 <strtod+0x14>)
 800b94c:	6800      	ldr	r0, [r0, #0]
 800b94e:	f7ff b9ef 	b.w	800ad30 <_strtod_l>
 800b952:	bf00      	nop
 800b954:	2000006c 	.word	0x2000006c
 800b958:	200000d4 	.word	0x200000d4

0800b95c <strtok>:
 800b95c:	4b16      	ldr	r3, [pc, #88]	; (800b9b8 <strtok+0x5c>)
 800b95e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b960:	681e      	ldr	r6, [r3, #0]
 800b962:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b964:	4605      	mov	r5, r0
 800b966:	b9fc      	cbnz	r4, 800b9a8 <strtok+0x4c>
 800b968:	2050      	movs	r0, #80	; 0x50
 800b96a:	9101      	str	r1, [sp, #4]
 800b96c:	f000 fc80 	bl	800c270 <malloc>
 800b970:	9901      	ldr	r1, [sp, #4]
 800b972:	65b0      	str	r0, [r6, #88]	; 0x58
 800b974:	4602      	mov	r2, r0
 800b976:	b920      	cbnz	r0, 800b982 <strtok+0x26>
 800b978:	4b10      	ldr	r3, [pc, #64]	; (800b9bc <strtok+0x60>)
 800b97a:	4811      	ldr	r0, [pc, #68]	; (800b9c0 <strtok+0x64>)
 800b97c:	2157      	movs	r1, #87	; 0x57
 800b97e:	f000 f8d7 	bl	800bb30 <__assert_func>
 800b982:	e9c0 4400 	strd	r4, r4, [r0]
 800b986:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b98a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b98e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b992:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b996:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b99a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b99e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b9a2:	6184      	str	r4, [r0, #24]
 800b9a4:	7704      	strb	r4, [r0, #28]
 800b9a6:	6244      	str	r4, [r0, #36]	; 0x24
 800b9a8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	b002      	add	sp, #8
 800b9b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b9b4:	f000 b806 	b.w	800b9c4 <__strtok_r>
 800b9b8:	2000006c 	.word	0x2000006c
 800b9bc:	0800fcf0 	.word	0x0800fcf0
 800b9c0:	0800fd07 	.word	0x0800fd07

0800b9c4 <__strtok_r>:
 800b9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9c6:	b908      	cbnz	r0, 800b9cc <__strtok_r+0x8>
 800b9c8:	6810      	ldr	r0, [r2, #0]
 800b9ca:	b188      	cbz	r0, 800b9f0 <__strtok_r+0x2c>
 800b9cc:	4604      	mov	r4, r0
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b9d4:	460f      	mov	r7, r1
 800b9d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b9da:	b91e      	cbnz	r6, 800b9e4 <__strtok_r+0x20>
 800b9dc:	b965      	cbnz	r5, 800b9f8 <__strtok_r+0x34>
 800b9de:	6015      	str	r5, [r2, #0]
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	e005      	b.n	800b9f0 <__strtok_r+0x2c>
 800b9e4:	42b5      	cmp	r5, r6
 800b9e6:	d1f6      	bne.n	800b9d6 <__strtok_r+0x12>
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d1f0      	bne.n	800b9ce <__strtok_r+0xa>
 800b9ec:	6014      	str	r4, [r2, #0]
 800b9ee:	7003      	strb	r3, [r0, #0]
 800b9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9f2:	461c      	mov	r4, r3
 800b9f4:	e00c      	b.n	800ba10 <__strtok_r+0x4c>
 800b9f6:	b915      	cbnz	r5, 800b9fe <__strtok_r+0x3a>
 800b9f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b9fc:	460e      	mov	r6, r1
 800b9fe:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ba02:	42ab      	cmp	r3, r5
 800ba04:	d1f7      	bne.n	800b9f6 <__strtok_r+0x32>
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d0f3      	beq.n	800b9f2 <__strtok_r+0x2e>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ba10:	6014      	str	r4, [r2, #0]
 800ba12:	e7ed      	b.n	800b9f0 <__strtok_r+0x2c>

0800ba14 <_strtol_l.isra.0>:
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba1a:	d001      	beq.n	800ba20 <_strtol_l.isra.0+0xc>
 800ba1c:	2b24      	cmp	r3, #36	; 0x24
 800ba1e:	d906      	bls.n	800ba2e <_strtol_l.isra.0+0x1a>
 800ba20:	f7ff f8c8 	bl	800abb4 <__errno>
 800ba24:	2316      	movs	r3, #22
 800ba26:	6003      	str	r3, [r0, #0]
 800ba28:	2000      	movs	r0, #0
 800ba2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba2e:	4f3a      	ldr	r7, [pc, #232]	; (800bb18 <_strtol_l.isra.0+0x104>)
 800ba30:	468e      	mov	lr, r1
 800ba32:	4676      	mov	r6, lr
 800ba34:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ba38:	5de5      	ldrb	r5, [r4, r7]
 800ba3a:	f015 0508 	ands.w	r5, r5, #8
 800ba3e:	d1f8      	bne.n	800ba32 <_strtol_l.isra.0+0x1e>
 800ba40:	2c2d      	cmp	r4, #45	; 0x2d
 800ba42:	d134      	bne.n	800baae <_strtol_l.isra.0+0x9a>
 800ba44:	f89e 4000 	ldrb.w	r4, [lr]
 800ba48:	f04f 0801 	mov.w	r8, #1
 800ba4c:	f106 0e02 	add.w	lr, r6, #2
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d05c      	beq.n	800bb0e <_strtol_l.isra.0+0xfa>
 800ba54:	2b10      	cmp	r3, #16
 800ba56:	d10c      	bne.n	800ba72 <_strtol_l.isra.0+0x5e>
 800ba58:	2c30      	cmp	r4, #48	; 0x30
 800ba5a:	d10a      	bne.n	800ba72 <_strtol_l.isra.0+0x5e>
 800ba5c:	f89e 4000 	ldrb.w	r4, [lr]
 800ba60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ba64:	2c58      	cmp	r4, #88	; 0x58
 800ba66:	d14d      	bne.n	800bb04 <_strtol_l.isra.0+0xf0>
 800ba68:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ba6c:	2310      	movs	r3, #16
 800ba6e:	f10e 0e02 	add.w	lr, lr, #2
 800ba72:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ba76:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ba7a:	2600      	movs	r6, #0
 800ba7c:	fbbc f9f3 	udiv	r9, ip, r3
 800ba80:	4635      	mov	r5, r6
 800ba82:	fb03 ca19 	mls	sl, r3, r9, ip
 800ba86:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ba8a:	2f09      	cmp	r7, #9
 800ba8c:	d818      	bhi.n	800bac0 <_strtol_l.isra.0+0xac>
 800ba8e:	463c      	mov	r4, r7
 800ba90:	42a3      	cmp	r3, r4
 800ba92:	dd24      	ble.n	800bade <_strtol_l.isra.0+0xca>
 800ba94:	2e00      	cmp	r6, #0
 800ba96:	db1f      	blt.n	800bad8 <_strtol_l.isra.0+0xc4>
 800ba98:	45a9      	cmp	r9, r5
 800ba9a:	d31d      	bcc.n	800bad8 <_strtol_l.isra.0+0xc4>
 800ba9c:	d101      	bne.n	800baa2 <_strtol_l.isra.0+0x8e>
 800ba9e:	45a2      	cmp	sl, r4
 800baa0:	db1a      	blt.n	800bad8 <_strtol_l.isra.0+0xc4>
 800baa2:	fb05 4503 	mla	r5, r5, r3, r4
 800baa6:	2601      	movs	r6, #1
 800baa8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800baac:	e7eb      	b.n	800ba86 <_strtol_l.isra.0+0x72>
 800baae:	2c2b      	cmp	r4, #43	; 0x2b
 800bab0:	bf08      	it	eq
 800bab2:	f89e 4000 	ldrbeq.w	r4, [lr]
 800bab6:	46a8      	mov	r8, r5
 800bab8:	bf08      	it	eq
 800baba:	f106 0e02 	addeq.w	lr, r6, #2
 800babe:	e7c7      	b.n	800ba50 <_strtol_l.isra.0+0x3c>
 800bac0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800bac4:	2f19      	cmp	r7, #25
 800bac6:	d801      	bhi.n	800bacc <_strtol_l.isra.0+0xb8>
 800bac8:	3c37      	subs	r4, #55	; 0x37
 800baca:	e7e1      	b.n	800ba90 <_strtol_l.isra.0+0x7c>
 800bacc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800bad0:	2f19      	cmp	r7, #25
 800bad2:	d804      	bhi.n	800bade <_strtol_l.isra.0+0xca>
 800bad4:	3c57      	subs	r4, #87	; 0x57
 800bad6:	e7db      	b.n	800ba90 <_strtol_l.isra.0+0x7c>
 800bad8:	f04f 36ff 	mov.w	r6, #4294967295
 800badc:	e7e4      	b.n	800baa8 <_strtol_l.isra.0+0x94>
 800bade:	2e00      	cmp	r6, #0
 800bae0:	da05      	bge.n	800baee <_strtol_l.isra.0+0xda>
 800bae2:	2322      	movs	r3, #34	; 0x22
 800bae4:	6003      	str	r3, [r0, #0]
 800bae6:	4665      	mov	r5, ip
 800bae8:	b942      	cbnz	r2, 800bafc <_strtol_l.isra.0+0xe8>
 800baea:	4628      	mov	r0, r5
 800baec:	e79d      	b.n	800ba2a <_strtol_l.isra.0+0x16>
 800baee:	f1b8 0f00 	cmp.w	r8, #0
 800baf2:	d000      	beq.n	800baf6 <_strtol_l.isra.0+0xe2>
 800baf4:	426d      	negs	r5, r5
 800baf6:	2a00      	cmp	r2, #0
 800baf8:	d0f7      	beq.n	800baea <_strtol_l.isra.0+0xd6>
 800bafa:	b10e      	cbz	r6, 800bb00 <_strtol_l.isra.0+0xec>
 800bafc:	f10e 31ff 	add.w	r1, lr, #4294967295
 800bb00:	6011      	str	r1, [r2, #0]
 800bb02:	e7f2      	b.n	800baea <_strtol_l.isra.0+0xd6>
 800bb04:	2430      	movs	r4, #48	; 0x30
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1b3      	bne.n	800ba72 <_strtol_l.isra.0+0x5e>
 800bb0a:	2308      	movs	r3, #8
 800bb0c:	e7b1      	b.n	800ba72 <_strtol_l.isra.0+0x5e>
 800bb0e:	2c30      	cmp	r4, #48	; 0x30
 800bb10:	d0a4      	beq.n	800ba5c <_strtol_l.isra.0+0x48>
 800bb12:	230a      	movs	r3, #10
 800bb14:	e7ad      	b.n	800ba72 <_strtol_l.isra.0+0x5e>
 800bb16:	bf00      	nop
 800bb18:	0800fda5 	.word	0x0800fda5

0800bb1c <strtol>:
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	460a      	mov	r2, r1
 800bb20:	4601      	mov	r1, r0
 800bb22:	4802      	ldr	r0, [pc, #8]	; (800bb2c <strtol+0x10>)
 800bb24:	6800      	ldr	r0, [r0, #0]
 800bb26:	f7ff bf75 	b.w	800ba14 <_strtol_l.isra.0>
 800bb2a:	bf00      	nop
 800bb2c:	2000006c 	.word	0x2000006c

0800bb30 <__assert_func>:
 800bb30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb32:	4614      	mov	r4, r2
 800bb34:	461a      	mov	r2, r3
 800bb36:	4b09      	ldr	r3, [pc, #36]	; (800bb5c <__assert_func+0x2c>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	68d8      	ldr	r0, [r3, #12]
 800bb3e:	b14c      	cbz	r4, 800bb54 <__assert_func+0x24>
 800bb40:	4b07      	ldr	r3, [pc, #28]	; (800bb60 <__assert_func+0x30>)
 800bb42:	9100      	str	r1, [sp, #0]
 800bb44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb48:	4906      	ldr	r1, [pc, #24]	; (800bb64 <__assert_func+0x34>)
 800bb4a:	462b      	mov	r3, r5
 800bb4c:	f000 f80e 	bl	800bb6c <fiprintf>
 800bb50:	f001 fe5e 	bl	800d810 <abort>
 800bb54:	4b04      	ldr	r3, [pc, #16]	; (800bb68 <__assert_func+0x38>)
 800bb56:	461c      	mov	r4, r3
 800bb58:	e7f3      	b.n	800bb42 <__assert_func+0x12>
 800bb5a:	bf00      	nop
 800bb5c:	2000006c 	.word	0x2000006c
 800bb60:	0800fd68 	.word	0x0800fd68
 800bb64:	0800fd75 	.word	0x0800fd75
 800bb68:	0800fda3 	.word	0x0800fda3

0800bb6c <fiprintf>:
 800bb6c:	b40e      	push	{r1, r2, r3}
 800bb6e:	b503      	push	{r0, r1, lr}
 800bb70:	4601      	mov	r1, r0
 800bb72:	ab03      	add	r3, sp, #12
 800bb74:	4805      	ldr	r0, [pc, #20]	; (800bb8c <fiprintf+0x20>)
 800bb76:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb7a:	6800      	ldr	r0, [r0, #0]
 800bb7c:	9301      	str	r3, [sp, #4]
 800bb7e:	f001 fa8b 	bl	800d098 <_vfiprintf_r>
 800bb82:	b002      	add	sp, #8
 800bb84:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb88:	b003      	add	sp, #12
 800bb8a:	4770      	bx	lr
 800bb8c:	2000006c 	.word	0x2000006c

0800bb90 <rshift>:
 800bb90:	6903      	ldr	r3, [r0, #16]
 800bb92:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bb96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb9a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bb9e:	f100 0414 	add.w	r4, r0, #20
 800bba2:	dd45      	ble.n	800bc30 <rshift+0xa0>
 800bba4:	f011 011f 	ands.w	r1, r1, #31
 800bba8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bbac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bbb0:	d10c      	bne.n	800bbcc <rshift+0x3c>
 800bbb2:	f100 0710 	add.w	r7, r0, #16
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	42b1      	cmp	r1, r6
 800bbba:	d334      	bcc.n	800bc26 <rshift+0x96>
 800bbbc:	1a9b      	subs	r3, r3, r2
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	1eea      	subs	r2, r5, #3
 800bbc2:	4296      	cmp	r6, r2
 800bbc4:	bf38      	it	cc
 800bbc6:	2300      	movcc	r3, #0
 800bbc8:	4423      	add	r3, r4
 800bbca:	e015      	b.n	800bbf8 <rshift+0x68>
 800bbcc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bbd0:	f1c1 0820 	rsb	r8, r1, #32
 800bbd4:	40cf      	lsrs	r7, r1
 800bbd6:	f105 0e04 	add.w	lr, r5, #4
 800bbda:	46a1      	mov	r9, r4
 800bbdc:	4576      	cmp	r6, lr
 800bbde:	46f4      	mov	ip, lr
 800bbe0:	d815      	bhi.n	800bc0e <rshift+0x7e>
 800bbe2:	1a9b      	subs	r3, r3, r2
 800bbe4:	009a      	lsls	r2, r3, #2
 800bbe6:	3a04      	subs	r2, #4
 800bbe8:	3501      	adds	r5, #1
 800bbea:	42ae      	cmp	r6, r5
 800bbec:	bf38      	it	cc
 800bbee:	2200      	movcc	r2, #0
 800bbf0:	18a3      	adds	r3, r4, r2
 800bbf2:	50a7      	str	r7, [r4, r2]
 800bbf4:	b107      	cbz	r7, 800bbf8 <rshift+0x68>
 800bbf6:	3304      	adds	r3, #4
 800bbf8:	1b1a      	subs	r2, r3, r4
 800bbfa:	42a3      	cmp	r3, r4
 800bbfc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bc00:	bf08      	it	eq
 800bc02:	2300      	moveq	r3, #0
 800bc04:	6102      	str	r2, [r0, #16]
 800bc06:	bf08      	it	eq
 800bc08:	6143      	streq	r3, [r0, #20]
 800bc0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc0e:	f8dc c000 	ldr.w	ip, [ip]
 800bc12:	fa0c fc08 	lsl.w	ip, ip, r8
 800bc16:	ea4c 0707 	orr.w	r7, ip, r7
 800bc1a:	f849 7b04 	str.w	r7, [r9], #4
 800bc1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc22:	40cf      	lsrs	r7, r1
 800bc24:	e7da      	b.n	800bbdc <rshift+0x4c>
 800bc26:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc2a:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc2e:	e7c3      	b.n	800bbb8 <rshift+0x28>
 800bc30:	4623      	mov	r3, r4
 800bc32:	e7e1      	b.n	800bbf8 <rshift+0x68>

0800bc34 <__hexdig_fun>:
 800bc34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bc38:	2b09      	cmp	r3, #9
 800bc3a:	d802      	bhi.n	800bc42 <__hexdig_fun+0xe>
 800bc3c:	3820      	subs	r0, #32
 800bc3e:	b2c0      	uxtb	r0, r0
 800bc40:	4770      	bx	lr
 800bc42:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bc46:	2b05      	cmp	r3, #5
 800bc48:	d801      	bhi.n	800bc4e <__hexdig_fun+0x1a>
 800bc4a:	3847      	subs	r0, #71	; 0x47
 800bc4c:	e7f7      	b.n	800bc3e <__hexdig_fun+0xa>
 800bc4e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bc52:	2b05      	cmp	r3, #5
 800bc54:	d801      	bhi.n	800bc5a <__hexdig_fun+0x26>
 800bc56:	3827      	subs	r0, #39	; 0x27
 800bc58:	e7f1      	b.n	800bc3e <__hexdig_fun+0xa>
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	4770      	bx	lr
	...

0800bc60 <__gethex>:
 800bc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc64:	ed2d 8b02 	vpush	{d8}
 800bc68:	b089      	sub	sp, #36	; 0x24
 800bc6a:	ee08 0a10 	vmov	s16, r0
 800bc6e:	9304      	str	r3, [sp, #16]
 800bc70:	4bbc      	ldr	r3, [pc, #752]	; (800bf64 <__gethex+0x304>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	9301      	str	r3, [sp, #4]
 800bc76:	4618      	mov	r0, r3
 800bc78:	468b      	mov	fp, r1
 800bc7a:	4690      	mov	r8, r2
 800bc7c:	f7f4 fab2 	bl	80001e4 <strlen>
 800bc80:	9b01      	ldr	r3, [sp, #4]
 800bc82:	f8db 2000 	ldr.w	r2, [fp]
 800bc86:	4403      	add	r3, r0
 800bc88:	4682      	mov	sl, r0
 800bc8a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bc8e:	9305      	str	r3, [sp, #20]
 800bc90:	1c93      	adds	r3, r2, #2
 800bc92:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bc96:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bc9a:	32fe      	adds	r2, #254	; 0xfe
 800bc9c:	18d1      	adds	r1, r2, r3
 800bc9e:	461f      	mov	r7, r3
 800bca0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bca4:	9100      	str	r1, [sp, #0]
 800bca6:	2830      	cmp	r0, #48	; 0x30
 800bca8:	d0f8      	beq.n	800bc9c <__gethex+0x3c>
 800bcaa:	f7ff ffc3 	bl	800bc34 <__hexdig_fun>
 800bcae:	4604      	mov	r4, r0
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	d13a      	bne.n	800bd2a <__gethex+0xca>
 800bcb4:	9901      	ldr	r1, [sp, #4]
 800bcb6:	4652      	mov	r2, sl
 800bcb8:	4638      	mov	r0, r7
 800bcba:	f001 fcc9 	bl	800d650 <strncmp>
 800bcbe:	4605      	mov	r5, r0
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	d168      	bne.n	800bd96 <__gethex+0x136>
 800bcc4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bcc8:	eb07 060a 	add.w	r6, r7, sl
 800bccc:	f7ff ffb2 	bl	800bc34 <__hexdig_fun>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d062      	beq.n	800bd9a <__gethex+0x13a>
 800bcd4:	4633      	mov	r3, r6
 800bcd6:	7818      	ldrb	r0, [r3, #0]
 800bcd8:	2830      	cmp	r0, #48	; 0x30
 800bcda:	461f      	mov	r7, r3
 800bcdc:	f103 0301 	add.w	r3, r3, #1
 800bce0:	d0f9      	beq.n	800bcd6 <__gethex+0x76>
 800bce2:	f7ff ffa7 	bl	800bc34 <__hexdig_fun>
 800bce6:	2301      	movs	r3, #1
 800bce8:	fab0 f480 	clz	r4, r0
 800bcec:	0964      	lsrs	r4, r4, #5
 800bcee:	4635      	mov	r5, r6
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	463a      	mov	r2, r7
 800bcf4:	4616      	mov	r6, r2
 800bcf6:	3201      	adds	r2, #1
 800bcf8:	7830      	ldrb	r0, [r6, #0]
 800bcfa:	f7ff ff9b 	bl	800bc34 <__hexdig_fun>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d1f8      	bne.n	800bcf4 <__gethex+0x94>
 800bd02:	9901      	ldr	r1, [sp, #4]
 800bd04:	4652      	mov	r2, sl
 800bd06:	4630      	mov	r0, r6
 800bd08:	f001 fca2 	bl	800d650 <strncmp>
 800bd0c:	b980      	cbnz	r0, 800bd30 <__gethex+0xd0>
 800bd0e:	b94d      	cbnz	r5, 800bd24 <__gethex+0xc4>
 800bd10:	eb06 050a 	add.w	r5, r6, sl
 800bd14:	462a      	mov	r2, r5
 800bd16:	4616      	mov	r6, r2
 800bd18:	3201      	adds	r2, #1
 800bd1a:	7830      	ldrb	r0, [r6, #0]
 800bd1c:	f7ff ff8a 	bl	800bc34 <__hexdig_fun>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d1f8      	bne.n	800bd16 <__gethex+0xb6>
 800bd24:	1bad      	subs	r5, r5, r6
 800bd26:	00ad      	lsls	r5, r5, #2
 800bd28:	e004      	b.n	800bd34 <__gethex+0xd4>
 800bd2a:	2400      	movs	r4, #0
 800bd2c:	4625      	mov	r5, r4
 800bd2e:	e7e0      	b.n	800bcf2 <__gethex+0x92>
 800bd30:	2d00      	cmp	r5, #0
 800bd32:	d1f7      	bne.n	800bd24 <__gethex+0xc4>
 800bd34:	7833      	ldrb	r3, [r6, #0]
 800bd36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bd3a:	2b50      	cmp	r3, #80	; 0x50
 800bd3c:	d13b      	bne.n	800bdb6 <__gethex+0x156>
 800bd3e:	7873      	ldrb	r3, [r6, #1]
 800bd40:	2b2b      	cmp	r3, #43	; 0x2b
 800bd42:	d02c      	beq.n	800bd9e <__gethex+0x13e>
 800bd44:	2b2d      	cmp	r3, #45	; 0x2d
 800bd46:	d02e      	beq.n	800bda6 <__gethex+0x146>
 800bd48:	1c71      	adds	r1, r6, #1
 800bd4a:	f04f 0900 	mov.w	r9, #0
 800bd4e:	7808      	ldrb	r0, [r1, #0]
 800bd50:	f7ff ff70 	bl	800bc34 <__hexdig_fun>
 800bd54:	1e43      	subs	r3, r0, #1
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	2b18      	cmp	r3, #24
 800bd5a:	d82c      	bhi.n	800bdb6 <__gethex+0x156>
 800bd5c:	f1a0 0210 	sub.w	r2, r0, #16
 800bd60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd64:	f7ff ff66 	bl	800bc34 <__hexdig_fun>
 800bd68:	1e43      	subs	r3, r0, #1
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	2b18      	cmp	r3, #24
 800bd6e:	d91d      	bls.n	800bdac <__gethex+0x14c>
 800bd70:	f1b9 0f00 	cmp.w	r9, #0
 800bd74:	d000      	beq.n	800bd78 <__gethex+0x118>
 800bd76:	4252      	negs	r2, r2
 800bd78:	4415      	add	r5, r2
 800bd7a:	f8cb 1000 	str.w	r1, [fp]
 800bd7e:	b1e4      	cbz	r4, 800bdba <__gethex+0x15a>
 800bd80:	9b00      	ldr	r3, [sp, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	bf14      	ite	ne
 800bd86:	2700      	movne	r7, #0
 800bd88:	2706      	moveq	r7, #6
 800bd8a:	4638      	mov	r0, r7
 800bd8c:	b009      	add	sp, #36	; 0x24
 800bd8e:	ecbd 8b02 	vpop	{d8}
 800bd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd96:	463e      	mov	r6, r7
 800bd98:	4625      	mov	r5, r4
 800bd9a:	2401      	movs	r4, #1
 800bd9c:	e7ca      	b.n	800bd34 <__gethex+0xd4>
 800bd9e:	f04f 0900 	mov.w	r9, #0
 800bda2:	1cb1      	adds	r1, r6, #2
 800bda4:	e7d3      	b.n	800bd4e <__gethex+0xee>
 800bda6:	f04f 0901 	mov.w	r9, #1
 800bdaa:	e7fa      	b.n	800bda2 <__gethex+0x142>
 800bdac:	230a      	movs	r3, #10
 800bdae:	fb03 0202 	mla	r2, r3, r2, r0
 800bdb2:	3a10      	subs	r2, #16
 800bdb4:	e7d4      	b.n	800bd60 <__gethex+0x100>
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	e7df      	b.n	800bd7a <__gethex+0x11a>
 800bdba:	1bf3      	subs	r3, r6, r7
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	4621      	mov	r1, r4
 800bdc0:	2b07      	cmp	r3, #7
 800bdc2:	dc0b      	bgt.n	800bddc <__gethex+0x17c>
 800bdc4:	ee18 0a10 	vmov	r0, s16
 800bdc8:	f000 fa6c 	bl	800c2a4 <_Balloc>
 800bdcc:	4604      	mov	r4, r0
 800bdce:	b940      	cbnz	r0, 800bde2 <__gethex+0x182>
 800bdd0:	4b65      	ldr	r3, [pc, #404]	; (800bf68 <__gethex+0x308>)
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	21de      	movs	r1, #222	; 0xde
 800bdd6:	4865      	ldr	r0, [pc, #404]	; (800bf6c <__gethex+0x30c>)
 800bdd8:	f7ff feaa 	bl	800bb30 <__assert_func>
 800bddc:	3101      	adds	r1, #1
 800bdde:	105b      	asrs	r3, r3, #1
 800bde0:	e7ee      	b.n	800bdc0 <__gethex+0x160>
 800bde2:	f100 0914 	add.w	r9, r0, #20
 800bde6:	f04f 0b00 	mov.w	fp, #0
 800bdea:	f1ca 0301 	rsb	r3, sl, #1
 800bdee:	f8cd 9008 	str.w	r9, [sp, #8]
 800bdf2:	f8cd b000 	str.w	fp, [sp]
 800bdf6:	9306      	str	r3, [sp, #24]
 800bdf8:	42b7      	cmp	r7, r6
 800bdfa:	d340      	bcc.n	800be7e <__gethex+0x21e>
 800bdfc:	9802      	ldr	r0, [sp, #8]
 800bdfe:	9b00      	ldr	r3, [sp, #0]
 800be00:	f840 3b04 	str.w	r3, [r0], #4
 800be04:	eba0 0009 	sub.w	r0, r0, r9
 800be08:	1080      	asrs	r0, r0, #2
 800be0a:	0146      	lsls	r6, r0, #5
 800be0c:	6120      	str	r0, [r4, #16]
 800be0e:	4618      	mov	r0, r3
 800be10:	f000 fb3e 	bl	800c490 <__hi0bits>
 800be14:	1a30      	subs	r0, r6, r0
 800be16:	f8d8 6000 	ldr.w	r6, [r8]
 800be1a:	42b0      	cmp	r0, r6
 800be1c:	dd63      	ble.n	800bee6 <__gethex+0x286>
 800be1e:	1b87      	subs	r7, r0, r6
 800be20:	4639      	mov	r1, r7
 800be22:	4620      	mov	r0, r4
 800be24:	f000 fed8 	bl	800cbd8 <__any_on>
 800be28:	4682      	mov	sl, r0
 800be2a:	b1a8      	cbz	r0, 800be58 <__gethex+0x1f8>
 800be2c:	1e7b      	subs	r3, r7, #1
 800be2e:	1159      	asrs	r1, r3, #5
 800be30:	f003 021f 	and.w	r2, r3, #31
 800be34:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800be38:	f04f 0a01 	mov.w	sl, #1
 800be3c:	fa0a f202 	lsl.w	r2, sl, r2
 800be40:	420a      	tst	r2, r1
 800be42:	d009      	beq.n	800be58 <__gethex+0x1f8>
 800be44:	4553      	cmp	r3, sl
 800be46:	dd05      	ble.n	800be54 <__gethex+0x1f4>
 800be48:	1eb9      	subs	r1, r7, #2
 800be4a:	4620      	mov	r0, r4
 800be4c:	f000 fec4 	bl	800cbd8 <__any_on>
 800be50:	2800      	cmp	r0, #0
 800be52:	d145      	bne.n	800bee0 <__gethex+0x280>
 800be54:	f04f 0a02 	mov.w	sl, #2
 800be58:	4639      	mov	r1, r7
 800be5a:	4620      	mov	r0, r4
 800be5c:	f7ff fe98 	bl	800bb90 <rshift>
 800be60:	443d      	add	r5, r7
 800be62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be66:	42ab      	cmp	r3, r5
 800be68:	da4c      	bge.n	800bf04 <__gethex+0x2a4>
 800be6a:	ee18 0a10 	vmov	r0, s16
 800be6e:	4621      	mov	r1, r4
 800be70:	f000 fa58 	bl	800c324 <_Bfree>
 800be74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be76:	2300      	movs	r3, #0
 800be78:	6013      	str	r3, [r2, #0]
 800be7a:	27a3      	movs	r7, #163	; 0xa3
 800be7c:	e785      	b.n	800bd8a <__gethex+0x12a>
 800be7e:	1e73      	subs	r3, r6, #1
 800be80:	9a05      	ldr	r2, [sp, #20]
 800be82:	9303      	str	r3, [sp, #12]
 800be84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be88:	4293      	cmp	r3, r2
 800be8a:	d019      	beq.n	800bec0 <__gethex+0x260>
 800be8c:	f1bb 0f20 	cmp.w	fp, #32
 800be90:	d107      	bne.n	800bea2 <__gethex+0x242>
 800be92:	9b02      	ldr	r3, [sp, #8]
 800be94:	9a00      	ldr	r2, [sp, #0]
 800be96:	f843 2b04 	str.w	r2, [r3], #4
 800be9a:	9302      	str	r3, [sp, #8]
 800be9c:	2300      	movs	r3, #0
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	469b      	mov	fp, r3
 800bea2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bea6:	f7ff fec5 	bl	800bc34 <__hexdig_fun>
 800beaa:	9b00      	ldr	r3, [sp, #0]
 800beac:	f000 000f 	and.w	r0, r0, #15
 800beb0:	fa00 f00b 	lsl.w	r0, r0, fp
 800beb4:	4303      	orrs	r3, r0
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	f10b 0b04 	add.w	fp, fp, #4
 800bebc:	9b03      	ldr	r3, [sp, #12]
 800bebe:	e00d      	b.n	800bedc <__gethex+0x27c>
 800bec0:	9b03      	ldr	r3, [sp, #12]
 800bec2:	9a06      	ldr	r2, [sp, #24]
 800bec4:	4413      	add	r3, r2
 800bec6:	42bb      	cmp	r3, r7
 800bec8:	d3e0      	bcc.n	800be8c <__gethex+0x22c>
 800beca:	4618      	mov	r0, r3
 800becc:	9901      	ldr	r1, [sp, #4]
 800bece:	9307      	str	r3, [sp, #28]
 800bed0:	4652      	mov	r2, sl
 800bed2:	f001 fbbd 	bl	800d650 <strncmp>
 800bed6:	9b07      	ldr	r3, [sp, #28]
 800bed8:	2800      	cmp	r0, #0
 800beda:	d1d7      	bne.n	800be8c <__gethex+0x22c>
 800bedc:	461e      	mov	r6, r3
 800bede:	e78b      	b.n	800bdf8 <__gethex+0x198>
 800bee0:	f04f 0a03 	mov.w	sl, #3
 800bee4:	e7b8      	b.n	800be58 <__gethex+0x1f8>
 800bee6:	da0a      	bge.n	800befe <__gethex+0x29e>
 800bee8:	1a37      	subs	r7, r6, r0
 800beea:	4621      	mov	r1, r4
 800beec:	ee18 0a10 	vmov	r0, s16
 800bef0:	463a      	mov	r2, r7
 800bef2:	f000 fc33 	bl	800c75c <__lshift>
 800bef6:	1bed      	subs	r5, r5, r7
 800bef8:	4604      	mov	r4, r0
 800befa:	f100 0914 	add.w	r9, r0, #20
 800befe:	f04f 0a00 	mov.w	sl, #0
 800bf02:	e7ae      	b.n	800be62 <__gethex+0x202>
 800bf04:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bf08:	42a8      	cmp	r0, r5
 800bf0a:	dd72      	ble.n	800bff2 <__gethex+0x392>
 800bf0c:	1b45      	subs	r5, r0, r5
 800bf0e:	42ae      	cmp	r6, r5
 800bf10:	dc36      	bgt.n	800bf80 <__gethex+0x320>
 800bf12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf16:	2b02      	cmp	r3, #2
 800bf18:	d02a      	beq.n	800bf70 <__gethex+0x310>
 800bf1a:	2b03      	cmp	r3, #3
 800bf1c:	d02c      	beq.n	800bf78 <__gethex+0x318>
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d115      	bne.n	800bf4e <__gethex+0x2ee>
 800bf22:	42ae      	cmp	r6, r5
 800bf24:	d113      	bne.n	800bf4e <__gethex+0x2ee>
 800bf26:	2e01      	cmp	r6, #1
 800bf28:	d10b      	bne.n	800bf42 <__gethex+0x2e2>
 800bf2a:	9a04      	ldr	r2, [sp, #16]
 800bf2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf30:	6013      	str	r3, [r2, #0]
 800bf32:	2301      	movs	r3, #1
 800bf34:	6123      	str	r3, [r4, #16]
 800bf36:	f8c9 3000 	str.w	r3, [r9]
 800bf3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf3c:	2762      	movs	r7, #98	; 0x62
 800bf3e:	601c      	str	r4, [r3, #0]
 800bf40:	e723      	b.n	800bd8a <__gethex+0x12a>
 800bf42:	1e71      	subs	r1, r6, #1
 800bf44:	4620      	mov	r0, r4
 800bf46:	f000 fe47 	bl	800cbd8 <__any_on>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d1ed      	bne.n	800bf2a <__gethex+0x2ca>
 800bf4e:	ee18 0a10 	vmov	r0, s16
 800bf52:	4621      	mov	r1, r4
 800bf54:	f000 f9e6 	bl	800c324 <_Bfree>
 800bf58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	6013      	str	r3, [r2, #0]
 800bf5e:	2750      	movs	r7, #80	; 0x50
 800bf60:	e713      	b.n	800bd8a <__gethex+0x12a>
 800bf62:	bf00      	nop
 800bf64:	0800ff20 	.word	0x0800ff20
 800bf68:	0800fea5 	.word	0x0800fea5
 800bf6c:	0800feb6 	.word	0x0800feb6
 800bf70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d1eb      	bne.n	800bf4e <__gethex+0x2ee>
 800bf76:	e7d8      	b.n	800bf2a <__gethex+0x2ca>
 800bf78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1d5      	bne.n	800bf2a <__gethex+0x2ca>
 800bf7e:	e7e6      	b.n	800bf4e <__gethex+0x2ee>
 800bf80:	1e6f      	subs	r7, r5, #1
 800bf82:	f1ba 0f00 	cmp.w	sl, #0
 800bf86:	d131      	bne.n	800bfec <__gethex+0x38c>
 800bf88:	b127      	cbz	r7, 800bf94 <__gethex+0x334>
 800bf8a:	4639      	mov	r1, r7
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f000 fe23 	bl	800cbd8 <__any_on>
 800bf92:	4682      	mov	sl, r0
 800bf94:	117b      	asrs	r3, r7, #5
 800bf96:	2101      	movs	r1, #1
 800bf98:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bf9c:	f007 071f 	and.w	r7, r7, #31
 800bfa0:	fa01 f707 	lsl.w	r7, r1, r7
 800bfa4:	421f      	tst	r7, r3
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	bf18      	it	ne
 800bfac:	f04a 0a02 	orrne.w	sl, sl, #2
 800bfb0:	1b76      	subs	r6, r6, r5
 800bfb2:	f7ff fded 	bl	800bb90 <rshift>
 800bfb6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bfba:	2702      	movs	r7, #2
 800bfbc:	f1ba 0f00 	cmp.w	sl, #0
 800bfc0:	d048      	beq.n	800c054 <__gethex+0x3f4>
 800bfc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bfc6:	2b02      	cmp	r3, #2
 800bfc8:	d015      	beq.n	800bff6 <__gethex+0x396>
 800bfca:	2b03      	cmp	r3, #3
 800bfcc:	d017      	beq.n	800bffe <__gethex+0x39e>
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d109      	bne.n	800bfe6 <__gethex+0x386>
 800bfd2:	f01a 0f02 	tst.w	sl, #2
 800bfd6:	d006      	beq.n	800bfe6 <__gethex+0x386>
 800bfd8:	f8d9 0000 	ldr.w	r0, [r9]
 800bfdc:	ea4a 0a00 	orr.w	sl, sl, r0
 800bfe0:	f01a 0f01 	tst.w	sl, #1
 800bfe4:	d10e      	bne.n	800c004 <__gethex+0x3a4>
 800bfe6:	f047 0710 	orr.w	r7, r7, #16
 800bfea:	e033      	b.n	800c054 <__gethex+0x3f4>
 800bfec:	f04f 0a01 	mov.w	sl, #1
 800bff0:	e7d0      	b.n	800bf94 <__gethex+0x334>
 800bff2:	2701      	movs	r7, #1
 800bff4:	e7e2      	b.n	800bfbc <__gethex+0x35c>
 800bff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bff8:	f1c3 0301 	rsb	r3, r3, #1
 800bffc:	9315      	str	r3, [sp, #84]	; 0x54
 800bffe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c000:	2b00      	cmp	r3, #0
 800c002:	d0f0      	beq.n	800bfe6 <__gethex+0x386>
 800c004:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c008:	f104 0314 	add.w	r3, r4, #20
 800c00c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c010:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c014:	f04f 0c00 	mov.w	ip, #0
 800c018:	4618      	mov	r0, r3
 800c01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c01e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c022:	d01c      	beq.n	800c05e <__gethex+0x3fe>
 800c024:	3201      	adds	r2, #1
 800c026:	6002      	str	r2, [r0, #0]
 800c028:	2f02      	cmp	r7, #2
 800c02a:	f104 0314 	add.w	r3, r4, #20
 800c02e:	d13f      	bne.n	800c0b0 <__gethex+0x450>
 800c030:	f8d8 2000 	ldr.w	r2, [r8]
 800c034:	3a01      	subs	r2, #1
 800c036:	42b2      	cmp	r2, r6
 800c038:	d10a      	bne.n	800c050 <__gethex+0x3f0>
 800c03a:	1171      	asrs	r1, r6, #5
 800c03c:	2201      	movs	r2, #1
 800c03e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c042:	f006 061f 	and.w	r6, r6, #31
 800c046:	fa02 f606 	lsl.w	r6, r2, r6
 800c04a:	421e      	tst	r6, r3
 800c04c:	bf18      	it	ne
 800c04e:	4617      	movne	r7, r2
 800c050:	f047 0720 	orr.w	r7, r7, #32
 800c054:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c056:	601c      	str	r4, [r3, #0]
 800c058:	9b04      	ldr	r3, [sp, #16]
 800c05a:	601d      	str	r5, [r3, #0]
 800c05c:	e695      	b.n	800bd8a <__gethex+0x12a>
 800c05e:	4299      	cmp	r1, r3
 800c060:	f843 cc04 	str.w	ip, [r3, #-4]
 800c064:	d8d8      	bhi.n	800c018 <__gethex+0x3b8>
 800c066:	68a3      	ldr	r3, [r4, #8]
 800c068:	459b      	cmp	fp, r3
 800c06a:	db19      	blt.n	800c0a0 <__gethex+0x440>
 800c06c:	6861      	ldr	r1, [r4, #4]
 800c06e:	ee18 0a10 	vmov	r0, s16
 800c072:	3101      	adds	r1, #1
 800c074:	f000 f916 	bl	800c2a4 <_Balloc>
 800c078:	4681      	mov	r9, r0
 800c07a:	b918      	cbnz	r0, 800c084 <__gethex+0x424>
 800c07c:	4b1a      	ldr	r3, [pc, #104]	; (800c0e8 <__gethex+0x488>)
 800c07e:	4602      	mov	r2, r0
 800c080:	2184      	movs	r1, #132	; 0x84
 800c082:	e6a8      	b.n	800bdd6 <__gethex+0x176>
 800c084:	6922      	ldr	r2, [r4, #16]
 800c086:	3202      	adds	r2, #2
 800c088:	f104 010c 	add.w	r1, r4, #12
 800c08c:	0092      	lsls	r2, r2, #2
 800c08e:	300c      	adds	r0, #12
 800c090:	f7fe fdba 	bl	800ac08 <memcpy>
 800c094:	4621      	mov	r1, r4
 800c096:	ee18 0a10 	vmov	r0, s16
 800c09a:	f000 f943 	bl	800c324 <_Bfree>
 800c09e:	464c      	mov	r4, r9
 800c0a0:	6923      	ldr	r3, [r4, #16]
 800c0a2:	1c5a      	adds	r2, r3, #1
 800c0a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0a8:	6122      	str	r2, [r4, #16]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	615a      	str	r2, [r3, #20]
 800c0ae:	e7bb      	b.n	800c028 <__gethex+0x3c8>
 800c0b0:	6922      	ldr	r2, [r4, #16]
 800c0b2:	455a      	cmp	r2, fp
 800c0b4:	dd0b      	ble.n	800c0ce <__gethex+0x46e>
 800c0b6:	2101      	movs	r1, #1
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	f7ff fd69 	bl	800bb90 <rshift>
 800c0be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c0c2:	3501      	adds	r5, #1
 800c0c4:	42ab      	cmp	r3, r5
 800c0c6:	f6ff aed0 	blt.w	800be6a <__gethex+0x20a>
 800c0ca:	2701      	movs	r7, #1
 800c0cc:	e7c0      	b.n	800c050 <__gethex+0x3f0>
 800c0ce:	f016 061f 	ands.w	r6, r6, #31
 800c0d2:	d0fa      	beq.n	800c0ca <__gethex+0x46a>
 800c0d4:	449a      	add	sl, r3
 800c0d6:	f1c6 0620 	rsb	r6, r6, #32
 800c0da:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c0de:	f000 f9d7 	bl	800c490 <__hi0bits>
 800c0e2:	42b0      	cmp	r0, r6
 800c0e4:	dbe7      	blt.n	800c0b6 <__gethex+0x456>
 800c0e6:	e7f0      	b.n	800c0ca <__gethex+0x46a>
 800c0e8:	0800fea5 	.word	0x0800fea5

0800c0ec <L_shift>:
 800c0ec:	f1c2 0208 	rsb	r2, r2, #8
 800c0f0:	0092      	lsls	r2, r2, #2
 800c0f2:	b570      	push	{r4, r5, r6, lr}
 800c0f4:	f1c2 0620 	rsb	r6, r2, #32
 800c0f8:	6843      	ldr	r3, [r0, #4]
 800c0fa:	6804      	ldr	r4, [r0, #0]
 800c0fc:	fa03 f506 	lsl.w	r5, r3, r6
 800c100:	432c      	orrs	r4, r5
 800c102:	40d3      	lsrs	r3, r2
 800c104:	6004      	str	r4, [r0, #0]
 800c106:	f840 3f04 	str.w	r3, [r0, #4]!
 800c10a:	4288      	cmp	r0, r1
 800c10c:	d3f4      	bcc.n	800c0f8 <L_shift+0xc>
 800c10e:	bd70      	pop	{r4, r5, r6, pc}

0800c110 <__match>:
 800c110:	b530      	push	{r4, r5, lr}
 800c112:	6803      	ldr	r3, [r0, #0]
 800c114:	3301      	adds	r3, #1
 800c116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c11a:	b914      	cbnz	r4, 800c122 <__match+0x12>
 800c11c:	6003      	str	r3, [r0, #0]
 800c11e:	2001      	movs	r0, #1
 800c120:	bd30      	pop	{r4, r5, pc}
 800c122:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c126:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c12a:	2d19      	cmp	r5, #25
 800c12c:	bf98      	it	ls
 800c12e:	3220      	addls	r2, #32
 800c130:	42a2      	cmp	r2, r4
 800c132:	d0f0      	beq.n	800c116 <__match+0x6>
 800c134:	2000      	movs	r0, #0
 800c136:	e7f3      	b.n	800c120 <__match+0x10>

0800c138 <__hexnan>:
 800c138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13c:	680b      	ldr	r3, [r1, #0]
 800c13e:	6801      	ldr	r1, [r0, #0]
 800c140:	115e      	asrs	r6, r3, #5
 800c142:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c146:	f013 031f 	ands.w	r3, r3, #31
 800c14a:	b087      	sub	sp, #28
 800c14c:	bf18      	it	ne
 800c14e:	3604      	addne	r6, #4
 800c150:	2500      	movs	r5, #0
 800c152:	1f37      	subs	r7, r6, #4
 800c154:	4682      	mov	sl, r0
 800c156:	4690      	mov	r8, r2
 800c158:	9301      	str	r3, [sp, #4]
 800c15a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c15e:	46b9      	mov	r9, r7
 800c160:	463c      	mov	r4, r7
 800c162:	9502      	str	r5, [sp, #8]
 800c164:	46ab      	mov	fp, r5
 800c166:	784a      	ldrb	r2, [r1, #1]
 800c168:	1c4b      	adds	r3, r1, #1
 800c16a:	9303      	str	r3, [sp, #12]
 800c16c:	b342      	cbz	r2, 800c1c0 <__hexnan+0x88>
 800c16e:	4610      	mov	r0, r2
 800c170:	9105      	str	r1, [sp, #20]
 800c172:	9204      	str	r2, [sp, #16]
 800c174:	f7ff fd5e 	bl	800bc34 <__hexdig_fun>
 800c178:	2800      	cmp	r0, #0
 800c17a:	d14f      	bne.n	800c21c <__hexnan+0xe4>
 800c17c:	9a04      	ldr	r2, [sp, #16]
 800c17e:	9905      	ldr	r1, [sp, #20]
 800c180:	2a20      	cmp	r2, #32
 800c182:	d818      	bhi.n	800c1b6 <__hexnan+0x7e>
 800c184:	9b02      	ldr	r3, [sp, #8]
 800c186:	459b      	cmp	fp, r3
 800c188:	dd13      	ble.n	800c1b2 <__hexnan+0x7a>
 800c18a:	454c      	cmp	r4, r9
 800c18c:	d206      	bcs.n	800c19c <__hexnan+0x64>
 800c18e:	2d07      	cmp	r5, #7
 800c190:	dc04      	bgt.n	800c19c <__hexnan+0x64>
 800c192:	462a      	mov	r2, r5
 800c194:	4649      	mov	r1, r9
 800c196:	4620      	mov	r0, r4
 800c198:	f7ff ffa8 	bl	800c0ec <L_shift>
 800c19c:	4544      	cmp	r4, r8
 800c19e:	d950      	bls.n	800c242 <__hexnan+0x10a>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	f1a4 0904 	sub.w	r9, r4, #4
 800c1a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1aa:	f8cd b008 	str.w	fp, [sp, #8]
 800c1ae:	464c      	mov	r4, r9
 800c1b0:	461d      	mov	r5, r3
 800c1b2:	9903      	ldr	r1, [sp, #12]
 800c1b4:	e7d7      	b.n	800c166 <__hexnan+0x2e>
 800c1b6:	2a29      	cmp	r2, #41	; 0x29
 800c1b8:	d156      	bne.n	800c268 <__hexnan+0x130>
 800c1ba:	3102      	adds	r1, #2
 800c1bc:	f8ca 1000 	str.w	r1, [sl]
 800c1c0:	f1bb 0f00 	cmp.w	fp, #0
 800c1c4:	d050      	beq.n	800c268 <__hexnan+0x130>
 800c1c6:	454c      	cmp	r4, r9
 800c1c8:	d206      	bcs.n	800c1d8 <__hexnan+0xa0>
 800c1ca:	2d07      	cmp	r5, #7
 800c1cc:	dc04      	bgt.n	800c1d8 <__hexnan+0xa0>
 800c1ce:	462a      	mov	r2, r5
 800c1d0:	4649      	mov	r1, r9
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f7ff ff8a 	bl	800c0ec <L_shift>
 800c1d8:	4544      	cmp	r4, r8
 800c1da:	d934      	bls.n	800c246 <__hexnan+0x10e>
 800c1dc:	f1a8 0204 	sub.w	r2, r8, #4
 800c1e0:	4623      	mov	r3, r4
 800c1e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c1e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c1ea:	429f      	cmp	r7, r3
 800c1ec:	d2f9      	bcs.n	800c1e2 <__hexnan+0xaa>
 800c1ee:	1b3b      	subs	r3, r7, r4
 800c1f0:	f023 0303 	bic.w	r3, r3, #3
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	3401      	adds	r4, #1
 800c1f8:	3e03      	subs	r6, #3
 800c1fa:	42b4      	cmp	r4, r6
 800c1fc:	bf88      	it	hi
 800c1fe:	2304      	movhi	r3, #4
 800c200:	4443      	add	r3, r8
 800c202:	2200      	movs	r2, #0
 800c204:	f843 2b04 	str.w	r2, [r3], #4
 800c208:	429f      	cmp	r7, r3
 800c20a:	d2fb      	bcs.n	800c204 <__hexnan+0xcc>
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	b91b      	cbnz	r3, 800c218 <__hexnan+0xe0>
 800c210:	4547      	cmp	r7, r8
 800c212:	d127      	bne.n	800c264 <__hexnan+0x12c>
 800c214:	2301      	movs	r3, #1
 800c216:	603b      	str	r3, [r7, #0]
 800c218:	2005      	movs	r0, #5
 800c21a:	e026      	b.n	800c26a <__hexnan+0x132>
 800c21c:	3501      	adds	r5, #1
 800c21e:	2d08      	cmp	r5, #8
 800c220:	f10b 0b01 	add.w	fp, fp, #1
 800c224:	dd06      	ble.n	800c234 <__hexnan+0xfc>
 800c226:	4544      	cmp	r4, r8
 800c228:	d9c3      	bls.n	800c1b2 <__hexnan+0x7a>
 800c22a:	2300      	movs	r3, #0
 800c22c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c230:	2501      	movs	r5, #1
 800c232:	3c04      	subs	r4, #4
 800c234:	6822      	ldr	r2, [r4, #0]
 800c236:	f000 000f 	and.w	r0, r0, #15
 800c23a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c23e:	6022      	str	r2, [r4, #0]
 800c240:	e7b7      	b.n	800c1b2 <__hexnan+0x7a>
 800c242:	2508      	movs	r5, #8
 800c244:	e7b5      	b.n	800c1b2 <__hexnan+0x7a>
 800c246:	9b01      	ldr	r3, [sp, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d0df      	beq.n	800c20c <__hexnan+0xd4>
 800c24c:	f04f 32ff 	mov.w	r2, #4294967295
 800c250:	f1c3 0320 	rsb	r3, r3, #32
 800c254:	fa22 f303 	lsr.w	r3, r2, r3
 800c258:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c25c:	401a      	ands	r2, r3
 800c25e:	f846 2c04 	str.w	r2, [r6, #-4]
 800c262:	e7d3      	b.n	800c20c <__hexnan+0xd4>
 800c264:	3f04      	subs	r7, #4
 800c266:	e7d1      	b.n	800c20c <__hexnan+0xd4>
 800c268:	2004      	movs	r0, #4
 800c26a:	b007      	add	sp, #28
 800c26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c270 <malloc>:
 800c270:	4b02      	ldr	r3, [pc, #8]	; (800c27c <malloc+0xc>)
 800c272:	4601      	mov	r1, r0
 800c274:	6818      	ldr	r0, [r3, #0]
 800c276:	f000 bd2f 	b.w	800ccd8 <_malloc_r>
 800c27a:	bf00      	nop
 800c27c:	2000006c 	.word	0x2000006c

0800c280 <__ascii_mbtowc>:
 800c280:	b082      	sub	sp, #8
 800c282:	b901      	cbnz	r1, 800c286 <__ascii_mbtowc+0x6>
 800c284:	a901      	add	r1, sp, #4
 800c286:	b142      	cbz	r2, 800c29a <__ascii_mbtowc+0x1a>
 800c288:	b14b      	cbz	r3, 800c29e <__ascii_mbtowc+0x1e>
 800c28a:	7813      	ldrb	r3, [r2, #0]
 800c28c:	600b      	str	r3, [r1, #0]
 800c28e:	7812      	ldrb	r2, [r2, #0]
 800c290:	1e10      	subs	r0, r2, #0
 800c292:	bf18      	it	ne
 800c294:	2001      	movne	r0, #1
 800c296:	b002      	add	sp, #8
 800c298:	4770      	bx	lr
 800c29a:	4610      	mov	r0, r2
 800c29c:	e7fb      	b.n	800c296 <__ascii_mbtowc+0x16>
 800c29e:	f06f 0001 	mvn.w	r0, #1
 800c2a2:	e7f8      	b.n	800c296 <__ascii_mbtowc+0x16>

0800c2a4 <_Balloc>:
 800c2a4:	b570      	push	{r4, r5, r6, lr}
 800c2a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	460d      	mov	r5, r1
 800c2ac:	b976      	cbnz	r6, 800c2cc <_Balloc+0x28>
 800c2ae:	2010      	movs	r0, #16
 800c2b0:	f7ff ffde 	bl	800c270 <malloc>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	6260      	str	r0, [r4, #36]	; 0x24
 800c2b8:	b920      	cbnz	r0, 800c2c4 <_Balloc+0x20>
 800c2ba:	4b18      	ldr	r3, [pc, #96]	; (800c31c <_Balloc+0x78>)
 800c2bc:	4818      	ldr	r0, [pc, #96]	; (800c320 <_Balloc+0x7c>)
 800c2be:	2166      	movs	r1, #102	; 0x66
 800c2c0:	f7ff fc36 	bl	800bb30 <__assert_func>
 800c2c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2c8:	6006      	str	r6, [r0, #0]
 800c2ca:	60c6      	str	r6, [r0, #12]
 800c2cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c2ce:	68f3      	ldr	r3, [r6, #12]
 800c2d0:	b183      	cbz	r3, 800c2f4 <_Balloc+0x50>
 800c2d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2da:	b9b8      	cbnz	r0, 800c30c <_Balloc+0x68>
 800c2dc:	2101      	movs	r1, #1
 800c2de:	fa01 f605 	lsl.w	r6, r1, r5
 800c2e2:	1d72      	adds	r2, r6, #5
 800c2e4:	0092      	lsls	r2, r2, #2
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	f000 fc97 	bl	800cc1a <_calloc_r>
 800c2ec:	b160      	cbz	r0, 800c308 <_Balloc+0x64>
 800c2ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2f2:	e00e      	b.n	800c312 <_Balloc+0x6e>
 800c2f4:	2221      	movs	r2, #33	; 0x21
 800c2f6:	2104      	movs	r1, #4
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	f000 fc8e 	bl	800cc1a <_calloc_r>
 800c2fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c300:	60f0      	str	r0, [r6, #12]
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1e4      	bne.n	800c2d2 <_Balloc+0x2e>
 800c308:	2000      	movs	r0, #0
 800c30a:	bd70      	pop	{r4, r5, r6, pc}
 800c30c:	6802      	ldr	r2, [r0, #0]
 800c30e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c312:	2300      	movs	r3, #0
 800c314:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c318:	e7f7      	b.n	800c30a <_Balloc+0x66>
 800c31a:	bf00      	nop
 800c31c:	0800fcf0 	.word	0x0800fcf0
 800c320:	0800ff34 	.word	0x0800ff34

0800c324 <_Bfree>:
 800c324:	b570      	push	{r4, r5, r6, lr}
 800c326:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c328:	4605      	mov	r5, r0
 800c32a:	460c      	mov	r4, r1
 800c32c:	b976      	cbnz	r6, 800c34c <_Bfree+0x28>
 800c32e:	2010      	movs	r0, #16
 800c330:	f7ff ff9e 	bl	800c270 <malloc>
 800c334:	4602      	mov	r2, r0
 800c336:	6268      	str	r0, [r5, #36]	; 0x24
 800c338:	b920      	cbnz	r0, 800c344 <_Bfree+0x20>
 800c33a:	4b09      	ldr	r3, [pc, #36]	; (800c360 <_Bfree+0x3c>)
 800c33c:	4809      	ldr	r0, [pc, #36]	; (800c364 <_Bfree+0x40>)
 800c33e:	218a      	movs	r1, #138	; 0x8a
 800c340:	f7ff fbf6 	bl	800bb30 <__assert_func>
 800c344:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c348:	6006      	str	r6, [r0, #0]
 800c34a:	60c6      	str	r6, [r0, #12]
 800c34c:	b13c      	cbz	r4, 800c35e <_Bfree+0x3a>
 800c34e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c350:	6862      	ldr	r2, [r4, #4]
 800c352:	68db      	ldr	r3, [r3, #12]
 800c354:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c358:	6021      	str	r1, [r4, #0]
 800c35a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c35e:	bd70      	pop	{r4, r5, r6, pc}
 800c360:	0800fcf0 	.word	0x0800fcf0
 800c364:	0800ff34 	.word	0x0800ff34

0800c368 <__multadd>:
 800c368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c36c:	690e      	ldr	r6, [r1, #16]
 800c36e:	4607      	mov	r7, r0
 800c370:	4698      	mov	r8, r3
 800c372:	460c      	mov	r4, r1
 800c374:	f101 0014 	add.w	r0, r1, #20
 800c378:	2300      	movs	r3, #0
 800c37a:	6805      	ldr	r5, [r0, #0]
 800c37c:	b2a9      	uxth	r1, r5
 800c37e:	fb02 8101 	mla	r1, r2, r1, r8
 800c382:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c386:	0c2d      	lsrs	r5, r5, #16
 800c388:	fb02 c505 	mla	r5, r2, r5, ip
 800c38c:	b289      	uxth	r1, r1
 800c38e:	3301      	adds	r3, #1
 800c390:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c394:	429e      	cmp	r6, r3
 800c396:	f840 1b04 	str.w	r1, [r0], #4
 800c39a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c39e:	dcec      	bgt.n	800c37a <__multadd+0x12>
 800c3a0:	f1b8 0f00 	cmp.w	r8, #0
 800c3a4:	d022      	beq.n	800c3ec <__multadd+0x84>
 800c3a6:	68a3      	ldr	r3, [r4, #8]
 800c3a8:	42b3      	cmp	r3, r6
 800c3aa:	dc19      	bgt.n	800c3e0 <__multadd+0x78>
 800c3ac:	6861      	ldr	r1, [r4, #4]
 800c3ae:	4638      	mov	r0, r7
 800c3b0:	3101      	adds	r1, #1
 800c3b2:	f7ff ff77 	bl	800c2a4 <_Balloc>
 800c3b6:	4605      	mov	r5, r0
 800c3b8:	b928      	cbnz	r0, 800c3c6 <__multadd+0x5e>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	4b0d      	ldr	r3, [pc, #52]	; (800c3f4 <__multadd+0x8c>)
 800c3be:	480e      	ldr	r0, [pc, #56]	; (800c3f8 <__multadd+0x90>)
 800c3c0:	21b5      	movs	r1, #181	; 0xb5
 800c3c2:	f7ff fbb5 	bl	800bb30 <__assert_func>
 800c3c6:	6922      	ldr	r2, [r4, #16]
 800c3c8:	3202      	adds	r2, #2
 800c3ca:	f104 010c 	add.w	r1, r4, #12
 800c3ce:	0092      	lsls	r2, r2, #2
 800c3d0:	300c      	adds	r0, #12
 800c3d2:	f7fe fc19 	bl	800ac08 <memcpy>
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	4638      	mov	r0, r7
 800c3da:	f7ff ffa3 	bl	800c324 <_Bfree>
 800c3de:	462c      	mov	r4, r5
 800c3e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c3e4:	3601      	adds	r6, #1
 800c3e6:	f8c3 8014 	str.w	r8, [r3, #20]
 800c3ea:	6126      	str	r6, [r4, #16]
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3f2:	bf00      	nop
 800c3f4:	0800fea5 	.word	0x0800fea5
 800c3f8:	0800ff34 	.word	0x0800ff34

0800c3fc <__s2b>:
 800c3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c400:	460c      	mov	r4, r1
 800c402:	4615      	mov	r5, r2
 800c404:	461f      	mov	r7, r3
 800c406:	2209      	movs	r2, #9
 800c408:	3308      	adds	r3, #8
 800c40a:	4606      	mov	r6, r0
 800c40c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c410:	2100      	movs	r1, #0
 800c412:	2201      	movs	r2, #1
 800c414:	429a      	cmp	r2, r3
 800c416:	db09      	blt.n	800c42c <__s2b+0x30>
 800c418:	4630      	mov	r0, r6
 800c41a:	f7ff ff43 	bl	800c2a4 <_Balloc>
 800c41e:	b940      	cbnz	r0, 800c432 <__s2b+0x36>
 800c420:	4602      	mov	r2, r0
 800c422:	4b19      	ldr	r3, [pc, #100]	; (800c488 <__s2b+0x8c>)
 800c424:	4819      	ldr	r0, [pc, #100]	; (800c48c <__s2b+0x90>)
 800c426:	21ce      	movs	r1, #206	; 0xce
 800c428:	f7ff fb82 	bl	800bb30 <__assert_func>
 800c42c:	0052      	lsls	r2, r2, #1
 800c42e:	3101      	adds	r1, #1
 800c430:	e7f0      	b.n	800c414 <__s2b+0x18>
 800c432:	9b08      	ldr	r3, [sp, #32]
 800c434:	6143      	str	r3, [r0, #20]
 800c436:	2d09      	cmp	r5, #9
 800c438:	f04f 0301 	mov.w	r3, #1
 800c43c:	6103      	str	r3, [r0, #16]
 800c43e:	dd16      	ble.n	800c46e <__s2b+0x72>
 800c440:	f104 0909 	add.w	r9, r4, #9
 800c444:	46c8      	mov	r8, r9
 800c446:	442c      	add	r4, r5
 800c448:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c44c:	4601      	mov	r1, r0
 800c44e:	3b30      	subs	r3, #48	; 0x30
 800c450:	220a      	movs	r2, #10
 800c452:	4630      	mov	r0, r6
 800c454:	f7ff ff88 	bl	800c368 <__multadd>
 800c458:	45a0      	cmp	r8, r4
 800c45a:	d1f5      	bne.n	800c448 <__s2b+0x4c>
 800c45c:	f1a5 0408 	sub.w	r4, r5, #8
 800c460:	444c      	add	r4, r9
 800c462:	1b2d      	subs	r5, r5, r4
 800c464:	1963      	adds	r3, r4, r5
 800c466:	42bb      	cmp	r3, r7
 800c468:	db04      	blt.n	800c474 <__s2b+0x78>
 800c46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c46e:	340a      	adds	r4, #10
 800c470:	2509      	movs	r5, #9
 800c472:	e7f6      	b.n	800c462 <__s2b+0x66>
 800c474:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c478:	4601      	mov	r1, r0
 800c47a:	3b30      	subs	r3, #48	; 0x30
 800c47c:	220a      	movs	r2, #10
 800c47e:	4630      	mov	r0, r6
 800c480:	f7ff ff72 	bl	800c368 <__multadd>
 800c484:	e7ee      	b.n	800c464 <__s2b+0x68>
 800c486:	bf00      	nop
 800c488:	0800fea5 	.word	0x0800fea5
 800c48c:	0800ff34 	.word	0x0800ff34

0800c490 <__hi0bits>:
 800c490:	0c03      	lsrs	r3, r0, #16
 800c492:	041b      	lsls	r3, r3, #16
 800c494:	b9d3      	cbnz	r3, 800c4cc <__hi0bits+0x3c>
 800c496:	0400      	lsls	r0, r0, #16
 800c498:	2310      	movs	r3, #16
 800c49a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c49e:	bf04      	itt	eq
 800c4a0:	0200      	lsleq	r0, r0, #8
 800c4a2:	3308      	addeq	r3, #8
 800c4a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c4a8:	bf04      	itt	eq
 800c4aa:	0100      	lsleq	r0, r0, #4
 800c4ac:	3304      	addeq	r3, #4
 800c4ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c4b2:	bf04      	itt	eq
 800c4b4:	0080      	lsleq	r0, r0, #2
 800c4b6:	3302      	addeq	r3, #2
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	db05      	blt.n	800c4c8 <__hi0bits+0x38>
 800c4bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c4c0:	f103 0301 	add.w	r3, r3, #1
 800c4c4:	bf08      	it	eq
 800c4c6:	2320      	moveq	r3, #32
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	4770      	bx	lr
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	e7e4      	b.n	800c49a <__hi0bits+0xa>

0800c4d0 <__lo0bits>:
 800c4d0:	6803      	ldr	r3, [r0, #0]
 800c4d2:	f013 0207 	ands.w	r2, r3, #7
 800c4d6:	4601      	mov	r1, r0
 800c4d8:	d00b      	beq.n	800c4f2 <__lo0bits+0x22>
 800c4da:	07da      	lsls	r2, r3, #31
 800c4dc:	d424      	bmi.n	800c528 <__lo0bits+0x58>
 800c4de:	0798      	lsls	r0, r3, #30
 800c4e0:	bf49      	itett	mi
 800c4e2:	085b      	lsrmi	r3, r3, #1
 800c4e4:	089b      	lsrpl	r3, r3, #2
 800c4e6:	2001      	movmi	r0, #1
 800c4e8:	600b      	strmi	r3, [r1, #0]
 800c4ea:	bf5c      	itt	pl
 800c4ec:	600b      	strpl	r3, [r1, #0]
 800c4ee:	2002      	movpl	r0, #2
 800c4f0:	4770      	bx	lr
 800c4f2:	b298      	uxth	r0, r3
 800c4f4:	b9b0      	cbnz	r0, 800c524 <__lo0bits+0x54>
 800c4f6:	0c1b      	lsrs	r3, r3, #16
 800c4f8:	2010      	movs	r0, #16
 800c4fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c4fe:	bf04      	itt	eq
 800c500:	0a1b      	lsreq	r3, r3, #8
 800c502:	3008      	addeq	r0, #8
 800c504:	071a      	lsls	r2, r3, #28
 800c506:	bf04      	itt	eq
 800c508:	091b      	lsreq	r3, r3, #4
 800c50a:	3004      	addeq	r0, #4
 800c50c:	079a      	lsls	r2, r3, #30
 800c50e:	bf04      	itt	eq
 800c510:	089b      	lsreq	r3, r3, #2
 800c512:	3002      	addeq	r0, #2
 800c514:	07da      	lsls	r2, r3, #31
 800c516:	d403      	bmi.n	800c520 <__lo0bits+0x50>
 800c518:	085b      	lsrs	r3, r3, #1
 800c51a:	f100 0001 	add.w	r0, r0, #1
 800c51e:	d005      	beq.n	800c52c <__lo0bits+0x5c>
 800c520:	600b      	str	r3, [r1, #0]
 800c522:	4770      	bx	lr
 800c524:	4610      	mov	r0, r2
 800c526:	e7e8      	b.n	800c4fa <__lo0bits+0x2a>
 800c528:	2000      	movs	r0, #0
 800c52a:	4770      	bx	lr
 800c52c:	2020      	movs	r0, #32
 800c52e:	4770      	bx	lr

0800c530 <__i2b>:
 800c530:	b510      	push	{r4, lr}
 800c532:	460c      	mov	r4, r1
 800c534:	2101      	movs	r1, #1
 800c536:	f7ff feb5 	bl	800c2a4 <_Balloc>
 800c53a:	4602      	mov	r2, r0
 800c53c:	b928      	cbnz	r0, 800c54a <__i2b+0x1a>
 800c53e:	4b05      	ldr	r3, [pc, #20]	; (800c554 <__i2b+0x24>)
 800c540:	4805      	ldr	r0, [pc, #20]	; (800c558 <__i2b+0x28>)
 800c542:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c546:	f7ff faf3 	bl	800bb30 <__assert_func>
 800c54a:	2301      	movs	r3, #1
 800c54c:	6144      	str	r4, [r0, #20]
 800c54e:	6103      	str	r3, [r0, #16]
 800c550:	bd10      	pop	{r4, pc}
 800c552:	bf00      	nop
 800c554:	0800fea5 	.word	0x0800fea5
 800c558:	0800ff34 	.word	0x0800ff34

0800c55c <__multiply>:
 800c55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c560:	4614      	mov	r4, r2
 800c562:	690a      	ldr	r2, [r1, #16]
 800c564:	6923      	ldr	r3, [r4, #16]
 800c566:	429a      	cmp	r2, r3
 800c568:	bfb8      	it	lt
 800c56a:	460b      	movlt	r3, r1
 800c56c:	460d      	mov	r5, r1
 800c56e:	bfbc      	itt	lt
 800c570:	4625      	movlt	r5, r4
 800c572:	461c      	movlt	r4, r3
 800c574:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c578:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c57c:	68ab      	ldr	r3, [r5, #8]
 800c57e:	6869      	ldr	r1, [r5, #4]
 800c580:	eb0a 0709 	add.w	r7, sl, r9
 800c584:	42bb      	cmp	r3, r7
 800c586:	b085      	sub	sp, #20
 800c588:	bfb8      	it	lt
 800c58a:	3101      	addlt	r1, #1
 800c58c:	f7ff fe8a 	bl	800c2a4 <_Balloc>
 800c590:	b930      	cbnz	r0, 800c5a0 <__multiply+0x44>
 800c592:	4602      	mov	r2, r0
 800c594:	4b42      	ldr	r3, [pc, #264]	; (800c6a0 <__multiply+0x144>)
 800c596:	4843      	ldr	r0, [pc, #268]	; (800c6a4 <__multiply+0x148>)
 800c598:	f240 115d 	movw	r1, #349	; 0x15d
 800c59c:	f7ff fac8 	bl	800bb30 <__assert_func>
 800c5a0:	f100 0614 	add.w	r6, r0, #20
 800c5a4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c5a8:	4633      	mov	r3, r6
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	4543      	cmp	r3, r8
 800c5ae:	d31e      	bcc.n	800c5ee <__multiply+0x92>
 800c5b0:	f105 0c14 	add.w	ip, r5, #20
 800c5b4:	f104 0314 	add.w	r3, r4, #20
 800c5b8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c5bc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c5c0:	9202      	str	r2, [sp, #8]
 800c5c2:	ebac 0205 	sub.w	r2, ip, r5
 800c5c6:	3a15      	subs	r2, #21
 800c5c8:	f022 0203 	bic.w	r2, r2, #3
 800c5cc:	3204      	adds	r2, #4
 800c5ce:	f105 0115 	add.w	r1, r5, #21
 800c5d2:	458c      	cmp	ip, r1
 800c5d4:	bf38      	it	cc
 800c5d6:	2204      	movcc	r2, #4
 800c5d8:	9201      	str	r2, [sp, #4]
 800c5da:	9a02      	ldr	r2, [sp, #8]
 800c5dc:	9303      	str	r3, [sp, #12]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d808      	bhi.n	800c5f4 <__multiply+0x98>
 800c5e2:	2f00      	cmp	r7, #0
 800c5e4:	dc55      	bgt.n	800c692 <__multiply+0x136>
 800c5e6:	6107      	str	r7, [r0, #16]
 800c5e8:	b005      	add	sp, #20
 800c5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ee:	f843 2b04 	str.w	r2, [r3], #4
 800c5f2:	e7db      	b.n	800c5ac <__multiply+0x50>
 800c5f4:	f8b3 a000 	ldrh.w	sl, [r3]
 800c5f8:	f1ba 0f00 	cmp.w	sl, #0
 800c5fc:	d020      	beq.n	800c640 <__multiply+0xe4>
 800c5fe:	f105 0e14 	add.w	lr, r5, #20
 800c602:	46b1      	mov	r9, r6
 800c604:	2200      	movs	r2, #0
 800c606:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c60a:	f8d9 b000 	ldr.w	fp, [r9]
 800c60e:	b2a1      	uxth	r1, r4
 800c610:	fa1f fb8b 	uxth.w	fp, fp
 800c614:	fb0a b101 	mla	r1, sl, r1, fp
 800c618:	4411      	add	r1, r2
 800c61a:	f8d9 2000 	ldr.w	r2, [r9]
 800c61e:	0c24      	lsrs	r4, r4, #16
 800c620:	0c12      	lsrs	r2, r2, #16
 800c622:	fb0a 2404 	mla	r4, sl, r4, r2
 800c626:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c62a:	b289      	uxth	r1, r1
 800c62c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c630:	45f4      	cmp	ip, lr
 800c632:	f849 1b04 	str.w	r1, [r9], #4
 800c636:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c63a:	d8e4      	bhi.n	800c606 <__multiply+0xaa>
 800c63c:	9901      	ldr	r1, [sp, #4]
 800c63e:	5072      	str	r2, [r6, r1]
 800c640:	9a03      	ldr	r2, [sp, #12]
 800c642:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c646:	3304      	adds	r3, #4
 800c648:	f1b9 0f00 	cmp.w	r9, #0
 800c64c:	d01f      	beq.n	800c68e <__multiply+0x132>
 800c64e:	6834      	ldr	r4, [r6, #0]
 800c650:	f105 0114 	add.w	r1, r5, #20
 800c654:	46b6      	mov	lr, r6
 800c656:	f04f 0a00 	mov.w	sl, #0
 800c65a:	880a      	ldrh	r2, [r1, #0]
 800c65c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c660:	fb09 b202 	mla	r2, r9, r2, fp
 800c664:	4492      	add	sl, r2
 800c666:	b2a4      	uxth	r4, r4
 800c668:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c66c:	f84e 4b04 	str.w	r4, [lr], #4
 800c670:	f851 4b04 	ldr.w	r4, [r1], #4
 800c674:	f8be 2000 	ldrh.w	r2, [lr]
 800c678:	0c24      	lsrs	r4, r4, #16
 800c67a:	fb09 2404 	mla	r4, r9, r4, r2
 800c67e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c682:	458c      	cmp	ip, r1
 800c684:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c688:	d8e7      	bhi.n	800c65a <__multiply+0xfe>
 800c68a:	9a01      	ldr	r2, [sp, #4]
 800c68c:	50b4      	str	r4, [r6, r2]
 800c68e:	3604      	adds	r6, #4
 800c690:	e7a3      	b.n	800c5da <__multiply+0x7e>
 800c692:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1a5      	bne.n	800c5e6 <__multiply+0x8a>
 800c69a:	3f01      	subs	r7, #1
 800c69c:	e7a1      	b.n	800c5e2 <__multiply+0x86>
 800c69e:	bf00      	nop
 800c6a0:	0800fea5 	.word	0x0800fea5
 800c6a4:	0800ff34 	.word	0x0800ff34

0800c6a8 <__pow5mult>:
 800c6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6ac:	4615      	mov	r5, r2
 800c6ae:	f012 0203 	ands.w	r2, r2, #3
 800c6b2:	4606      	mov	r6, r0
 800c6b4:	460f      	mov	r7, r1
 800c6b6:	d007      	beq.n	800c6c8 <__pow5mult+0x20>
 800c6b8:	4c25      	ldr	r4, [pc, #148]	; (800c750 <__pow5mult+0xa8>)
 800c6ba:	3a01      	subs	r2, #1
 800c6bc:	2300      	movs	r3, #0
 800c6be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6c2:	f7ff fe51 	bl	800c368 <__multadd>
 800c6c6:	4607      	mov	r7, r0
 800c6c8:	10ad      	asrs	r5, r5, #2
 800c6ca:	d03d      	beq.n	800c748 <__pow5mult+0xa0>
 800c6cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c6ce:	b97c      	cbnz	r4, 800c6f0 <__pow5mult+0x48>
 800c6d0:	2010      	movs	r0, #16
 800c6d2:	f7ff fdcd 	bl	800c270 <malloc>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	6270      	str	r0, [r6, #36]	; 0x24
 800c6da:	b928      	cbnz	r0, 800c6e8 <__pow5mult+0x40>
 800c6dc:	4b1d      	ldr	r3, [pc, #116]	; (800c754 <__pow5mult+0xac>)
 800c6de:	481e      	ldr	r0, [pc, #120]	; (800c758 <__pow5mult+0xb0>)
 800c6e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c6e4:	f7ff fa24 	bl	800bb30 <__assert_func>
 800c6e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6ec:	6004      	str	r4, [r0, #0]
 800c6ee:	60c4      	str	r4, [r0, #12]
 800c6f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c6f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c6f8:	b94c      	cbnz	r4, 800c70e <__pow5mult+0x66>
 800c6fa:	f240 2171 	movw	r1, #625	; 0x271
 800c6fe:	4630      	mov	r0, r6
 800c700:	f7ff ff16 	bl	800c530 <__i2b>
 800c704:	2300      	movs	r3, #0
 800c706:	f8c8 0008 	str.w	r0, [r8, #8]
 800c70a:	4604      	mov	r4, r0
 800c70c:	6003      	str	r3, [r0, #0]
 800c70e:	f04f 0900 	mov.w	r9, #0
 800c712:	07eb      	lsls	r3, r5, #31
 800c714:	d50a      	bpl.n	800c72c <__pow5mult+0x84>
 800c716:	4639      	mov	r1, r7
 800c718:	4622      	mov	r2, r4
 800c71a:	4630      	mov	r0, r6
 800c71c:	f7ff ff1e 	bl	800c55c <__multiply>
 800c720:	4639      	mov	r1, r7
 800c722:	4680      	mov	r8, r0
 800c724:	4630      	mov	r0, r6
 800c726:	f7ff fdfd 	bl	800c324 <_Bfree>
 800c72a:	4647      	mov	r7, r8
 800c72c:	106d      	asrs	r5, r5, #1
 800c72e:	d00b      	beq.n	800c748 <__pow5mult+0xa0>
 800c730:	6820      	ldr	r0, [r4, #0]
 800c732:	b938      	cbnz	r0, 800c744 <__pow5mult+0x9c>
 800c734:	4622      	mov	r2, r4
 800c736:	4621      	mov	r1, r4
 800c738:	4630      	mov	r0, r6
 800c73a:	f7ff ff0f 	bl	800c55c <__multiply>
 800c73e:	6020      	str	r0, [r4, #0]
 800c740:	f8c0 9000 	str.w	r9, [r0]
 800c744:	4604      	mov	r4, r0
 800c746:	e7e4      	b.n	800c712 <__pow5mult+0x6a>
 800c748:	4638      	mov	r0, r7
 800c74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c74e:	bf00      	nop
 800c750:	08010088 	.word	0x08010088
 800c754:	0800fcf0 	.word	0x0800fcf0
 800c758:	0800ff34 	.word	0x0800ff34

0800c75c <__lshift>:
 800c75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c760:	460c      	mov	r4, r1
 800c762:	6849      	ldr	r1, [r1, #4]
 800c764:	6923      	ldr	r3, [r4, #16]
 800c766:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c76a:	68a3      	ldr	r3, [r4, #8]
 800c76c:	4607      	mov	r7, r0
 800c76e:	4691      	mov	r9, r2
 800c770:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c774:	f108 0601 	add.w	r6, r8, #1
 800c778:	42b3      	cmp	r3, r6
 800c77a:	db0b      	blt.n	800c794 <__lshift+0x38>
 800c77c:	4638      	mov	r0, r7
 800c77e:	f7ff fd91 	bl	800c2a4 <_Balloc>
 800c782:	4605      	mov	r5, r0
 800c784:	b948      	cbnz	r0, 800c79a <__lshift+0x3e>
 800c786:	4602      	mov	r2, r0
 800c788:	4b28      	ldr	r3, [pc, #160]	; (800c82c <__lshift+0xd0>)
 800c78a:	4829      	ldr	r0, [pc, #164]	; (800c830 <__lshift+0xd4>)
 800c78c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c790:	f7ff f9ce 	bl	800bb30 <__assert_func>
 800c794:	3101      	adds	r1, #1
 800c796:	005b      	lsls	r3, r3, #1
 800c798:	e7ee      	b.n	800c778 <__lshift+0x1c>
 800c79a:	2300      	movs	r3, #0
 800c79c:	f100 0114 	add.w	r1, r0, #20
 800c7a0:	f100 0210 	add.w	r2, r0, #16
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	4553      	cmp	r3, sl
 800c7a8:	db33      	blt.n	800c812 <__lshift+0xb6>
 800c7aa:	6920      	ldr	r0, [r4, #16]
 800c7ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7b0:	f104 0314 	add.w	r3, r4, #20
 800c7b4:	f019 091f 	ands.w	r9, r9, #31
 800c7b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c7c0:	d02b      	beq.n	800c81a <__lshift+0xbe>
 800c7c2:	f1c9 0e20 	rsb	lr, r9, #32
 800c7c6:	468a      	mov	sl, r1
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	6818      	ldr	r0, [r3, #0]
 800c7cc:	fa00 f009 	lsl.w	r0, r0, r9
 800c7d0:	4302      	orrs	r2, r0
 800c7d2:	f84a 2b04 	str.w	r2, [sl], #4
 800c7d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7da:	459c      	cmp	ip, r3
 800c7dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c7e0:	d8f3      	bhi.n	800c7ca <__lshift+0x6e>
 800c7e2:	ebac 0304 	sub.w	r3, ip, r4
 800c7e6:	3b15      	subs	r3, #21
 800c7e8:	f023 0303 	bic.w	r3, r3, #3
 800c7ec:	3304      	adds	r3, #4
 800c7ee:	f104 0015 	add.w	r0, r4, #21
 800c7f2:	4584      	cmp	ip, r0
 800c7f4:	bf38      	it	cc
 800c7f6:	2304      	movcc	r3, #4
 800c7f8:	50ca      	str	r2, [r1, r3]
 800c7fa:	b10a      	cbz	r2, 800c800 <__lshift+0xa4>
 800c7fc:	f108 0602 	add.w	r6, r8, #2
 800c800:	3e01      	subs	r6, #1
 800c802:	4638      	mov	r0, r7
 800c804:	612e      	str	r6, [r5, #16]
 800c806:	4621      	mov	r1, r4
 800c808:	f7ff fd8c 	bl	800c324 <_Bfree>
 800c80c:	4628      	mov	r0, r5
 800c80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c812:	f842 0f04 	str.w	r0, [r2, #4]!
 800c816:	3301      	adds	r3, #1
 800c818:	e7c5      	b.n	800c7a6 <__lshift+0x4a>
 800c81a:	3904      	subs	r1, #4
 800c81c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c820:	f841 2f04 	str.w	r2, [r1, #4]!
 800c824:	459c      	cmp	ip, r3
 800c826:	d8f9      	bhi.n	800c81c <__lshift+0xc0>
 800c828:	e7ea      	b.n	800c800 <__lshift+0xa4>
 800c82a:	bf00      	nop
 800c82c:	0800fea5 	.word	0x0800fea5
 800c830:	0800ff34 	.word	0x0800ff34

0800c834 <__mcmp>:
 800c834:	b530      	push	{r4, r5, lr}
 800c836:	6902      	ldr	r2, [r0, #16]
 800c838:	690c      	ldr	r4, [r1, #16]
 800c83a:	1b12      	subs	r2, r2, r4
 800c83c:	d10e      	bne.n	800c85c <__mcmp+0x28>
 800c83e:	f100 0314 	add.w	r3, r0, #20
 800c842:	3114      	adds	r1, #20
 800c844:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c848:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c84c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c850:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c854:	42a5      	cmp	r5, r4
 800c856:	d003      	beq.n	800c860 <__mcmp+0x2c>
 800c858:	d305      	bcc.n	800c866 <__mcmp+0x32>
 800c85a:	2201      	movs	r2, #1
 800c85c:	4610      	mov	r0, r2
 800c85e:	bd30      	pop	{r4, r5, pc}
 800c860:	4283      	cmp	r3, r0
 800c862:	d3f3      	bcc.n	800c84c <__mcmp+0x18>
 800c864:	e7fa      	b.n	800c85c <__mcmp+0x28>
 800c866:	f04f 32ff 	mov.w	r2, #4294967295
 800c86a:	e7f7      	b.n	800c85c <__mcmp+0x28>

0800c86c <__mdiff>:
 800c86c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c870:	460c      	mov	r4, r1
 800c872:	4606      	mov	r6, r0
 800c874:	4611      	mov	r1, r2
 800c876:	4620      	mov	r0, r4
 800c878:	4617      	mov	r7, r2
 800c87a:	f7ff ffdb 	bl	800c834 <__mcmp>
 800c87e:	1e05      	subs	r5, r0, #0
 800c880:	d110      	bne.n	800c8a4 <__mdiff+0x38>
 800c882:	4629      	mov	r1, r5
 800c884:	4630      	mov	r0, r6
 800c886:	f7ff fd0d 	bl	800c2a4 <_Balloc>
 800c88a:	b930      	cbnz	r0, 800c89a <__mdiff+0x2e>
 800c88c:	4b39      	ldr	r3, [pc, #228]	; (800c974 <__mdiff+0x108>)
 800c88e:	4602      	mov	r2, r0
 800c890:	f240 2132 	movw	r1, #562	; 0x232
 800c894:	4838      	ldr	r0, [pc, #224]	; (800c978 <__mdiff+0x10c>)
 800c896:	f7ff f94b 	bl	800bb30 <__assert_func>
 800c89a:	2301      	movs	r3, #1
 800c89c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a4:	bfa4      	itt	ge
 800c8a6:	463b      	movge	r3, r7
 800c8a8:	4627      	movge	r7, r4
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	6879      	ldr	r1, [r7, #4]
 800c8ae:	bfa6      	itte	ge
 800c8b0:	461c      	movge	r4, r3
 800c8b2:	2500      	movge	r5, #0
 800c8b4:	2501      	movlt	r5, #1
 800c8b6:	f7ff fcf5 	bl	800c2a4 <_Balloc>
 800c8ba:	b920      	cbnz	r0, 800c8c6 <__mdiff+0x5a>
 800c8bc:	4b2d      	ldr	r3, [pc, #180]	; (800c974 <__mdiff+0x108>)
 800c8be:	4602      	mov	r2, r0
 800c8c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c8c4:	e7e6      	b.n	800c894 <__mdiff+0x28>
 800c8c6:	693e      	ldr	r6, [r7, #16]
 800c8c8:	60c5      	str	r5, [r0, #12]
 800c8ca:	6925      	ldr	r5, [r4, #16]
 800c8cc:	f107 0114 	add.w	r1, r7, #20
 800c8d0:	f104 0914 	add.w	r9, r4, #20
 800c8d4:	f100 0e14 	add.w	lr, r0, #20
 800c8d8:	f107 0210 	add.w	r2, r7, #16
 800c8dc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c8e0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c8e4:	46f2      	mov	sl, lr
 800c8e6:	2700      	movs	r7, #0
 800c8e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c8ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c8f0:	fa1f f883 	uxth.w	r8, r3
 800c8f4:	fa17 f78b 	uxtah	r7, r7, fp
 800c8f8:	0c1b      	lsrs	r3, r3, #16
 800c8fa:	eba7 0808 	sub.w	r8, r7, r8
 800c8fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c902:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c906:	fa1f f888 	uxth.w	r8, r8
 800c90a:	141f      	asrs	r7, r3, #16
 800c90c:	454d      	cmp	r5, r9
 800c90e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c912:	f84a 3b04 	str.w	r3, [sl], #4
 800c916:	d8e7      	bhi.n	800c8e8 <__mdiff+0x7c>
 800c918:	1b2b      	subs	r3, r5, r4
 800c91a:	3b15      	subs	r3, #21
 800c91c:	f023 0303 	bic.w	r3, r3, #3
 800c920:	3304      	adds	r3, #4
 800c922:	3415      	adds	r4, #21
 800c924:	42a5      	cmp	r5, r4
 800c926:	bf38      	it	cc
 800c928:	2304      	movcc	r3, #4
 800c92a:	4419      	add	r1, r3
 800c92c:	4473      	add	r3, lr
 800c92e:	469e      	mov	lr, r3
 800c930:	460d      	mov	r5, r1
 800c932:	4565      	cmp	r5, ip
 800c934:	d30e      	bcc.n	800c954 <__mdiff+0xe8>
 800c936:	f10c 0203 	add.w	r2, ip, #3
 800c93a:	1a52      	subs	r2, r2, r1
 800c93c:	f022 0203 	bic.w	r2, r2, #3
 800c940:	3903      	subs	r1, #3
 800c942:	458c      	cmp	ip, r1
 800c944:	bf38      	it	cc
 800c946:	2200      	movcc	r2, #0
 800c948:	441a      	add	r2, r3
 800c94a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c94e:	b17b      	cbz	r3, 800c970 <__mdiff+0x104>
 800c950:	6106      	str	r6, [r0, #16]
 800c952:	e7a5      	b.n	800c8a0 <__mdiff+0x34>
 800c954:	f855 8b04 	ldr.w	r8, [r5], #4
 800c958:	fa17 f488 	uxtah	r4, r7, r8
 800c95c:	1422      	asrs	r2, r4, #16
 800c95e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c962:	b2a4      	uxth	r4, r4
 800c964:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c968:	f84e 4b04 	str.w	r4, [lr], #4
 800c96c:	1417      	asrs	r7, r2, #16
 800c96e:	e7e0      	b.n	800c932 <__mdiff+0xc6>
 800c970:	3e01      	subs	r6, #1
 800c972:	e7ea      	b.n	800c94a <__mdiff+0xde>
 800c974:	0800fea5 	.word	0x0800fea5
 800c978:	0800ff34 	.word	0x0800ff34

0800c97c <__ulp>:
 800c97c:	b082      	sub	sp, #8
 800c97e:	ed8d 0b00 	vstr	d0, [sp]
 800c982:	9b01      	ldr	r3, [sp, #4]
 800c984:	4912      	ldr	r1, [pc, #72]	; (800c9d0 <__ulp+0x54>)
 800c986:	4019      	ands	r1, r3
 800c988:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c98c:	2900      	cmp	r1, #0
 800c98e:	dd05      	ble.n	800c99c <__ulp+0x20>
 800c990:	2200      	movs	r2, #0
 800c992:	460b      	mov	r3, r1
 800c994:	ec43 2b10 	vmov	d0, r2, r3
 800c998:	b002      	add	sp, #8
 800c99a:	4770      	bx	lr
 800c99c:	4249      	negs	r1, r1
 800c99e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c9a2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c9a6:	f04f 0200 	mov.w	r2, #0
 800c9aa:	f04f 0300 	mov.w	r3, #0
 800c9ae:	da04      	bge.n	800c9ba <__ulp+0x3e>
 800c9b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c9b4:	fa41 f300 	asr.w	r3, r1, r0
 800c9b8:	e7ec      	b.n	800c994 <__ulp+0x18>
 800c9ba:	f1a0 0114 	sub.w	r1, r0, #20
 800c9be:	291e      	cmp	r1, #30
 800c9c0:	bfda      	itte	le
 800c9c2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c9c6:	fa20 f101 	lsrle.w	r1, r0, r1
 800c9ca:	2101      	movgt	r1, #1
 800c9cc:	460a      	mov	r2, r1
 800c9ce:	e7e1      	b.n	800c994 <__ulp+0x18>
 800c9d0:	7ff00000 	.word	0x7ff00000

0800c9d4 <__b2d>:
 800c9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d6:	6905      	ldr	r5, [r0, #16]
 800c9d8:	f100 0714 	add.w	r7, r0, #20
 800c9dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c9e0:	1f2e      	subs	r6, r5, #4
 800c9e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f7ff fd52 	bl	800c490 <__hi0bits>
 800c9ec:	f1c0 0320 	rsb	r3, r0, #32
 800c9f0:	280a      	cmp	r0, #10
 800c9f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ca70 <__b2d+0x9c>
 800c9f6:	600b      	str	r3, [r1, #0]
 800c9f8:	dc14      	bgt.n	800ca24 <__b2d+0x50>
 800c9fa:	f1c0 0e0b 	rsb	lr, r0, #11
 800c9fe:	fa24 f10e 	lsr.w	r1, r4, lr
 800ca02:	42b7      	cmp	r7, r6
 800ca04:	ea41 030c 	orr.w	r3, r1, ip
 800ca08:	bf34      	ite	cc
 800ca0a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca0e:	2100      	movcs	r1, #0
 800ca10:	3015      	adds	r0, #21
 800ca12:	fa04 f000 	lsl.w	r0, r4, r0
 800ca16:	fa21 f10e 	lsr.w	r1, r1, lr
 800ca1a:	ea40 0201 	orr.w	r2, r0, r1
 800ca1e:	ec43 2b10 	vmov	d0, r2, r3
 800ca22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca24:	42b7      	cmp	r7, r6
 800ca26:	bf3a      	itte	cc
 800ca28:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca2c:	f1a5 0608 	subcc.w	r6, r5, #8
 800ca30:	2100      	movcs	r1, #0
 800ca32:	380b      	subs	r0, #11
 800ca34:	d017      	beq.n	800ca66 <__b2d+0x92>
 800ca36:	f1c0 0c20 	rsb	ip, r0, #32
 800ca3a:	fa04 f500 	lsl.w	r5, r4, r0
 800ca3e:	42be      	cmp	r6, r7
 800ca40:	fa21 f40c 	lsr.w	r4, r1, ip
 800ca44:	ea45 0504 	orr.w	r5, r5, r4
 800ca48:	bf8c      	ite	hi
 800ca4a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ca4e:	2400      	movls	r4, #0
 800ca50:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ca54:	fa01 f000 	lsl.w	r0, r1, r0
 800ca58:	fa24 f40c 	lsr.w	r4, r4, ip
 800ca5c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ca60:	ea40 0204 	orr.w	r2, r0, r4
 800ca64:	e7db      	b.n	800ca1e <__b2d+0x4a>
 800ca66:	ea44 030c 	orr.w	r3, r4, ip
 800ca6a:	460a      	mov	r2, r1
 800ca6c:	e7d7      	b.n	800ca1e <__b2d+0x4a>
 800ca6e:	bf00      	nop
 800ca70:	3ff00000 	.word	0x3ff00000

0800ca74 <__d2b>:
 800ca74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca78:	4689      	mov	r9, r1
 800ca7a:	2101      	movs	r1, #1
 800ca7c:	ec57 6b10 	vmov	r6, r7, d0
 800ca80:	4690      	mov	r8, r2
 800ca82:	f7ff fc0f 	bl	800c2a4 <_Balloc>
 800ca86:	4604      	mov	r4, r0
 800ca88:	b930      	cbnz	r0, 800ca98 <__d2b+0x24>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	4b25      	ldr	r3, [pc, #148]	; (800cb24 <__d2b+0xb0>)
 800ca8e:	4826      	ldr	r0, [pc, #152]	; (800cb28 <__d2b+0xb4>)
 800ca90:	f240 310a 	movw	r1, #778	; 0x30a
 800ca94:	f7ff f84c 	bl	800bb30 <__assert_func>
 800ca98:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ca9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800caa0:	bb35      	cbnz	r5, 800caf0 <__d2b+0x7c>
 800caa2:	2e00      	cmp	r6, #0
 800caa4:	9301      	str	r3, [sp, #4]
 800caa6:	d028      	beq.n	800cafa <__d2b+0x86>
 800caa8:	4668      	mov	r0, sp
 800caaa:	9600      	str	r6, [sp, #0]
 800caac:	f7ff fd10 	bl	800c4d0 <__lo0bits>
 800cab0:	9900      	ldr	r1, [sp, #0]
 800cab2:	b300      	cbz	r0, 800caf6 <__d2b+0x82>
 800cab4:	9a01      	ldr	r2, [sp, #4]
 800cab6:	f1c0 0320 	rsb	r3, r0, #32
 800caba:	fa02 f303 	lsl.w	r3, r2, r3
 800cabe:	430b      	orrs	r3, r1
 800cac0:	40c2      	lsrs	r2, r0
 800cac2:	6163      	str	r3, [r4, #20]
 800cac4:	9201      	str	r2, [sp, #4]
 800cac6:	9b01      	ldr	r3, [sp, #4]
 800cac8:	61a3      	str	r3, [r4, #24]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	bf14      	ite	ne
 800cace:	2202      	movne	r2, #2
 800cad0:	2201      	moveq	r2, #1
 800cad2:	6122      	str	r2, [r4, #16]
 800cad4:	b1d5      	cbz	r5, 800cb0c <__d2b+0x98>
 800cad6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cada:	4405      	add	r5, r0
 800cadc:	f8c9 5000 	str.w	r5, [r9]
 800cae0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cae4:	f8c8 0000 	str.w	r0, [r8]
 800cae8:	4620      	mov	r0, r4
 800caea:	b003      	add	sp, #12
 800caec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800caf4:	e7d5      	b.n	800caa2 <__d2b+0x2e>
 800caf6:	6161      	str	r1, [r4, #20]
 800caf8:	e7e5      	b.n	800cac6 <__d2b+0x52>
 800cafa:	a801      	add	r0, sp, #4
 800cafc:	f7ff fce8 	bl	800c4d0 <__lo0bits>
 800cb00:	9b01      	ldr	r3, [sp, #4]
 800cb02:	6163      	str	r3, [r4, #20]
 800cb04:	2201      	movs	r2, #1
 800cb06:	6122      	str	r2, [r4, #16]
 800cb08:	3020      	adds	r0, #32
 800cb0a:	e7e3      	b.n	800cad4 <__d2b+0x60>
 800cb0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb14:	f8c9 0000 	str.w	r0, [r9]
 800cb18:	6918      	ldr	r0, [r3, #16]
 800cb1a:	f7ff fcb9 	bl	800c490 <__hi0bits>
 800cb1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb22:	e7df      	b.n	800cae4 <__d2b+0x70>
 800cb24:	0800fea5 	.word	0x0800fea5
 800cb28:	0800ff34 	.word	0x0800ff34

0800cb2c <__ratio>:
 800cb2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb30:	4688      	mov	r8, r1
 800cb32:	4669      	mov	r1, sp
 800cb34:	4681      	mov	r9, r0
 800cb36:	f7ff ff4d 	bl	800c9d4 <__b2d>
 800cb3a:	a901      	add	r1, sp, #4
 800cb3c:	4640      	mov	r0, r8
 800cb3e:	ec55 4b10 	vmov	r4, r5, d0
 800cb42:	f7ff ff47 	bl	800c9d4 <__b2d>
 800cb46:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb4a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cb4e:	eba3 0c02 	sub.w	ip, r3, r2
 800cb52:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cb56:	1a9b      	subs	r3, r3, r2
 800cb58:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cb5c:	ec51 0b10 	vmov	r0, r1, d0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	bfd6      	itet	le
 800cb64:	460a      	movle	r2, r1
 800cb66:	462a      	movgt	r2, r5
 800cb68:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cb6c:	468b      	mov	fp, r1
 800cb6e:	462f      	mov	r7, r5
 800cb70:	bfd4      	ite	le
 800cb72:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cb76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	ee10 2a10 	vmov	r2, s0
 800cb80:	465b      	mov	r3, fp
 800cb82:	4639      	mov	r1, r7
 800cb84:	f7f3 fe72 	bl	800086c <__aeabi_ddiv>
 800cb88:	ec41 0b10 	vmov	d0, r0, r1
 800cb8c:	b003      	add	sp, #12
 800cb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb92 <__copybits>:
 800cb92:	3901      	subs	r1, #1
 800cb94:	b570      	push	{r4, r5, r6, lr}
 800cb96:	1149      	asrs	r1, r1, #5
 800cb98:	6914      	ldr	r4, [r2, #16]
 800cb9a:	3101      	adds	r1, #1
 800cb9c:	f102 0314 	add.w	r3, r2, #20
 800cba0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cba4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cba8:	1f05      	subs	r5, r0, #4
 800cbaa:	42a3      	cmp	r3, r4
 800cbac:	d30c      	bcc.n	800cbc8 <__copybits+0x36>
 800cbae:	1aa3      	subs	r3, r4, r2
 800cbb0:	3b11      	subs	r3, #17
 800cbb2:	f023 0303 	bic.w	r3, r3, #3
 800cbb6:	3211      	adds	r2, #17
 800cbb8:	42a2      	cmp	r2, r4
 800cbba:	bf88      	it	hi
 800cbbc:	2300      	movhi	r3, #0
 800cbbe:	4418      	add	r0, r3
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	4288      	cmp	r0, r1
 800cbc4:	d305      	bcc.n	800cbd2 <__copybits+0x40>
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
 800cbc8:	f853 6b04 	ldr.w	r6, [r3], #4
 800cbcc:	f845 6f04 	str.w	r6, [r5, #4]!
 800cbd0:	e7eb      	b.n	800cbaa <__copybits+0x18>
 800cbd2:	f840 3b04 	str.w	r3, [r0], #4
 800cbd6:	e7f4      	b.n	800cbc2 <__copybits+0x30>

0800cbd8 <__any_on>:
 800cbd8:	f100 0214 	add.w	r2, r0, #20
 800cbdc:	6900      	ldr	r0, [r0, #16]
 800cbde:	114b      	asrs	r3, r1, #5
 800cbe0:	4298      	cmp	r0, r3
 800cbe2:	b510      	push	{r4, lr}
 800cbe4:	db11      	blt.n	800cc0a <__any_on+0x32>
 800cbe6:	dd0a      	ble.n	800cbfe <__any_on+0x26>
 800cbe8:	f011 011f 	ands.w	r1, r1, #31
 800cbec:	d007      	beq.n	800cbfe <__any_on+0x26>
 800cbee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cbf2:	fa24 f001 	lsr.w	r0, r4, r1
 800cbf6:	fa00 f101 	lsl.w	r1, r0, r1
 800cbfa:	428c      	cmp	r4, r1
 800cbfc:	d10b      	bne.n	800cc16 <__any_on+0x3e>
 800cbfe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d803      	bhi.n	800cc0e <__any_on+0x36>
 800cc06:	2000      	movs	r0, #0
 800cc08:	bd10      	pop	{r4, pc}
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	e7f7      	b.n	800cbfe <__any_on+0x26>
 800cc0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc12:	2900      	cmp	r1, #0
 800cc14:	d0f5      	beq.n	800cc02 <__any_on+0x2a>
 800cc16:	2001      	movs	r0, #1
 800cc18:	e7f6      	b.n	800cc08 <__any_on+0x30>

0800cc1a <_calloc_r>:
 800cc1a:	b513      	push	{r0, r1, r4, lr}
 800cc1c:	434a      	muls	r2, r1
 800cc1e:	4611      	mov	r1, r2
 800cc20:	9201      	str	r2, [sp, #4]
 800cc22:	f000 f859 	bl	800ccd8 <_malloc_r>
 800cc26:	4604      	mov	r4, r0
 800cc28:	b118      	cbz	r0, 800cc32 <_calloc_r+0x18>
 800cc2a:	9a01      	ldr	r2, [sp, #4]
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	f7fe f813 	bl	800ac58 <memset>
 800cc32:	4620      	mov	r0, r4
 800cc34:	b002      	add	sp, #8
 800cc36:	bd10      	pop	{r4, pc}

0800cc38 <_free_r>:
 800cc38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc3a:	2900      	cmp	r1, #0
 800cc3c:	d048      	beq.n	800ccd0 <_free_r+0x98>
 800cc3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc42:	9001      	str	r0, [sp, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	f1a1 0404 	sub.w	r4, r1, #4
 800cc4a:	bfb8      	it	lt
 800cc4c:	18e4      	addlt	r4, r4, r3
 800cc4e:	f001 f805 	bl	800dc5c <__malloc_lock>
 800cc52:	4a20      	ldr	r2, [pc, #128]	; (800ccd4 <_free_r+0x9c>)
 800cc54:	9801      	ldr	r0, [sp, #4]
 800cc56:	6813      	ldr	r3, [r2, #0]
 800cc58:	4615      	mov	r5, r2
 800cc5a:	b933      	cbnz	r3, 800cc6a <_free_r+0x32>
 800cc5c:	6063      	str	r3, [r4, #4]
 800cc5e:	6014      	str	r4, [r2, #0]
 800cc60:	b003      	add	sp, #12
 800cc62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc66:	f000 bfff 	b.w	800dc68 <__malloc_unlock>
 800cc6a:	42a3      	cmp	r3, r4
 800cc6c:	d90b      	bls.n	800cc86 <_free_r+0x4e>
 800cc6e:	6821      	ldr	r1, [r4, #0]
 800cc70:	1862      	adds	r2, r4, r1
 800cc72:	4293      	cmp	r3, r2
 800cc74:	bf04      	itt	eq
 800cc76:	681a      	ldreq	r2, [r3, #0]
 800cc78:	685b      	ldreq	r3, [r3, #4]
 800cc7a:	6063      	str	r3, [r4, #4]
 800cc7c:	bf04      	itt	eq
 800cc7e:	1852      	addeq	r2, r2, r1
 800cc80:	6022      	streq	r2, [r4, #0]
 800cc82:	602c      	str	r4, [r5, #0]
 800cc84:	e7ec      	b.n	800cc60 <_free_r+0x28>
 800cc86:	461a      	mov	r2, r3
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	b10b      	cbz	r3, 800cc90 <_free_r+0x58>
 800cc8c:	42a3      	cmp	r3, r4
 800cc8e:	d9fa      	bls.n	800cc86 <_free_r+0x4e>
 800cc90:	6811      	ldr	r1, [r2, #0]
 800cc92:	1855      	adds	r5, r2, r1
 800cc94:	42a5      	cmp	r5, r4
 800cc96:	d10b      	bne.n	800ccb0 <_free_r+0x78>
 800cc98:	6824      	ldr	r4, [r4, #0]
 800cc9a:	4421      	add	r1, r4
 800cc9c:	1854      	adds	r4, r2, r1
 800cc9e:	42a3      	cmp	r3, r4
 800cca0:	6011      	str	r1, [r2, #0]
 800cca2:	d1dd      	bne.n	800cc60 <_free_r+0x28>
 800cca4:	681c      	ldr	r4, [r3, #0]
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	6053      	str	r3, [r2, #4]
 800ccaa:	4421      	add	r1, r4
 800ccac:	6011      	str	r1, [r2, #0]
 800ccae:	e7d7      	b.n	800cc60 <_free_r+0x28>
 800ccb0:	d902      	bls.n	800ccb8 <_free_r+0x80>
 800ccb2:	230c      	movs	r3, #12
 800ccb4:	6003      	str	r3, [r0, #0]
 800ccb6:	e7d3      	b.n	800cc60 <_free_r+0x28>
 800ccb8:	6825      	ldr	r5, [r4, #0]
 800ccba:	1961      	adds	r1, r4, r5
 800ccbc:	428b      	cmp	r3, r1
 800ccbe:	bf04      	itt	eq
 800ccc0:	6819      	ldreq	r1, [r3, #0]
 800ccc2:	685b      	ldreq	r3, [r3, #4]
 800ccc4:	6063      	str	r3, [r4, #4]
 800ccc6:	bf04      	itt	eq
 800ccc8:	1949      	addeq	r1, r1, r5
 800ccca:	6021      	streq	r1, [r4, #0]
 800cccc:	6054      	str	r4, [r2, #4]
 800ccce:	e7c7      	b.n	800cc60 <_free_r+0x28>
 800ccd0:	b003      	add	sp, #12
 800ccd2:	bd30      	pop	{r4, r5, pc}
 800ccd4:	200002d8 	.word	0x200002d8

0800ccd8 <_malloc_r>:
 800ccd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccda:	1ccd      	adds	r5, r1, #3
 800ccdc:	f025 0503 	bic.w	r5, r5, #3
 800cce0:	3508      	adds	r5, #8
 800cce2:	2d0c      	cmp	r5, #12
 800cce4:	bf38      	it	cc
 800cce6:	250c      	movcc	r5, #12
 800cce8:	2d00      	cmp	r5, #0
 800ccea:	4606      	mov	r6, r0
 800ccec:	db01      	blt.n	800ccf2 <_malloc_r+0x1a>
 800ccee:	42a9      	cmp	r1, r5
 800ccf0:	d903      	bls.n	800ccfa <_malloc_r+0x22>
 800ccf2:	230c      	movs	r3, #12
 800ccf4:	6033      	str	r3, [r6, #0]
 800ccf6:	2000      	movs	r0, #0
 800ccf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccfa:	f000 ffaf 	bl	800dc5c <__malloc_lock>
 800ccfe:	4921      	ldr	r1, [pc, #132]	; (800cd84 <_malloc_r+0xac>)
 800cd00:	680a      	ldr	r2, [r1, #0]
 800cd02:	4614      	mov	r4, r2
 800cd04:	b99c      	cbnz	r4, 800cd2e <_malloc_r+0x56>
 800cd06:	4f20      	ldr	r7, [pc, #128]	; (800cd88 <_malloc_r+0xb0>)
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	b923      	cbnz	r3, 800cd16 <_malloc_r+0x3e>
 800cd0c:	4621      	mov	r1, r4
 800cd0e:	4630      	mov	r0, r6
 800cd10:	f000 fc8e 	bl	800d630 <_sbrk_r>
 800cd14:	6038      	str	r0, [r7, #0]
 800cd16:	4629      	mov	r1, r5
 800cd18:	4630      	mov	r0, r6
 800cd1a:	f000 fc89 	bl	800d630 <_sbrk_r>
 800cd1e:	1c43      	adds	r3, r0, #1
 800cd20:	d123      	bne.n	800cd6a <_malloc_r+0x92>
 800cd22:	230c      	movs	r3, #12
 800cd24:	6033      	str	r3, [r6, #0]
 800cd26:	4630      	mov	r0, r6
 800cd28:	f000 ff9e 	bl	800dc68 <__malloc_unlock>
 800cd2c:	e7e3      	b.n	800ccf6 <_malloc_r+0x1e>
 800cd2e:	6823      	ldr	r3, [r4, #0]
 800cd30:	1b5b      	subs	r3, r3, r5
 800cd32:	d417      	bmi.n	800cd64 <_malloc_r+0x8c>
 800cd34:	2b0b      	cmp	r3, #11
 800cd36:	d903      	bls.n	800cd40 <_malloc_r+0x68>
 800cd38:	6023      	str	r3, [r4, #0]
 800cd3a:	441c      	add	r4, r3
 800cd3c:	6025      	str	r5, [r4, #0]
 800cd3e:	e004      	b.n	800cd4a <_malloc_r+0x72>
 800cd40:	6863      	ldr	r3, [r4, #4]
 800cd42:	42a2      	cmp	r2, r4
 800cd44:	bf0c      	ite	eq
 800cd46:	600b      	streq	r3, [r1, #0]
 800cd48:	6053      	strne	r3, [r2, #4]
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	f000 ff8c 	bl	800dc68 <__malloc_unlock>
 800cd50:	f104 000b 	add.w	r0, r4, #11
 800cd54:	1d23      	adds	r3, r4, #4
 800cd56:	f020 0007 	bic.w	r0, r0, #7
 800cd5a:	1ac2      	subs	r2, r0, r3
 800cd5c:	d0cc      	beq.n	800ccf8 <_malloc_r+0x20>
 800cd5e:	1a1b      	subs	r3, r3, r0
 800cd60:	50a3      	str	r3, [r4, r2]
 800cd62:	e7c9      	b.n	800ccf8 <_malloc_r+0x20>
 800cd64:	4622      	mov	r2, r4
 800cd66:	6864      	ldr	r4, [r4, #4]
 800cd68:	e7cc      	b.n	800cd04 <_malloc_r+0x2c>
 800cd6a:	1cc4      	adds	r4, r0, #3
 800cd6c:	f024 0403 	bic.w	r4, r4, #3
 800cd70:	42a0      	cmp	r0, r4
 800cd72:	d0e3      	beq.n	800cd3c <_malloc_r+0x64>
 800cd74:	1a21      	subs	r1, r4, r0
 800cd76:	4630      	mov	r0, r6
 800cd78:	f000 fc5a 	bl	800d630 <_sbrk_r>
 800cd7c:	3001      	adds	r0, #1
 800cd7e:	d1dd      	bne.n	800cd3c <_malloc_r+0x64>
 800cd80:	e7cf      	b.n	800cd22 <_malloc_r+0x4a>
 800cd82:	bf00      	nop
 800cd84:	200002d8 	.word	0x200002d8
 800cd88:	200002dc 	.word	0x200002dc

0800cd8c <__ssputs_r>:
 800cd8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd90:	688e      	ldr	r6, [r1, #8]
 800cd92:	429e      	cmp	r6, r3
 800cd94:	4682      	mov	sl, r0
 800cd96:	460c      	mov	r4, r1
 800cd98:	4690      	mov	r8, r2
 800cd9a:	461f      	mov	r7, r3
 800cd9c:	d838      	bhi.n	800ce10 <__ssputs_r+0x84>
 800cd9e:	898a      	ldrh	r2, [r1, #12]
 800cda0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cda4:	d032      	beq.n	800ce0c <__ssputs_r+0x80>
 800cda6:	6825      	ldr	r5, [r4, #0]
 800cda8:	6909      	ldr	r1, [r1, #16]
 800cdaa:	eba5 0901 	sub.w	r9, r5, r1
 800cdae:	6965      	ldr	r5, [r4, #20]
 800cdb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdb8:	3301      	adds	r3, #1
 800cdba:	444b      	add	r3, r9
 800cdbc:	106d      	asrs	r5, r5, #1
 800cdbe:	429d      	cmp	r5, r3
 800cdc0:	bf38      	it	cc
 800cdc2:	461d      	movcc	r5, r3
 800cdc4:	0553      	lsls	r3, r2, #21
 800cdc6:	d531      	bpl.n	800ce2c <__ssputs_r+0xa0>
 800cdc8:	4629      	mov	r1, r5
 800cdca:	f7ff ff85 	bl	800ccd8 <_malloc_r>
 800cdce:	4606      	mov	r6, r0
 800cdd0:	b950      	cbnz	r0, 800cde8 <__ssputs_r+0x5c>
 800cdd2:	230c      	movs	r3, #12
 800cdd4:	f8ca 3000 	str.w	r3, [sl]
 800cdd8:	89a3      	ldrh	r3, [r4, #12]
 800cdda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdde:	81a3      	strh	r3, [r4, #12]
 800cde0:	f04f 30ff 	mov.w	r0, #4294967295
 800cde4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cde8:	6921      	ldr	r1, [r4, #16]
 800cdea:	464a      	mov	r2, r9
 800cdec:	f7fd ff0c 	bl	800ac08 <memcpy>
 800cdf0:	89a3      	ldrh	r3, [r4, #12]
 800cdf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdfa:	81a3      	strh	r3, [r4, #12]
 800cdfc:	6126      	str	r6, [r4, #16]
 800cdfe:	6165      	str	r5, [r4, #20]
 800ce00:	444e      	add	r6, r9
 800ce02:	eba5 0509 	sub.w	r5, r5, r9
 800ce06:	6026      	str	r6, [r4, #0]
 800ce08:	60a5      	str	r5, [r4, #8]
 800ce0a:	463e      	mov	r6, r7
 800ce0c:	42be      	cmp	r6, r7
 800ce0e:	d900      	bls.n	800ce12 <__ssputs_r+0x86>
 800ce10:	463e      	mov	r6, r7
 800ce12:	4632      	mov	r2, r6
 800ce14:	6820      	ldr	r0, [r4, #0]
 800ce16:	4641      	mov	r1, r8
 800ce18:	f7fd ff04 	bl	800ac24 <memmove>
 800ce1c:	68a3      	ldr	r3, [r4, #8]
 800ce1e:	6822      	ldr	r2, [r4, #0]
 800ce20:	1b9b      	subs	r3, r3, r6
 800ce22:	4432      	add	r2, r6
 800ce24:	60a3      	str	r3, [r4, #8]
 800ce26:	6022      	str	r2, [r4, #0]
 800ce28:	2000      	movs	r0, #0
 800ce2a:	e7db      	b.n	800cde4 <__ssputs_r+0x58>
 800ce2c:	462a      	mov	r2, r5
 800ce2e:	f000 ff21 	bl	800dc74 <_realloc_r>
 800ce32:	4606      	mov	r6, r0
 800ce34:	2800      	cmp	r0, #0
 800ce36:	d1e1      	bne.n	800cdfc <__ssputs_r+0x70>
 800ce38:	6921      	ldr	r1, [r4, #16]
 800ce3a:	4650      	mov	r0, sl
 800ce3c:	f7ff fefc 	bl	800cc38 <_free_r>
 800ce40:	e7c7      	b.n	800cdd2 <__ssputs_r+0x46>
	...

0800ce44 <_svfiprintf_r>:
 800ce44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce48:	4698      	mov	r8, r3
 800ce4a:	898b      	ldrh	r3, [r1, #12]
 800ce4c:	061b      	lsls	r3, r3, #24
 800ce4e:	b09d      	sub	sp, #116	; 0x74
 800ce50:	4607      	mov	r7, r0
 800ce52:	460d      	mov	r5, r1
 800ce54:	4614      	mov	r4, r2
 800ce56:	d50e      	bpl.n	800ce76 <_svfiprintf_r+0x32>
 800ce58:	690b      	ldr	r3, [r1, #16]
 800ce5a:	b963      	cbnz	r3, 800ce76 <_svfiprintf_r+0x32>
 800ce5c:	2140      	movs	r1, #64	; 0x40
 800ce5e:	f7ff ff3b 	bl	800ccd8 <_malloc_r>
 800ce62:	6028      	str	r0, [r5, #0]
 800ce64:	6128      	str	r0, [r5, #16]
 800ce66:	b920      	cbnz	r0, 800ce72 <_svfiprintf_r+0x2e>
 800ce68:	230c      	movs	r3, #12
 800ce6a:	603b      	str	r3, [r7, #0]
 800ce6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce70:	e0d1      	b.n	800d016 <_svfiprintf_r+0x1d2>
 800ce72:	2340      	movs	r3, #64	; 0x40
 800ce74:	616b      	str	r3, [r5, #20]
 800ce76:	2300      	movs	r3, #0
 800ce78:	9309      	str	r3, [sp, #36]	; 0x24
 800ce7a:	2320      	movs	r3, #32
 800ce7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce80:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce84:	2330      	movs	r3, #48	; 0x30
 800ce86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d030 <_svfiprintf_r+0x1ec>
 800ce8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce8e:	f04f 0901 	mov.w	r9, #1
 800ce92:	4623      	mov	r3, r4
 800ce94:	469a      	mov	sl, r3
 800ce96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce9a:	b10a      	cbz	r2, 800cea0 <_svfiprintf_r+0x5c>
 800ce9c:	2a25      	cmp	r2, #37	; 0x25
 800ce9e:	d1f9      	bne.n	800ce94 <_svfiprintf_r+0x50>
 800cea0:	ebba 0b04 	subs.w	fp, sl, r4
 800cea4:	d00b      	beq.n	800cebe <_svfiprintf_r+0x7a>
 800cea6:	465b      	mov	r3, fp
 800cea8:	4622      	mov	r2, r4
 800ceaa:	4629      	mov	r1, r5
 800ceac:	4638      	mov	r0, r7
 800ceae:	f7ff ff6d 	bl	800cd8c <__ssputs_r>
 800ceb2:	3001      	adds	r0, #1
 800ceb4:	f000 80aa 	beq.w	800d00c <_svfiprintf_r+0x1c8>
 800ceb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ceba:	445a      	add	r2, fp
 800cebc:	9209      	str	r2, [sp, #36]	; 0x24
 800cebe:	f89a 3000 	ldrb.w	r3, [sl]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f000 80a2 	beq.w	800d00c <_svfiprintf_r+0x1c8>
 800cec8:	2300      	movs	r3, #0
 800ceca:	f04f 32ff 	mov.w	r2, #4294967295
 800cece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ced2:	f10a 0a01 	add.w	sl, sl, #1
 800ced6:	9304      	str	r3, [sp, #16]
 800ced8:	9307      	str	r3, [sp, #28]
 800ceda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cede:	931a      	str	r3, [sp, #104]	; 0x68
 800cee0:	4654      	mov	r4, sl
 800cee2:	2205      	movs	r2, #5
 800cee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cee8:	4851      	ldr	r0, [pc, #324]	; (800d030 <_svfiprintf_r+0x1ec>)
 800ceea:	f7f3 f989 	bl	8000200 <memchr>
 800ceee:	9a04      	ldr	r2, [sp, #16]
 800cef0:	b9d8      	cbnz	r0, 800cf2a <_svfiprintf_r+0xe6>
 800cef2:	06d0      	lsls	r0, r2, #27
 800cef4:	bf44      	itt	mi
 800cef6:	2320      	movmi	r3, #32
 800cef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cefc:	0711      	lsls	r1, r2, #28
 800cefe:	bf44      	itt	mi
 800cf00:	232b      	movmi	r3, #43	; 0x2b
 800cf02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf06:	f89a 3000 	ldrb.w	r3, [sl]
 800cf0a:	2b2a      	cmp	r3, #42	; 0x2a
 800cf0c:	d015      	beq.n	800cf3a <_svfiprintf_r+0xf6>
 800cf0e:	9a07      	ldr	r2, [sp, #28]
 800cf10:	4654      	mov	r4, sl
 800cf12:	2000      	movs	r0, #0
 800cf14:	f04f 0c0a 	mov.w	ip, #10
 800cf18:	4621      	mov	r1, r4
 800cf1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf1e:	3b30      	subs	r3, #48	; 0x30
 800cf20:	2b09      	cmp	r3, #9
 800cf22:	d94e      	bls.n	800cfc2 <_svfiprintf_r+0x17e>
 800cf24:	b1b0      	cbz	r0, 800cf54 <_svfiprintf_r+0x110>
 800cf26:	9207      	str	r2, [sp, #28]
 800cf28:	e014      	b.n	800cf54 <_svfiprintf_r+0x110>
 800cf2a:	eba0 0308 	sub.w	r3, r0, r8
 800cf2e:	fa09 f303 	lsl.w	r3, r9, r3
 800cf32:	4313      	orrs	r3, r2
 800cf34:	9304      	str	r3, [sp, #16]
 800cf36:	46a2      	mov	sl, r4
 800cf38:	e7d2      	b.n	800cee0 <_svfiprintf_r+0x9c>
 800cf3a:	9b03      	ldr	r3, [sp, #12]
 800cf3c:	1d19      	adds	r1, r3, #4
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	9103      	str	r1, [sp, #12]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	bfbb      	ittet	lt
 800cf46:	425b      	neglt	r3, r3
 800cf48:	f042 0202 	orrlt.w	r2, r2, #2
 800cf4c:	9307      	strge	r3, [sp, #28]
 800cf4e:	9307      	strlt	r3, [sp, #28]
 800cf50:	bfb8      	it	lt
 800cf52:	9204      	strlt	r2, [sp, #16]
 800cf54:	7823      	ldrb	r3, [r4, #0]
 800cf56:	2b2e      	cmp	r3, #46	; 0x2e
 800cf58:	d10c      	bne.n	800cf74 <_svfiprintf_r+0x130>
 800cf5a:	7863      	ldrb	r3, [r4, #1]
 800cf5c:	2b2a      	cmp	r3, #42	; 0x2a
 800cf5e:	d135      	bne.n	800cfcc <_svfiprintf_r+0x188>
 800cf60:	9b03      	ldr	r3, [sp, #12]
 800cf62:	1d1a      	adds	r2, r3, #4
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	9203      	str	r2, [sp, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	bfb8      	it	lt
 800cf6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf70:	3402      	adds	r4, #2
 800cf72:	9305      	str	r3, [sp, #20]
 800cf74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d040 <_svfiprintf_r+0x1fc>
 800cf78:	7821      	ldrb	r1, [r4, #0]
 800cf7a:	2203      	movs	r2, #3
 800cf7c:	4650      	mov	r0, sl
 800cf7e:	f7f3 f93f 	bl	8000200 <memchr>
 800cf82:	b140      	cbz	r0, 800cf96 <_svfiprintf_r+0x152>
 800cf84:	2340      	movs	r3, #64	; 0x40
 800cf86:	eba0 000a 	sub.w	r0, r0, sl
 800cf8a:	fa03 f000 	lsl.w	r0, r3, r0
 800cf8e:	9b04      	ldr	r3, [sp, #16]
 800cf90:	4303      	orrs	r3, r0
 800cf92:	3401      	adds	r4, #1
 800cf94:	9304      	str	r3, [sp, #16]
 800cf96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf9a:	4826      	ldr	r0, [pc, #152]	; (800d034 <_svfiprintf_r+0x1f0>)
 800cf9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfa0:	2206      	movs	r2, #6
 800cfa2:	f7f3 f92d 	bl	8000200 <memchr>
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	d038      	beq.n	800d01c <_svfiprintf_r+0x1d8>
 800cfaa:	4b23      	ldr	r3, [pc, #140]	; (800d038 <_svfiprintf_r+0x1f4>)
 800cfac:	bb1b      	cbnz	r3, 800cff6 <_svfiprintf_r+0x1b2>
 800cfae:	9b03      	ldr	r3, [sp, #12]
 800cfb0:	3307      	adds	r3, #7
 800cfb2:	f023 0307 	bic.w	r3, r3, #7
 800cfb6:	3308      	adds	r3, #8
 800cfb8:	9303      	str	r3, [sp, #12]
 800cfba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfbc:	4433      	add	r3, r6
 800cfbe:	9309      	str	r3, [sp, #36]	; 0x24
 800cfc0:	e767      	b.n	800ce92 <_svfiprintf_r+0x4e>
 800cfc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfc6:	460c      	mov	r4, r1
 800cfc8:	2001      	movs	r0, #1
 800cfca:	e7a5      	b.n	800cf18 <_svfiprintf_r+0xd4>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	3401      	adds	r4, #1
 800cfd0:	9305      	str	r3, [sp, #20]
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	f04f 0c0a 	mov.w	ip, #10
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfde:	3a30      	subs	r2, #48	; 0x30
 800cfe0:	2a09      	cmp	r2, #9
 800cfe2:	d903      	bls.n	800cfec <_svfiprintf_r+0x1a8>
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d0c5      	beq.n	800cf74 <_svfiprintf_r+0x130>
 800cfe8:	9105      	str	r1, [sp, #20]
 800cfea:	e7c3      	b.n	800cf74 <_svfiprintf_r+0x130>
 800cfec:	fb0c 2101 	mla	r1, ip, r1, r2
 800cff0:	4604      	mov	r4, r0
 800cff2:	2301      	movs	r3, #1
 800cff4:	e7f0      	b.n	800cfd8 <_svfiprintf_r+0x194>
 800cff6:	ab03      	add	r3, sp, #12
 800cff8:	9300      	str	r3, [sp, #0]
 800cffa:	462a      	mov	r2, r5
 800cffc:	4b0f      	ldr	r3, [pc, #60]	; (800d03c <_svfiprintf_r+0x1f8>)
 800cffe:	a904      	add	r1, sp, #16
 800d000:	4638      	mov	r0, r7
 800d002:	f3af 8000 	nop.w
 800d006:	1c42      	adds	r2, r0, #1
 800d008:	4606      	mov	r6, r0
 800d00a:	d1d6      	bne.n	800cfba <_svfiprintf_r+0x176>
 800d00c:	89ab      	ldrh	r3, [r5, #12]
 800d00e:	065b      	lsls	r3, r3, #25
 800d010:	f53f af2c 	bmi.w	800ce6c <_svfiprintf_r+0x28>
 800d014:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d016:	b01d      	add	sp, #116	; 0x74
 800d018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d01c:	ab03      	add	r3, sp, #12
 800d01e:	9300      	str	r3, [sp, #0]
 800d020:	462a      	mov	r2, r5
 800d022:	4b06      	ldr	r3, [pc, #24]	; (800d03c <_svfiprintf_r+0x1f8>)
 800d024:	a904      	add	r1, sp, #16
 800d026:	4638      	mov	r0, r7
 800d028:	f000 f9d4 	bl	800d3d4 <_printf_i>
 800d02c:	e7eb      	b.n	800d006 <_svfiprintf_r+0x1c2>
 800d02e:	bf00      	nop
 800d030:	08010094 	.word	0x08010094
 800d034:	0801009e 	.word	0x0801009e
 800d038:	00000000 	.word	0x00000000
 800d03c:	0800cd8d 	.word	0x0800cd8d
 800d040:	0801009a 	.word	0x0801009a

0800d044 <__sfputc_r>:
 800d044:	6893      	ldr	r3, [r2, #8]
 800d046:	3b01      	subs	r3, #1
 800d048:	2b00      	cmp	r3, #0
 800d04a:	b410      	push	{r4}
 800d04c:	6093      	str	r3, [r2, #8]
 800d04e:	da08      	bge.n	800d062 <__sfputc_r+0x1e>
 800d050:	6994      	ldr	r4, [r2, #24]
 800d052:	42a3      	cmp	r3, r4
 800d054:	db01      	blt.n	800d05a <__sfputc_r+0x16>
 800d056:	290a      	cmp	r1, #10
 800d058:	d103      	bne.n	800d062 <__sfputc_r+0x1e>
 800d05a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d05e:	f000 bb09 	b.w	800d674 <__swbuf_r>
 800d062:	6813      	ldr	r3, [r2, #0]
 800d064:	1c58      	adds	r0, r3, #1
 800d066:	6010      	str	r0, [r2, #0]
 800d068:	7019      	strb	r1, [r3, #0]
 800d06a:	4608      	mov	r0, r1
 800d06c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d070:	4770      	bx	lr

0800d072 <__sfputs_r>:
 800d072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d074:	4606      	mov	r6, r0
 800d076:	460f      	mov	r7, r1
 800d078:	4614      	mov	r4, r2
 800d07a:	18d5      	adds	r5, r2, r3
 800d07c:	42ac      	cmp	r4, r5
 800d07e:	d101      	bne.n	800d084 <__sfputs_r+0x12>
 800d080:	2000      	movs	r0, #0
 800d082:	e007      	b.n	800d094 <__sfputs_r+0x22>
 800d084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d088:	463a      	mov	r2, r7
 800d08a:	4630      	mov	r0, r6
 800d08c:	f7ff ffda 	bl	800d044 <__sfputc_r>
 800d090:	1c43      	adds	r3, r0, #1
 800d092:	d1f3      	bne.n	800d07c <__sfputs_r+0xa>
 800d094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d098 <_vfiprintf_r>:
 800d098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09c:	460d      	mov	r5, r1
 800d09e:	b09d      	sub	sp, #116	; 0x74
 800d0a0:	4614      	mov	r4, r2
 800d0a2:	4698      	mov	r8, r3
 800d0a4:	4606      	mov	r6, r0
 800d0a6:	b118      	cbz	r0, 800d0b0 <_vfiprintf_r+0x18>
 800d0a8:	6983      	ldr	r3, [r0, #24]
 800d0aa:	b90b      	cbnz	r3, 800d0b0 <_vfiprintf_r+0x18>
 800d0ac:	f000 fcd2 	bl	800da54 <__sinit>
 800d0b0:	4b89      	ldr	r3, [pc, #548]	; (800d2d8 <_vfiprintf_r+0x240>)
 800d0b2:	429d      	cmp	r5, r3
 800d0b4:	d11b      	bne.n	800d0ee <_vfiprintf_r+0x56>
 800d0b6:	6875      	ldr	r5, [r6, #4]
 800d0b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0ba:	07d9      	lsls	r1, r3, #31
 800d0bc:	d405      	bmi.n	800d0ca <_vfiprintf_r+0x32>
 800d0be:	89ab      	ldrh	r3, [r5, #12]
 800d0c0:	059a      	lsls	r2, r3, #22
 800d0c2:	d402      	bmi.n	800d0ca <_vfiprintf_r+0x32>
 800d0c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0c6:	f000 fd63 	bl	800db90 <__retarget_lock_acquire_recursive>
 800d0ca:	89ab      	ldrh	r3, [r5, #12]
 800d0cc:	071b      	lsls	r3, r3, #28
 800d0ce:	d501      	bpl.n	800d0d4 <_vfiprintf_r+0x3c>
 800d0d0:	692b      	ldr	r3, [r5, #16]
 800d0d2:	b9eb      	cbnz	r3, 800d110 <_vfiprintf_r+0x78>
 800d0d4:	4629      	mov	r1, r5
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	f000 fb2c 	bl	800d734 <__swsetup_r>
 800d0dc:	b1c0      	cbz	r0, 800d110 <_vfiprintf_r+0x78>
 800d0de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0e0:	07dc      	lsls	r4, r3, #31
 800d0e2:	d50e      	bpl.n	800d102 <_vfiprintf_r+0x6a>
 800d0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e8:	b01d      	add	sp, #116	; 0x74
 800d0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ee:	4b7b      	ldr	r3, [pc, #492]	; (800d2dc <_vfiprintf_r+0x244>)
 800d0f0:	429d      	cmp	r5, r3
 800d0f2:	d101      	bne.n	800d0f8 <_vfiprintf_r+0x60>
 800d0f4:	68b5      	ldr	r5, [r6, #8]
 800d0f6:	e7df      	b.n	800d0b8 <_vfiprintf_r+0x20>
 800d0f8:	4b79      	ldr	r3, [pc, #484]	; (800d2e0 <_vfiprintf_r+0x248>)
 800d0fa:	429d      	cmp	r5, r3
 800d0fc:	bf08      	it	eq
 800d0fe:	68f5      	ldreq	r5, [r6, #12]
 800d100:	e7da      	b.n	800d0b8 <_vfiprintf_r+0x20>
 800d102:	89ab      	ldrh	r3, [r5, #12]
 800d104:	0598      	lsls	r0, r3, #22
 800d106:	d4ed      	bmi.n	800d0e4 <_vfiprintf_r+0x4c>
 800d108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d10a:	f000 fd42 	bl	800db92 <__retarget_lock_release_recursive>
 800d10e:	e7e9      	b.n	800d0e4 <_vfiprintf_r+0x4c>
 800d110:	2300      	movs	r3, #0
 800d112:	9309      	str	r3, [sp, #36]	; 0x24
 800d114:	2320      	movs	r3, #32
 800d116:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d11a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d11e:	2330      	movs	r3, #48	; 0x30
 800d120:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d2e4 <_vfiprintf_r+0x24c>
 800d124:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d128:	f04f 0901 	mov.w	r9, #1
 800d12c:	4623      	mov	r3, r4
 800d12e:	469a      	mov	sl, r3
 800d130:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d134:	b10a      	cbz	r2, 800d13a <_vfiprintf_r+0xa2>
 800d136:	2a25      	cmp	r2, #37	; 0x25
 800d138:	d1f9      	bne.n	800d12e <_vfiprintf_r+0x96>
 800d13a:	ebba 0b04 	subs.w	fp, sl, r4
 800d13e:	d00b      	beq.n	800d158 <_vfiprintf_r+0xc0>
 800d140:	465b      	mov	r3, fp
 800d142:	4622      	mov	r2, r4
 800d144:	4629      	mov	r1, r5
 800d146:	4630      	mov	r0, r6
 800d148:	f7ff ff93 	bl	800d072 <__sfputs_r>
 800d14c:	3001      	adds	r0, #1
 800d14e:	f000 80aa 	beq.w	800d2a6 <_vfiprintf_r+0x20e>
 800d152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d154:	445a      	add	r2, fp
 800d156:	9209      	str	r2, [sp, #36]	; 0x24
 800d158:	f89a 3000 	ldrb.w	r3, [sl]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f000 80a2 	beq.w	800d2a6 <_vfiprintf_r+0x20e>
 800d162:	2300      	movs	r3, #0
 800d164:	f04f 32ff 	mov.w	r2, #4294967295
 800d168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d16c:	f10a 0a01 	add.w	sl, sl, #1
 800d170:	9304      	str	r3, [sp, #16]
 800d172:	9307      	str	r3, [sp, #28]
 800d174:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d178:	931a      	str	r3, [sp, #104]	; 0x68
 800d17a:	4654      	mov	r4, sl
 800d17c:	2205      	movs	r2, #5
 800d17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d182:	4858      	ldr	r0, [pc, #352]	; (800d2e4 <_vfiprintf_r+0x24c>)
 800d184:	f7f3 f83c 	bl	8000200 <memchr>
 800d188:	9a04      	ldr	r2, [sp, #16]
 800d18a:	b9d8      	cbnz	r0, 800d1c4 <_vfiprintf_r+0x12c>
 800d18c:	06d1      	lsls	r1, r2, #27
 800d18e:	bf44      	itt	mi
 800d190:	2320      	movmi	r3, #32
 800d192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d196:	0713      	lsls	r3, r2, #28
 800d198:	bf44      	itt	mi
 800d19a:	232b      	movmi	r3, #43	; 0x2b
 800d19c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d1a4:	2b2a      	cmp	r3, #42	; 0x2a
 800d1a6:	d015      	beq.n	800d1d4 <_vfiprintf_r+0x13c>
 800d1a8:	9a07      	ldr	r2, [sp, #28]
 800d1aa:	4654      	mov	r4, sl
 800d1ac:	2000      	movs	r0, #0
 800d1ae:	f04f 0c0a 	mov.w	ip, #10
 800d1b2:	4621      	mov	r1, r4
 800d1b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1b8:	3b30      	subs	r3, #48	; 0x30
 800d1ba:	2b09      	cmp	r3, #9
 800d1bc:	d94e      	bls.n	800d25c <_vfiprintf_r+0x1c4>
 800d1be:	b1b0      	cbz	r0, 800d1ee <_vfiprintf_r+0x156>
 800d1c0:	9207      	str	r2, [sp, #28]
 800d1c2:	e014      	b.n	800d1ee <_vfiprintf_r+0x156>
 800d1c4:	eba0 0308 	sub.w	r3, r0, r8
 800d1c8:	fa09 f303 	lsl.w	r3, r9, r3
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	9304      	str	r3, [sp, #16]
 800d1d0:	46a2      	mov	sl, r4
 800d1d2:	e7d2      	b.n	800d17a <_vfiprintf_r+0xe2>
 800d1d4:	9b03      	ldr	r3, [sp, #12]
 800d1d6:	1d19      	adds	r1, r3, #4
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	9103      	str	r1, [sp, #12]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	bfbb      	ittet	lt
 800d1e0:	425b      	neglt	r3, r3
 800d1e2:	f042 0202 	orrlt.w	r2, r2, #2
 800d1e6:	9307      	strge	r3, [sp, #28]
 800d1e8:	9307      	strlt	r3, [sp, #28]
 800d1ea:	bfb8      	it	lt
 800d1ec:	9204      	strlt	r2, [sp, #16]
 800d1ee:	7823      	ldrb	r3, [r4, #0]
 800d1f0:	2b2e      	cmp	r3, #46	; 0x2e
 800d1f2:	d10c      	bne.n	800d20e <_vfiprintf_r+0x176>
 800d1f4:	7863      	ldrb	r3, [r4, #1]
 800d1f6:	2b2a      	cmp	r3, #42	; 0x2a
 800d1f8:	d135      	bne.n	800d266 <_vfiprintf_r+0x1ce>
 800d1fa:	9b03      	ldr	r3, [sp, #12]
 800d1fc:	1d1a      	adds	r2, r3, #4
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	9203      	str	r2, [sp, #12]
 800d202:	2b00      	cmp	r3, #0
 800d204:	bfb8      	it	lt
 800d206:	f04f 33ff 	movlt.w	r3, #4294967295
 800d20a:	3402      	adds	r4, #2
 800d20c:	9305      	str	r3, [sp, #20]
 800d20e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d2f4 <_vfiprintf_r+0x25c>
 800d212:	7821      	ldrb	r1, [r4, #0]
 800d214:	2203      	movs	r2, #3
 800d216:	4650      	mov	r0, sl
 800d218:	f7f2 fff2 	bl	8000200 <memchr>
 800d21c:	b140      	cbz	r0, 800d230 <_vfiprintf_r+0x198>
 800d21e:	2340      	movs	r3, #64	; 0x40
 800d220:	eba0 000a 	sub.w	r0, r0, sl
 800d224:	fa03 f000 	lsl.w	r0, r3, r0
 800d228:	9b04      	ldr	r3, [sp, #16]
 800d22a:	4303      	orrs	r3, r0
 800d22c:	3401      	adds	r4, #1
 800d22e:	9304      	str	r3, [sp, #16]
 800d230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d234:	482c      	ldr	r0, [pc, #176]	; (800d2e8 <_vfiprintf_r+0x250>)
 800d236:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d23a:	2206      	movs	r2, #6
 800d23c:	f7f2 ffe0 	bl	8000200 <memchr>
 800d240:	2800      	cmp	r0, #0
 800d242:	d03f      	beq.n	800d2c4 <_vfiprintf_r+0x22c>
 800d244:	4b29      	ldr	r3, [pc, #164]	; (800d2ec <_vfiprintf_r+0x254>)
 800d246:	bb1b      	cbnz	r3, 800d290 <_vfiprintf_r+0x1f8>
 800d248:	9b03      	ldr	r3, [sp, #12]
 800d24a:	3307      	adds	r3, #7
 800d24c:	f023 0307 	bic.w	r3, r3, #7
 800d250:	3308      	adds	r3, #8
 800d252:	9303      	str	r3, [sp, #12]
 800d254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d256:	443b      	add	r3, r7
 800d258:	9309      	str	r3, [sp, #36]	; 0x24
 800d25a:	e767      	b.n	800d12c <_vfiprintf_r+0x94>
 800d25c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d260:	460c      	mov	r4, r1
 800d262:	2001      	movs	r0, #1
 800d264:	e7a5      	b.n	800d1b2 <_vfiprintf_r+0x11a>
 800d266:	2300      	movs	r3, #0
 800d268:	3401      	adds	r4, #1
 800d26a:	9305      	str	r3, [sp, #20]
 800d26c:	4619      	mov	r1, r3
 800d26e:	f04f 0c0a 	mov.w	ip, #10
 800d272:	4620      	mov	r0, r4
 800d274:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d278:	3a30      	subs	r2, #48	; 0x30
 800d27a:	2a09      	cmp	r2, #9
 800d27c:	d903      	bls.n	800d286 <_vfiprintf_r+0x1ee>
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0c5      	beq.n	800d20e <_vfiprintf_r+0x176>
 800d282:	9105      	str	r1, [sp, #20]
 800d284:	e7c3      	b.n	800d20e <_vfiprintf_r+0x176>
 800d286:	fb0c 2101 	mla	r1, ip, r1, r2
 800d28a:	4604      	mov	r4, r0
 800d28c:	2301      	movs	r3, #1
 800d28e:	e7f0      	b.n	800d272 <_vfiprintf_r+0x1da>
 800d290:	ab03      	add	r3, sp, #12
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	462a      	mov	r2, r5
 800d296:	4b16      	ldr	r3, [pc, #88]	; (800d2f0 <_vfiprintf_r+0x258>)
 800d298:	a904      	add	r1, sp, #16
 800d29a:	4630      	mov	r0, r6
 800d29c:	f3af 8000 	nop.w
 800d2a0:	4607      	mov	r7, r0
 800d2a2:	1c78      	adds	r0, r7, #1
 800d2a4:	d1d6      	bne.n	800d254 <_vfiprintf_r+0x1bc>
 800d2a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2a8:	07d9      	lsls	r1, r3, #31
 800d2aa:	d405      	bmi.n	800d2b8 <_vfiprintf_r+0x220>
 800d2ac:	89ab      	ldrh	r3, [r5, #12]
 800d2ae:	059a      	lsls	r2, r3, #22
 800d2b0:	d402      	bmi.n	800d2b8 <_vfiprintf_r+0x220>
 800d2b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2b4:	f000 fc6d 	bl	800db92 <__retarget_lock_release_recursive>
 800d2b8:	89ab      	ldrh	r3, [r5, #12]
 800d2ba:	065b      	lsls	r3, r3, #25
 800d2bc:	f53f af12 	bmi.w	800d0e4 <_vfiprintf_r+0x4c>
 800d2c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2c2:	e711      	b.n	800d0e8 <_vfiprintf_r+0x50>
 800d2c4:	ab03      	add	r3, sp, #12
 800d2c6:	9300      	str	r3, [sp, #0]
 800d2c8:	462a      	mov	r2, r5
 800d2ca:	4b09      	ldr	r3, [pc, #36]	; (800d2f0 <_vfiprintf_r+0x258>)
 800d2cc:	a904      	add	r1, sp, #16
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	f000 f880 	bl	800d3d4 <_printf_i>
 800d2d4:	e7e4      	b.n	800d2a0 <_vfiprintf_r+0x208>
 800d2d6:	bf00      	nop
 800d2d8:	080100e8 	.word	0x080100e8
 800d2dc:	08010108 	.word	0x08010108
 800d2e0:	080100c8 	.word	0x080100c8
 800d2e4:	08010094 	.word	0x08010094
 800d2e8:	0801009e 	.word	0x0801009e
 800d2ec:	00000000 	.word	0x00000000
 800d2f0:	0800d073 	.word	0x0800d073
 800d2f4:	0801009a 	.word	0x0801009a

0800d2f8 <_printf_common>:
 800d2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2fc:	4616      	mov	r6, r2
 800d2fe:	4699      	mov	r9, r3
 800d300:	688a      	ldr	r2, [r1, #8]
 800d302:	690b      	ldr	r3, [r1, #16]
 800d304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d308:	4293      	cmp	r3, r2
 800d30a:	bfb8      	it	lt
 800d30c:	4613      	movlt	r3, r2
 800d30e:	6033      	str	r3, [r6, #0]
 800d310:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d314:	4607      	mov	r7, r0
 800d316:	460c      	mov	r4, r1
 800d318:	b10a      	cbz	r2, 800d31e <_printf_common+0x26>
 800d31a:	3301      	adds	r3, #1
 800d31c:	6033      	str	r3, [r6, #0]
 800d31e:	6823      	ldr	r3, [r4, #0]
 800d320:	0699      	lsls	r1, r3, #26
 800d322:	bf42      	ittt	mi
 800d324:	6833      	ldrmi	r3, [r6, #0]
 800d326:	3302      	addmi	r3, #2
 800d328:	6033      	strmi	r3, [r6, #0]
 800d32a:	6825      	ldr	r5, [r4, #0]
 800d32c:	f015 0506 	ands.w	r5, r5, #6
 800d330:	d106      	bne.n	800d340 <_printf_common+0x48>
 800d332:	f104 0a19 	add.w	sl, r4, #25
 800d336:	68e3      	ldr	r3, [r4, #12]
 800d338:	6832      	ldr	r2, [r6, #0]
 800d33a:	1a9b      	subs	r3, r3, r2
 800d33c:	42ab      	cmp	r3, r5
 800d33e:	dc26      	bgt.n	800d38e <_printf_common+0x96>
 800d340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d344:	1e13      	subs	r3, r2, #0
 800d346:	6822      	ldr	r2, [r4, #0]
 800d348:	bf18      	it	ne
 800d34a:	2301      	movne	r3, #1
 800d34c:	0692      	lsls	r2, r2, #26
 800d34e:	d42b      	bmi.n	800d3a8 <_printf_common+0xb0>
 800d350:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d354:	4649      	mov	r1, r9
 800d356:	4638      	mov	r0, r7
 800d358:	47c0      	blx	r8
 800d35a:	3001      	adds	r0, #1
 800d35c:	d01e      	beq.n	800d39c <_printf_common+0xa4>
 800d35e:	6823      	ldr	r3, [r4, #0]
 800d360:	68e5      	ldr	r5, [r4, #12]
 800d362:	6832      	ldr	r2, [r6, #0]
 800d364:	f003 0306 	and.w	r3, r3, #6
 800d368:	2b04      	cmp	r3, #4
 800d36a:	bf08      	it	eq
 800d36c:	1aad      	subeq	r5, r5, r2
 800d36e:	68a3      	ldr	r3, [r4, #8]
 800d370:	6922      	ldr	r2, [r4, #16]
 800d372:	bf0c      	ite	eq
 800d374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d378:	2500      	movne	r5, #0
 800d37a:	4293      	cmp	r3, r2
 800d37c:	bfc4      	itt	gt
 800d37e:	1a9b      	subgt	r3, r3, r2
 800d380:	18ed      	addgt	r5, r5, r3
 800d382:	2600      	movs	r6, #0
 800d384:	341a      	adds	r4, #26
 800d386:	42b5      	cmp	r5, r6
 800d388:	d11a      	bne.n	800d3c0 <_printf_common+0xc8>
 800d38a:	2000      	movs	r0, #0
 800d38c:	e008      	b.n	800d3a0 <_printf_common+0xa8>
 800d38e:	2301      	movs	r3, #1
 800d390:	4652      	mov	r2, sl
 800d392:	4649      	mov	r1, r9
 800d394:	4638      	mov	r0, r7
 800d396:	47c0      	blx	r8
 800d398:	3001      	adds	r0, #1
 800d39a:	d103      	bne.n	800d3a4 <_printf_common+0xac>
 800d39c:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a4:	3501      	adds	r5, #1
 800d3a6:	e7c6      	b.n	800d336 <_printf_common+0x3e>
 800d3a8:	18e1      	adds	r1, r4, r3
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	2030      	movs	r0, #48	; 0x30
 800d3ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3b2:	4422      	add	r2, r4
 800d3b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3bc:	3302      	adds	r3, #2
 800d3be:	e7c7      	b.n	800d350 <_printf_common+0x58>
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	4622      	mov	r2, r4
 800d3c4:	4649      	mov	r1, r9
 800d3c6:	4638      	mov	r0, r7
 800d3c8:	47c0      	blx	r8
 800d3ca:	3001      	adds	r0, #1
 800d3cc:	d0e6      	beq.n	800d39c <_printf_common+0xa4>
 800d3ce:	3601      	adds	r6, #1
 800d3d0:	e7d9      	b.n	800d386 <_printf_common+0x8e>
	...

0800d3d4 <_printf_i>:
 800d3d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3d8:	460c      	mov	r4, r1
 800d3da:	4691      	mov	r9, r2
 800d3dc:	7e27      	ldrb	r7, [r4, #24]
 800d3de:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d3e0:	2f78      	cmp	r7, #120	; 0x78
 800d3e2:	4680      	mov	r8, r0
 800d3e4:	469a      	mov	sl, r3
 800d3e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d3ea:	d807      	bhi.n	800d3fc <_printf_i+0x28>
 800d3ec:	2f62      	cmp	r7, #98	; 0x62
 800d3ee:	d80a      	bhi.n	800d406 <_printf_i+0x32>
 800d3f0:	2f00      	cmp	r7, #0
 800d3f2:	f000 80d8 	beq.w	800d5a6 <_printf_i+0x1d2>
 800d3f6:	2f58      	cmp	r7, #88	; 0x58
 800d3f8:	f000 80a3 	beq.w	800d542 <_printf_i+0x16e>
 800d3fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d400:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d404:	e03a      	b.n	800d47c <_printf_i+0xa8>
 800d406:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d40a:	2b15      	cmp	r3, #21
 800d40c:	d8f6      	bhi.n	800d3fc <_printf_i+0x28>
 800d40e:	a001      	add	r0, pc, #4	; (adr r0, 800d414 <_printf_i+0x40>)
 800d410:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d414:	0800d46d 	.word	0x0800d46d
 800d418:	0800d481 	.word	0x0800d481
 800d41c:	0800d3fd 	.word	0x0800d3fd
 800d420:	0800d3fd 	.word	0x0800d3fd
 800d424:	0800d3fd 	.word	0x0800d3fd
 800d428:	0800d3fd 	.word	0x0800d3fd
 800d42c:	0800d481 	.word	0x0800d481
 800d430:	0800d3fd 	.word	0x0800d3fd
 800d434:	0800d3fd 	.word	0x0800d3fd
 800d438:	0800d3fd 	.word	0x0800d3fd
 800d43c:	0800d3fd 	.word	0x0800d3fd
 800d440:	0800d58d 	.word	0x0800d58d
 800d444:	0800d4b1 	.word	0x0800d4b1
 800d448:	0800d56f 	.word	0x0800d56f
 800d44c:	0800d3fd 	.word	0x0800d3fd
 800d450:	0800d3fd 	.word	0x0800d3fd
 800d454:	0800d5af 	.word	0x0800d5af
 800d458:	0800d3fd 	.word	0x0800d3fd
 800d45c:	0800d4b1 	.word	0x0800d4b1
 800d460:	0800d3fd 	.word	0x0800d3fd
 800d464:	0800d3fd 	.word	0x0800d3fd
 800d468:	0800d577 	.word	0x0800d577
 800d46c:	680b      	ldr	r3, [r1, #0]
 800d46e:	1d1a      	adds	r2, r3, #4
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	600a      	str	r2, [r1, #0]
 800d474:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d47c:	2301      	movs	r3, #1
 800d47e:	e0a3      	b.n	800d5c8 <_printf_i+0x1f4>
 800d480:	6825      	ldr	r5, [r4, #0]
 800d482:	6808      	ldr	r0, [r1, #0]
 800d484:	062e      	lsls	r6, r5, #24
 800d486:	f100 0304 	add.w	r3, r0, #4
 800d48a:	d50a      	bpl.n	800d4a2 <_printf_i+0xce>
 800d48c:	6805      	ldr	r5, [r0, #0]
 800d48e:	600b      	str	r3, [r1, #0]
 800d490:	2d00      	cmp	r5, #0
 800d492:	da03      	bge.n	800d49c <_printf_i+0xc8>
 800d494:	232d      	movs	r3, #45	; 0x2d
 800d496:	426d      	negs	r5, r5
 800d498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d49c:	485e      	ldr	r0, [pc, #376]	; (800d618 <_printf_i+0x244>)
 800d49e:	230a      	movs	r3, #10
 800d4a0:	e019      	b.n	800d4d6 <_printf_i+0x102>
 800d4a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d4a6:	6805      	ldr	r5, [r0, #0]
 800d4a8:	600b      	str	r3, [r1, #0]
 800d4aa:	bf18      	it	ne
 800d4ac:	b22d      	sxthne	r5, r5
 800d4ae:	e7ef      	b.n	800d490 <_printf_i+0xbc>
 800d4b0:	680b      	ldr	r3, [r1, #0]
 800d4b2:	6825      	ldr	r5, [r4, #0]
 800d4b4:	1d18      	adds	r0, r3, #4
 800d4b6:	6008      	str	r0, [r1, #0]
 800d4b8:	0628      	lsls	r0, r5, #24
 800d4ba:	d501      	bpl.n	800d4c0 <_printf_i+0xec>
 800d4bc:	681d      	ldr	r5, [r3, #0]
 800d4be:	e002      	b.n	800d4c6 <_printf_i+0xf2>
 800d4c0:	0669      	lsls	r1, r5, #25
 800d4c2:	d5fb      	bpl.n	800d4bc <_printf_i+0xe8>
 800d4c4:	881d      	ldrh	r5, [r3, #0]
 800d4c6:	4854      	ldr	r0, [pc, #336]	; (800d618 <_printf_i+0x244>)
 800d4c8:	2f6f      	cmp	r7, #111	; 0x6f
 800d4ca:	bf0c      	ite	eq
 800d4cc:	2308      	moveq	r3, #8
 800d4ce:	230a      	movne	r3, #10
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4d6:	6866      	ldr	r6, [r4, #4]
 800d4d8:	60a6      	str	r6, [r4, #8]
 800d4da:	2e00      	cmp	r6, #0
 800d4dc:	bfa2      	ittt	ge
 800d4de:	6821      	ldrge	r1, [r4, #0]
 800d4e0:	f021 0104 	bicge.w	r1, r1, #4
 800d4e4:	6021      	strge	r1, [r4, #0]
 800d4e6:	b90d      	cbnz	r5, 800d4ec <_printf_i+0x118>
 800d4e8:	2e00      	cmp	r6, #0
 800d4ea:	d04d      	beq.n	800d588 <_printf_i+0x1b4>
 800d4ec:	4616      	mov	r6, r2
 800d4ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800d4f2:	fb03 5711 	mls	r7, r3, r1, r5
 800d4f6:	5dc7      	ldrb	r7, [r0, r7]
 800d4f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d4fc:	462f      	mov	r7, r5
 800d4fe:	42bb      	cmp	r3, r7
 800d500:	460d      	mov	r5, r1
 800d502:	d9f4      	bls.n	800d4ee <_printf_i+0x11a>
 800d504:	2b08      	cmp	r3, #8
 800d506:	d10b      	bne.n	800d520 <_printf_i+0x14c>
 800d508:	6823      	ldr	r3, [r4, #0]
 800d50a:	07df      	lsls	r7, r3, #31
 800d50c:	d508      	bpl.n	800d520 <_printf_i+0x14c>
 800d50e:	6923      	ldr	r3, [r4, #16]
 800d510:	6861      	ldr	r1, [r4, #4]
 800d512:	4299      	cmp	r1, r3
 800d514:	bfde      	ittt	le
 800d516:	2330      	movle	r3, #48	; 0x30
 800d518:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d51c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d520:	1b92      	subs	r2, r2, r6
 800d522:	6122      	str	r2, [r4, #16]
 800d524:	f8cd a000 	str.w	sl, [sp]
 800d528:	464b      	mov	r3, r9
 800d52a:	aa03      	add	r2, sp, #12
 800d52c:	4621      	mov	r1, r4
 800d52e:	4640      	mov	r0, r8
 800d530:	f7ff fee2 	bl	800d2f8 <_printf_common>
 800d534:	3001      	adds	r0, #1
 800d536:	d14c      	bne.n	800d5d2 <_printf_i+0x1fe>
 800d538:	f04f 30ff 	mov.w	r0, #4294967295
 800d53c:	b004      	add	sp, #16
 800d53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d542:	4835      	ldr	r0, [pc, #212]	; (800d618 <_printf_i+0x244>)
 800d544:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	680e      	ldr	r6, [r1, #0]
 800d54c:	061f      	lsls	r7, r3, #24
 800d54e:	f856 5b04 	ldr.w	r5, [r6], #4
 800d552:	600e      	str	r6, [r1, #0]
 800d554:	d514      	bpl.n	800d580 <_printf_i+0x1ac>
 800d556:	07d9      	lsls	r1, r3, #31
 800d558:	bf44      	itt	mi
 800d55a:	f043 0320 	orrmi.w	r3, r3, #32
 800d55e:	6023      	strmi	r3, [r4, #0]
 800d560:	b91d      	cbnz	r5, 800d56a <_printf_i+0x196>
 800d562:	6823      	ldr	r3, [r4, #0]
 800d564:	f023 0320 	bic.w	r3, r3, #32
 800d568:	6023      	str	r3, [r4, #0]
 800d56a:	2310      	movs	r3, #16
 800d56c:	e7b0      	b.n	800d4d0 <_printf_i+0xfc>
 800d56e:	6823      	ldr	r3, [r4, #0]
 800d570:	f043 0320 	orr.w	r3, r3, #32
 800d574:	6023      	str	r3, [r4, #0]
 800d576:	2378      	movs	r3, #120	; 0x78
 800d578:	4828      	ldr	r0, [pc, #160]	; (800d61c <_printf_i+0x248>)
 800d57a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d57e:	e7e3      	b.n	800d548 <_printf_i+0x174>
 800d580:	065e      	lsls	r6, r3, #25
 800d582:	bf48      	it	mi
 800d584:	b2ad      	uxthmi	r5, r5
 800d586:	e7e6      	b.n	800d556 <_printf_i+0x182>
 800d588:	4616      	mov	r6, r2
 800d58a:	e7bb      	b.n	800d504 <_printf_i+0x130>
 800d58c:	680b      	ldr	r3, [r1, #0]
 800d58e:	6826      	ldr	r6, [r4, #0]
 800d590:	6960      	ldr	r0, [r4, #20]
 800d592:	1d1d      	adds	r5, r3, #4
 800d594:	600d      	str	r5, [r1, #0]
 800d596:	0635      	lsls	r5, r6, #24
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	d501      	bpl.n	800d5a0 <_printf_i+0x1cc>
 800d59c:	6018      	str	r0, [r3, #0]
 800d59e:	e002      	b.n	800d5a6 <_printf_i+0x1d2>
 800d5a0:	0671      	lsls	r1, r6, #25
 800d5a2:	d5fb      	bpl.n	800d59c <_printf_i+0x1c8>
 800d5a4:	8018      	strh	r0, [r3, #0]
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	6123      	str	r3, [r4, #16]
 800d5aa:	4616      	mov	r6, r2
 800d5ac:	e7ba      	b.n	800d524 <_printf_i+0x150>
 800d5ae:	680b      	ldr	r3, [r1, #0]
 800d5b0:	1d1a      	adds	r2, r3, #4
 800d5b2:	600a      	str	r2, [r1, #0]
 800d5b4:	681e      	ldr	r6, [r3, #0]
 800d5b6:	6862      	ldr	r2, [r4, #4]
 800d5b8:	2100      	movs	r1, #0
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	f7f2 fe20 	bl	8000200 <memchr>
 800d5c0:	b108      	cbz	r0, 800d5c6 <_printf_i+0x1f2>
 800d5c2:	1b80      	subs	r0, r0, r6
 800d5c4:	6060      	str	r0, [r4, #4]
 800d5c6:	6863      	ldr	r3, [r4, #4]
 800d5c8:	6123      	str	r3, [r4, #16]
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5d0:	e7a8      	b.n	800d524 <_printf_i+0x150>
 800d5d2:	6923      	ldr	r3, [r4, #16]
 800d5d4:	4632      	mov	r2, r6
 800d5d6:	4649      	mov	r1, r9
 800d5d8:	4640      	mov	r0, r8
 800d5da:	47d0      	blx	sl
 800d5dc:	3001      	adds	r0, #1
 800d5de:	d0ab      	beq.n	800d538 <_printf_i+0x164>
 800d5e0:	6823      	ldr	r3, [r4, #0]
 800d5e2:	079b      	lsls	r3, r3, #30
 800d5e4:	d413      	bmi.n	800d60e <_printf_i+0x23a>
 800d5e6:	68e0      	ldr	r0, [r4, #12]
 800d5e8:	9b03      	ldr	r3, [sp, #12]
 800d5ea:	4298      	cmp	r0, r3
 800d5ec:	bfb8      	it	lt
 800d5ee:	4618      	movlt	r0, r3
 800d5f0:	e7a4      	b.n	800d53c <_printf_i+0x168>
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	4632      	mov	r2, r6
 800d5f6:	4649      	mov	r1, r9
 800d5f8:	4640      	mov	r0, r8
 800d5fa:	47d0      	blx	sl
 800d5fc:	3001      	adds	r0, #1
 800d5fe:	d09b      	beq.n	800d538 <_printf_i+0x164>
 800d600:	3501      	adds	r5, #1
 800d602:	68e3      	ldr	r3, [r4, #12]
 800d604:	9903      	ldr	r1, [sp, #12]
 800d606:	1a5b      	subs	r3, r3, r1
 800d608:	42ab      	cmp	r3, r5
 800d60a:	dcf2      	bgt.n	800d5f2 <_printf_i+0x21e>
 800d60c:	e7eb      	b.n	800d5e6 <_printf_i+0x212>
 800d60e:	2500      	movs	r5, #0
 800d610:	f104 0619 	add.w	r6, r4, #25
 800d614:	e7f5      	b.n	800d602 <_printf_i+0x22e>
 800d616:	bf00      	nop
 800d618:	080100a5 	.word	0x080100a5
 800d61c:	080100b6 	.word	0x080100b6

0800d620 <nan>:
 800d620:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d628 <nan+0x8>
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop
 800d628:	00000000 	.word	0x00000000
 800d62c:	7ff80000 	.word	0x7ff80000

0800d630 <_sbrk_r>:
 800d630:	b538      	push	{r3, r4, r5, lr}
 800d632:	4d06      	ldr	r5, [pc, #24]	; (800d64c <_sbrk_r+0x1c>)
 800d634:	2300      	movs	r3, #0
 800d636:	4604      	mov	r4, r0
 800d638:	4608      	mov	r0, r1
 800d63a:	602b      	str	r3, [r5, #0]
 800d63c:	f7f7 feb6 	bl	80053ac <_sbrk>
 800d640:	1c43      	adds	r3, r0, #1
 800d642:	d102      	bne.n	800d64a <_sbrk_r+0x1a>
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	b103      	cbz	r3, 800d64a <_sbrk_r+0x1a>
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	bd38      	pop	{r3, r4, r5, pc}
 800d64c:	20000c64 	.word	0x20000c64

0800d650 <strncmp>:
 800d650:	b510      	push	{r4, lr}
 800d652:	b16a      	cbz	r2, 800d670 <strncmp+0x20>
 800d654:	3901      	subs	r1, #1
 800d656:	1884      	adds	r4, r0, r2
 800d658:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d65c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d660:	4293      	cmp	r3, r2
 800d662:	d103      	bne.n	800d66c <strncmp+0x1c>
 800d664:	42a0      	cmp	r0, r4
 800d666:	d001      	beq.n	800d66c <strncmp+0x1c>
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d1f5      	bne.n	800d658 <strncmp+0x8>
 800d66c:	1a98      	subs	r0, r3, r2
 800d66e:	bd10      	pop	{r4, pc}
 800d670:	4610      	mov	r0, r2
 800d672:	e7fc      	b.n	800d66e <strncmp+0x1e>

0800d674 <__swbuf_r>:
 800d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d676:	460e      	mov	r6, r1
 800d678:	4614      	mov	r4, r2
 800d67a:	4605      	mov	r5, r0
 800d67c:	b118      	cbz	r0, 800d686 <__swbuf_r+0x12>
 800d67e:	6983      	ldr	r3, [r0, #24]
 800d680:	b90b      	cbnz	r3, 800d686 <__swbuf_r+0x12>
 800d682:	f000 f9e7 	bl	800da54 <__sinit>
 800d686:	4b21      	ldr	r3, [pc, #132]	; (800d70c <__swbuf_r+0x98>)
 800d688:	429c      	cmp	r4, r3
 800d68a:	d12b      	bne.n	800d6e4 <__swbuf_r+0x70>
 800d68c:	686c      	ldr	r4, [r5, #4]
 800d68e:	69a3      	ldr	r3, [r4, #24]
 800d690:	60a3      	str	r3, [r4, #8]
 800d692:	89a3      	ldrh	r3, [r4, #12]
 800d694:	071a      	lsls	r2, r3, #28
 800d696:	d52f      	bpl.n	800d6f8 <__swbuf_r+0x84>
 800d698:	6923      	ldr	r3, [r4, #16]
 800d69a:	b36b      	cbz	r3, 800d6f8 <__swbuf_r+0x84>
 800d69c:	6923      	ldr	r3, [r4, #16]
 800d69e:	6820      	ldr	r0, [r4, #0]
 800d6a0:	1ac0      	subs	r0, r0, r3
 800d6a2:	6963      	ldr	r3, [r4, #20]
 800d6a4:	b2f6      	uxtb	r6, r6
 800d6a6:	4283      	cmp	r3, r0
 800d6a8:	4637      	mov	r7, r6
 800d6aa:	dc04      	bgt.n	800d6b6 <__swbuf_r+0x42>
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	f000 f93c 	bl	800d92c <_fflush_r>
 800d6b4:	bb30      	cbnz	r0, 800d704 <__swbuf_r+0x90>
 800d6b6:	68a3      	ldr	r3, [r4, #8]
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	60a3      	str	r3, [r4, #8]
 800d6bc:	6823      	ldr	r3, [r4, #0]
 800d6be:	1c5a      	adds	r2, r3, #1
 800d6c0:	6022      	str	r2, [r4, #0]
 800d6c2:	701e      	strb	r6, [r3, #0]
 800d6c4:	6963      	ldr	r3, [r4, #20]
 800d6c6:	3001      	adds	r0, #1
 800d6c8:	4283      	cmp	r3, r0
 800d6ca:	d004      	beq.n	800d6d6 <__swbuf_r+0x62>
 800d6cc:	89a3      	ldrh	r3, [r4, #12]
 800d6ce:	07db      	lsls	r3, r3, #31
 800d6d0:	d506      	bpl.n	800d6e0 <__swbuf_r+0x6c>
 800d6d2:	2e0a      	cmp	r6, #10
 800d6d4:	d104      	bne.n	800d6e0 <__swbuf_r+0x6c>
 800d6d6:	4621      	mov	r1, r4
 800d6d8:	4628      	mov	r0, r5
 800d6da:	f000 f927 	bl	800d92c <_fflush_r>
 800d6de:	b988      	cbnz	r0, 800d704 <__swbuf_r+0x90>
 800d6e0:	4638      	mov	r0, r7
 800d6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6e4:	4b0a      	ldr	r3, [pc, #40]	; (800d710 <__swbuf_r+0x9c>)
 800d6e6:	429c      	cmp	r4, r3
 800d6e8:	d101      	bne.n	800d6ee <__swbuf_r+0x7a>
 800d6ea:	68ac      	ldr	r4, [r5, #8]
 800d6ec:	e7cf      	b.n	800d68e <__swbuf_r+0x1a>
 800d6ee:	4b09      	ldr	r3, [pc, #36]	; (800d714 <__swbuf_r+0xa0>)
 800d6f0:	429c      	cmp	r4, r3
 800d6f2:	bf08      	it	eq
 800d6f4:	68ec      	ldreq	r4, [r5, #12]
 800d6f6:	e7ca      	b.n	800d68e <__swbuf_r+0x1a>
 800d6f8:	4621      	mov	r1, r4
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	f000 f81a 	bl	800d734 <__swsetup_r>
 800d700:	2800      	cmp	r0, #0
 800d702:	d0cb      	beq.n	800d69c <__swbuf_r+0x28>
 800d704:	f04f 37ff 	mov.w	r7, #4294967295
 800d708:	e7ea      	b.n	800d6e0 <__swbuf_r+0x6c>
 800d70a:	bf00      	nop
 800d70c:	080100e8 	.word	0x080100e8
 800d710:	08010108 	.word	0x08010108
 800d714:	080100c8 	.word	0x080100c8

0800d718 <__ascii_wctomb>:
 800d718:	b149      	cbz	r1, 800d72e <__ascii_wctomb+0x16>
 800d71a:	2aff      	cmp	r2, #255	; 0xff
 800d71c:	bf85      	ittet	hi
 800d71e:	238a      	movhi	r3, #138	; 0x8a
 800d720:	6003      	strhi	r3, [r0, #0]
 800d722:	700a      	strbls	r2, [r1, #0]
 800d724:	f04f 30ff 	movhi.w	r0, #4294967295
 800d728:	bf98      	it	ls
 800d72a:	2001      	movls	r0, #1
 800d72c:	4770      	bx	lr
 800d72e:	4608      	mov	r0, r1
 800d730:	4770      	bx	lr
	...

0800d734 <__swsetup_r>:
 800d734:	4b32      	ldr	r3, [pc, #200]	; (800d800 <__swsetup_r+0xcc>)
 800d736:	b570      	push	{r4, r5, r6, lr}
 800d738:	681d      	ldr	r5, [r3, #0]
 800d73a:	4606      	mov	r6, r0
 800d73c:	460c      	mov	r4, r1
 800d73e:	b125      	cbz	r5, 800d74a <__swsetup_r+0x16>
 800d740:	69ab      	ldr	r3, [r5, #24]
 800d742:	b913      	cbnz	r3, 800d74a <__swsetup_r+0x16>
 800d744:	4628      	mov	r0, r5
 800d746:	f000 f985 	bl	800da54 <__sinit>
 800d74a:	4b2e      	ldr	r3, [pc, #184]	; (800d804 <__swsetup_r+0xd0>)
 800d74c:	429c      	cmp	r4, r3
 800d74e:	d10f      	bne.n	800d770 <__swsetup_r+0x3c>
 800d750:	686c      	ldr	r4, [r5, #4]
 800d752:	89a3      	ldrh	r3, [r4, #12]
 800d754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d758:	0719      	lsls	r1, r3, #28
 800d75a:	d42c      	bmi.n	800d7b6 <__swsetup_r+0x82>
 800d75c:	06dd      	lsls	r5, r3, #27
 800d75e:	d411      	bmi.n	800d784 <__swsetup_r+0x50>
 800d760:	2309      	movs	r3, #9
 800d762:	6033      	str	r3, [r6, #0]
 800d764:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d768:	81a3      	strh	r3, [r4, #12]
 800d76a:	f04f 30ff 	mov.w	r0, #4294967295
 800d76e:	e03e      	b.n	800d7ee <__swsetup_r+0xba>
 800d770:	4b25      	ldr	r3, [pc, #148]	; (800d808 <__swsetup_r+0xd4>)
 800d772:	429c      	cmp	r4, r3
 800d774:	d101      	bne.n	800d77a <__swsetup_r+0x46>
 800d776:	68ac      	ldr	r4, [r5, #8]
 800d778:	e7eb      	b.n	800d752 <__swsetup_r+0x1e>
 800d77a:	4b24      	ldr	r3, [pc, #144]	; (800d80c <__swsetup_r+0xd8>)
 800d77c:	429c      	cmp	r4, r3
 800d77e:	bf08      	it	eq
 800d780:	68ec      	ldreq	r4, [r5, #12]
 800d782:	e7e6      	b.n	800d752 <__swsetup_r+0x1e>
 800d784:	0758      	lsls	r0, r3, #29
 800d786:	d512      	bpl.n	800d7ae <__swsetup_r+0x7a>
 800d788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d78a:	b141      	cbz	r1, 800d79e <__swsetup_r+0x6a>
 800d78c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d790:	4299      	cmp	r1, r3
 800d792:	d002      	beq.n	800d79a <__swsetup_r+0x66>
 800d794:	4630      	mov	r0, r6
 800d796:	f7ff fa4f 	bl	800cc38 <_free_r>
 800d79a:	2300      	movs	r3, #0
 800d79c:	6363      	str	r3, [r4, #52]	; 0x34
 800d79e:	89a3      	ldrh	r3, [r4, #12]
 800d7a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d7a4:	81a3      	strh	r3, [r4, #12]
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	6063      	str	r3, [r4, #4]
 800d7aa:	6923      	ldr	r3, [r4, #16]
 800d7ac:	6023      	str	r3, [r4, #0]
 800d7ae:	89a3      	ldrh	r3, [r4, #12]
 800d7b0:	f043 0308 	orr.w	r3, r3, #8
 800d7b4:	81a3      	strh	r3, [r4, #12]
 800d7b6:	6923      	ldr	r3, [r4, #16]
 800d7b8:	b94b      	cbnz	r3, 800d7ce <__swsetup_r+0x9a>
 800d7ba:	89a3      	ldrh	r3, [r4, #12]
 800d7bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d7c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7c4:	d003      	beq.n	800d7ce <__swsetup_r+0x9a>
 800d7c6:	4621      	mov	r1, r4
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	f000 fa07 	bl	800dbdc <__smakebuf_r>
 800d7ce:	89a0      	ldrh	r0, [r4, #12]
 800d7d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7d4:	f010 0301 	ands.w	r3, r0, #1
 800d7d8:	d00a      	beq.n	800d7f0 <__swsetup_r+0xbc>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	60a3      	str	r3, [r4, #8]
 800d7de:	6963      	ldr	r3, [r4, #20]
 800d7e0:	425b      	negs	r3, r3
 800d7e2:	61a3      	str	r3, [r4, #24]
 800d7e4:	6923      	ldr	r3, [r4, #16]
 800d7e6:	b943      	cbnz	r3, 800d7fa <__swsetup_r+0xc6>
 800d7e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7ec:	d1ba      	bne.n	800d764 <__swsetup_r+0x30>
 800d7ee:	bd70      	pop	{r4, r5, r6, pc}
 800d7f0:	0781      	lsls	r1, r0, #30
 800d7f2:	bf58      	it	pl
 800d7f4:	6963      	ldrpl	r3, [r4, #20]
 800d7f6:	60a3      	str	r3, [r4, #8]
 800d7f8:	e7f4      	b.n	800d7e4 <__swsetup_r+0xb0>
 800d7fa:	2000      	movs	r0, #0
 800d7fc:	e7f7      	b.n	800d7ee <__swsetup_r+0xba>
 800d7fe:	bf00      	nop
 800d800:	2000006c 	.word	0x2000006c
 800d804:	080100e8 	.word	0x080100e8
 800d808:	08010108 	.word	0x08010108
 800d80c:	080100c8 	.word	0x080100c8

0800d810 <abort>:
 800d810:	b508      	push	{r3, lr}
 800d812:	2006      	movs	r0, #6
 800d814:	f000 fa7c 	bl	800dd10 <raise>
 800d818:	2001      	movs	r0, #1
 800d81a:	f7f7 fd4f 	bl	80052bc <_exit>
	...

0800d820 <__sflush_r>:
 800d820:	898a      	ldrh	r2, [r1, #12]
 800d822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d826:	4605      	mov	r5, r0
 800d828:	0710      	lsls	r0, r2, #28
 800d82a:	460c      	mov	r4, r1
 800d82c:	d458      	bmi.n	800d8e0 <__sflush_r+0xc0>
 800d82e:	684b      	ldr	r3, [r1, #4]
 800d830:	2b00      	cmp	r3, #0
 800d832:	dc05      	bgt.n	800d840 <__sflush_r+0x20>
 800d834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d836:	2b00      	cmp	r3, #0
 800d838:	dc02      	bgt.n	800d840 <__sflush_r+0x20>
 800d83a:	2000      	movs	r0, #0
 800d83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d842:	2e00      	cmp	r6, #0
 800d844:	d0f9      	beq.n	800d83a <__sflush_r+0x1a>
 800d846:	2300      	movs	r3, #0
 800d848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d84c:	682f      	ldr	r7, [r5, #0]
 800d84e:	602b      	str	r3, [r5, #0]
 800d850:	d032      	beq.n	800d8b8 <__sflush_r+0x98>
 800d852:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d854:	89a3      	ldrh	r3, [r4, #12]
 800d856:	075a      	lsls	r2, r3, #29
 800d858:	d505      	bpl.n	800d866 <__sflush_r+0x46>
 800d85a:	6863      	ldr	r3, [r4, #4]
 800d85c:	1ac0      	subs	r0, r0, r3
 800d85e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d860:	b10b      	cbz	r3, 800d866 <__sflush_r+0x46>
 800d862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d864:	1ac0      	subs	r0, r0, r3
 800d866:	2300      	movs	r3, #0
 800d868:	4602      	mov	r2, r0
 800d86a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d86c:	6a21      	ldr	r1, [r4, #32]
 800d86e:	4628      	mov	r0, r5
 800d870:	47b0      	blx	r6
 800d872:	1c43      	adds	r3, r0, #1
 800d874:	89a3      	ldrh	r3, [r4, #12]
 800d876:	d106      	bne.n	800d886 <__sflush_r+0x66>
 800d878:	6829      	ldr	r1, [r5, #0]
 800d87a:	291d      	cmp	r1, #29
 800d87c:	d82c      	bhi.n	800d8d8 <__sflush_r+0xb8>
 800d87e:	4a2a      	ldr	r2, [pc, #168]	; (800d928 <__sflush_r+0x108>)
 800d880:	40ca      	lsrs	r2, r1
 800d882:	07d6      	lsls	r6, r2, #31
 800d884:	d528      	bpl.n	800d8d8 <__sflush_r+0xb8>
 800d886:	2200      	movs	r2, #0
 800d888:	6062      	str	r2, [r4, #4]
 800d88a:	04d9      	lsls	r1, r3, #19
 800d88c:	6922      	ldr	r2, [r4, #16]
 800d88e:	6022      	str	r2, [r4, #0]
 800d890:	d504      	bpl.n	800d89c <__sflush_r+0x7c>
 800d892:	1c42      	adds	r2, r0, #1
 800d894:	d101      	bne.n	800d89a <__sflush_r+0x7a>
 800d896:	682b      	ldr	r3, [r5, #0]
 800d898:	b903      	cbnz	r3, 800d89c <__sflush_r+0x7c>
 800d89a:	6560      	str	r0, [r4, #84]	; 0x54
 800d89c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d89e:	602f      	str	r7, [r5, #0]
 800d8a0:	2900      	cmp	r1, #0
 800d8a2:	d0ca      	beq.n	800d83a <__sflush_r+0x1a>
 800d8a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8a8:	4299      	cmp	r1, r3
 800d8aa:	d002      	beq.n	800d8b2 <__sflush_r+0x92>
 800d8ac:	4628      	mov	r0, r5
 800d8ae:	f7ff f9c3 	bl	800cc38 <_free_r>
 800d8b2:	2000      	movs	r0, #0
 800d8b4:	6360      	str	r0, [r4, #52]	; 0x34
 800d8b6:	e7c1      	b.n	800d83c <__sflush_r+0x1c>
 800d8b8:	6a21      	ldr	r1, [r4, #32]
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	4628      	mov	r0, r5
 800d8be:	47b0      	blx	r6
 800d8c0:	1c41      	adds	r1, r0, #1
 800d8c2:	d1c7      	bne.n	800d854 <__sflush_r+0x34>
 800d8c4:	682b      	ldr	r3, [r5, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d0c4      	beq.n	800d854 <__sflush_r+0x34>
 800d8ca:	2b1d      	cmp	r3, #29
 800d8cc:	d001      	beq.n	800d8d2 <__sflush_r+0xb2>
 800d8ce:	2b16      	cmp	r3, #22
 800d8d0:	d101      	bne.n	800d8d6 <__sflush_r+0xb6>
 800d8d2:	602f      	str	r7, [r5, #0]
 800d8d4:	e7b1      	b.n	800d83a <__sflush_r+0x1a>
 800d8d6:	89a3      	ldrh	r3, [r4, #12]
 800d8d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8dc:	81a3      	strh	r3, [r4, #12]
 800d8de:	e7ad      	b.n	800d83c <__sflush_r+0x1c>
 800d8e0:	690f      	ldr	r7, [r1, #16]
 800d8e2:	2f00      	cmp	r7, #0
 800d8e4:	d0a9      	beq.n	800d83a <__sflush_r+0x1a>
 800d8e6:	0793      	lsls	r3, r2, #30
 800d8e8:	680e      	ldr	r6, [r1, #0]
 800d8ea:	bf08      	it	eq
 800d8ec:	694b      	ldreq	r3, [r1, #20]
 800d8ee:	600f      	str	r7, [r1, #0]
 800d8f0:	bf18      	it	ne
 800d8f2:	2300      	movne	r3, #0
 800d8f4:	eba6 0807 	sub.w	r8, r6, r7
 800d8f8:	608b      	str	r3, [r1, #8]
 800d8fa:	f1b8 0f00 	cmp.w	r8, #0
 800d8fe:	dd9c      	ble.n	800d83a <__sflush_r+0x1a>
 800d900:	6a21      	ldr	r1, [r4, #32]
 800d902:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d904:	4643      	mov	r3, r8
 800d906:	463a      	mov	r2, r7
 800d908:	4628      	mov	r0, r5
 800d90a:	47b0      	blx	r6
 800d90c:	2800      	cmp	r0, #0
 800d90e:	dc06      	bgt.n	800d91e <__sflush_r+0xfe>
 800d910:	89a3      	ldrh	r3, [r4, #12]
 800d912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d916:	81a3      	strh	r3, [r4, #12]
 800d918:	f04f 30ff 	mov.w	r0, #4294967295
 800d91c:	e78e      	b.n	800d83c <__sflush_r+0x1c>
 800d91e:	4407      	add	r7, r0
 800d920:	eba8 0800 	sub.w	r8, r8, r0
 800d924:	e7e9      	b.n	800d8fa <__sflush_r+0xda>
 800d926:	bf00      	nop
 800d928:	20400001 	.word	0x20400001

0800d92c <_fflush_r>:
 800d92c:	b538      	push	{r3, r4, r5, lr}
 800d92e:	690b      	ldr	r3, [r1, #16]
 800d930:	4605      	mov	r5, r0
 800d932:	460c      	mov	r4, r1
 800d934:	b913      	cbnz	r3, 800d93c <_fflush_r+0x10>
 800d936:	2500      	movs	r5, #0
 800d938:	4628      	mov	r0, r5
 800d93a:	bd38      	pop	{r3, r4, r5, pc}
 800d93c:	b118      	cbz	r0, 800d946 <_fflush_r+0x1a>
 800d93e:	6983      	ldr	r3, [r0, #24]
 800d940:	b90b      	cbnz	r3, 800d946 <_fflush_r+0x1a>
 800d942:	f000 f887 	bl	800da54 <__sinit>
 800d946:	4b14      	ldr	r3, [pc, #80]	; (800d998 <_fflush_r+0x6c>)
 800d948:	429c      	cmp	r4, r3
 800d94a:	d11b      	bne.n	800d984 <_fflush_r+0x58>
 800d94c:	686c      	ldr	r4, [r5, #4]
 800d94e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d0ef      	beq.n	800d936 <_fflush_r+0xa>
 800d956:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d958:	07d0      	lsls	r0, r2, #31
 800d95a:	d404      	bmi.n	800d966 <_fflush_r+0x3a>
 800d95c:	0599      	lsls	r1, r3, #22
 800d95e:	d402      	bmi.n	800d966 <_fflush_r+0x3a>
 800d960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d962:	f000 f915 	bl	800db90 <__retarget_lock_acquire_recursive>
 800d966:	4628      	mov	r0, r5
 800d968:	4621      	mov	r1, r4
 800d96a:	f7ff ff59 	bl	800d820 <__sflush_r>
 800d96e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d970:	07da      	lsls	r2, r3, #31
 800d972:	4605      	mov	r5, r0
 800d974:	d4e0      	bmi.n	800d938 <_fflush_r+0xc>
 800d976:	89a3      	ldrh	r3, [r4, #12]
 800d978:	059b      	lsls	r3, r3, #22
 800d97a:	d4dd      	bmi.n	800d938 <_fflush_r+0xc>
 800d97c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d97e:	f000 f908 	bl	800db92 <__retarget_lock_release_recursive>
 800d982:	e7d9      	b.n	800d938 <_fflush_r+0xc>
 800d984:	4b05      	ldr	r3, [pc, #20]	; (800d99c <_fflush_r+0x70>)
 800d986:	429c      	cmp	r4, r3
 800d988:	d101      	bne.n	800d98e <_fflush_r+0x62>
 800d98a:	68ac      	ldr	r4, [r5, #8]
 800d98c:	e7df      	b.n	800d94e <_fflush_r+0x22>
 800d98e:	4b04      	ldr	r3, [pc, #16]	; (800d9a0 <_fflush_r+0x74>)
 800d990:	429c      	cmp	r4, r3
 800d992:	bf08      	it	eq
 800d994:	68ec      	ldreq	r4, [r5, #12]
 800d996:	e7da      	b.n	800d94e <_fflush_r+0x22>
 800d998:	080100e8 	.word	0x080100e8
 800d99c:	08010108 	.word	0x08010108
 800d9a0:	080100c8 	.word	0x080100c8

0800d9a4 <std>:
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	b510      	push	{r4, lr}
 800d9a8:	4604      	mov	r4, r0
 800d9aa:	e9c0 3300 	strd	r3, r3, [r0]
 800d9ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9b2:	6083      	str	r3, [r0, #8]
 800d9b4:	8181      	strh	r1, [r0, #12]
 800d9b6:	6643      	str	r3, [r0, #100]	; 0x64
 800d9b8:	81c2      	strh	r2, [r0, #14]
 800d9ba:	6183      	str	r3, [r0, #24]
 800d9bc:	4619      	mov	r1, r3
 800d9be:	2208      	movs	r2, #8
 800d9c0:	305c      	adds	r0, #92	; 0x5c
 800d9c2:	f7fd f949 	bl	800ac58 <memset>
 800d9c6:	4b05      	ldr	r3, [pc, #20]	; (800d9dc <std+0x38>)
 800d9c8:	6263      	str	r3, [r4, #36]	; 0x24
 800d9ca:	4b05      	ldr	r3, [pc, #20]	; (800d9e0 <std+0x3c>)
 800d9cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d9ce:	4b05      	ldr	r3, [pc, #20]	; (800d9e4 <std+0x40>)
 800d9d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d9d2:	4b05      	ldr	r3, [pc, #20]	; (800d9e8 <std+0x44>)
 800d9d4:	6224      	str	r4, [r4, #32]
 800d9d6:	6323      	str	r3, [r4, #48]	; 0x30
 800d9d8:	bd10      	pop	{r4, pc}
 800d9da:	bf00      	nop
 800d9dc:	0800dd49 	.word	0x0800dd49
 800d9e0:	0800dd6b 	.word	0x0800dd6b
 800d9e4:	0800dda3 	.word	0x0800dda3
 800d9e8:	0800ddc7 	.word	0x0800ddc7

0800d9ec <_cleanup_r>:
 800d9ec:	4901      	ldr	r1, [pc, #4]	; (800d9f4 <_cleanup_r+0x8>)
 800d9ee:	f000 b8af 	b.w	800db50 <_fwalk_reent>
 800d9f2:	bf00      	nop
 800d9f4:	0800d92d 	.word	0x0800d92d

0800d9f8 <__sfmoreglue>:
 800d9f8:	b570      	push	{r4, r5, r6, lr}
 800d9fa:	1e4a      	subs	r2, r1, #1
 800d9fc:	2568      	movs	r5, #104	; 0x68
 800d9fe:	4355      	muls	r5, r2
 800da00:	460e      	mov	r6, r1
 800da02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800da06:	f7ff f967 	bl	800ccd8 <_malloc_r>
 800da0a:	4604      	mov	r4, r0
 800da0c:	b140      	cbz	r0, 800da20 <__sfmoreglue+0x28>
 800da0e:	2100      	movs	r1, #0
 800da10:	e9c0 1600 	strd	r1, r6, [r0]
 800da14:	300c      	adds	r0, #12
 800da16:	60a0      	str	r0, [r4, #8]
 800da18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800da1c:	f7fd f91c 	bl	800ac58 <memset>
 800da20:	4620      	mov	r0, r4
 800da22:	bd70      	pop	{r4, r5, r6, pc}

0800da24 <__sfp_lock_acquire>:
 800da24:	4801      	ldr	r0, [pc, #4]	; (800da2c <__sfp_lock_acquire+0x8>)
 800da26:	f000 b8b3 	b.w	800db90 <__retarget_lock_acquire_recursive>
 800da2a:	bf00      	nop
 800da2c:	20000c60 	.word	0x20000c60

0800da30 <__sfp_lock_release>:
 800da30:	4801      	ldr	r0, [pc, #4]	; (800da38 <__sfp_lock_release+0x8>)
 800da32:	f000 b8ae 	b.w	800db92 <__retarget_lock_release_recursive>
 800da36:	bf00      	nop
 800da38:	20000c60 	.word	0x20000c60

0800da3c <__sinit_lock_acquire>:
 800da3c:	4801      	ldr	r0, [pc, #4]	; (800da44 <__sinit_lock_acquire+0x8>)
 800da3e:	f000 b8a7 	b.w	800db90 <__retarget_lock_acquire_recursive>
 800da42:	bf00      	nop
 800da44:	20000c5b 	.word	0x20000c5b

0800da48 <__sinit_lock_release>:
 800da48:	4801      	ldr	r0, [pc, #4]	; (800da50 <__sinit_lock_release+0x8>)
 800da4a:	f000 b8a2 	b.w	800db92 <__retarget_lock_release_recursive>
 800da4e:	bf00      	nop
 800da50:	20000c5b 	.word	0x20000c5b

0800da54 <__sinit>:
 800da54:	b510      	push	{r4, lr}
 800da56:	4604      	mov	r4, r0
 800da58:	f7ff fff0 	bl	800da3c <__sinit_lock_acquire>
 800da5c:	69a3      	ldr	r3, [r4, #24]
 800da5e:	b11b      	cbz	r3, 800da68 <__sinit+0x14>
 800da60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da64:	f7ff bff0 	b.w	800da48 <__sinit_lock_release>
 800da68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800da6c:	6523      	str	r3, [r4, #80]	; 0x50
 800da6e:	4b13      	ldr	r3, [pc, #76]	; (800dabc <__sinit+0x68>)
 800da70:	4a13      	ldr	r2, [pc, #76]	; (800dac0 <__sinit+0x6c>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	62a2      	str	r2, [r4, #40]	; 0x28
 800da76:	42a3      	cmp	r3, r4
 800da78:	bf04      	itt	eq
 800da7a:	2301      	moveq	r3, #1
 800da7c:	61a3      	streq	r3, [r4, #24]
 800da7e:	4620      	mov	r0, r4
 800da80:	f000 f820 	bl	800dac4 <__sfp>
 800da84:	6060      	str	r0, [r4, #4]
 800da86:	4620      	mov	r0, r4
 800da88:	f000 f81c 	bl	800dac4 <__sfp>
 800da8c:	60a0      	str	r0, [r4, #8]
 800da8e:	4620      	mov	r0, r4
 800da90:	f000 f818 	bl	800dac4 <__sfp>
 800da94:	2200      	movs	r2, #0
 800da96:	60e0      	str	r0, [r4, #12]
 800da98:	2104      	movs	r1, #4
 800da9a:	6860      	ldr	r0, [r4, #4]
 800da9c:	f7ff ff82 	bl	800d9a4 <std>
 800daa0:	68a0      	ldr	r0, [r4, #8]
 800daa2:	2201      	movs	r2, #1
 800daa4:	2109      	movs	r1, #9
 800daa6:	f7ff ff7d 	bl	800d9a4 <std>
 800daaa:	68e0      	ldr	r0, [r4, #12]
 800daac:	2202      	movs	r2, #2
 800daae:	2112      	movs	r1, #18
 800dab0:	f7ff ff78 	bl	800d9a4 <std>
 800dab4:	2301      	movs	r3, #1
 800dab6:	61a3      	str	r3, [r4, #24]
 800dab8:	e7d2      	b.n	800da60 <__sinit+0xc>
 800daba:	bf00      	nop
 800dabc:	0800fc90 	.word	0x0800fc90
 800dac0:	0800d9ed 	.word	0x0800d9ed

0800dac4 <__sfp>:
 800dac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dac6:	4607      	mov	r7, r0
 800dac8:	f7ff ffac 	bl	800da24 <__sfp_lock_acquire>
 800dacc:	4b1e      	ldr	r3, [pc, #120]	; (800db48 <__sfp+0x84>)
 800dace:	681e      	ldr	r6, [r3, #0]
 800dad0:	69b3      	ldr	r3, [r6, #24]
 800dad2:	b913      	cbnz	r3, 800dada <__sfp+0x16>
 800dad4:	4630      	mov	r0, r6
 800dad6:	f7ff ffbd 	bl	800da54 <__sinit>
 800dada:	3648      	adds	r6, #72	; 0x48
 800dadc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dae0:	3b01      	subs	r3, #1
 800dae2:	d503      	bpl.n	800daec <__sfp+0x28>
 800dae4:	6833      	ldr	r3, [r6, #0]
 800dae6:	b30b      	cbz	r3, 800db2c <__sfp+0x68>
 800dae8:	6836      	ldr	r6, [r6, #0]
 800daea:	e7f7      	b.n	800dadc <__sfp+0x18>
 800daec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800daf0:	b9d5      	cbnz	r5, 800db28 <__sfp+0x64>
 800daf2:	4b16      	ldr	r3, [pc, #88]	; (800db4c <__sfp+0x88>)
 800daf4:	60e3      	str	r3, [r4, #12]
 800daf6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dafa:	6665      	str	r5, [r4, #100]	; 0x64
 800dafc:	f000 f847 	bl	800db8e <__retarget_lock_init_recursive>
 800db00:	f7ff ff96 	bl	800da30 <__sfp_lock_release>
 800db04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800db08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800db0c:	6025      	str	r5, [r4, #0]
 800db0e:	61a5      	str	r5, [r4, #24]
 800db10:	2208      	movs	r2, #8
 800db12:	4629      	mov	r1, r5
 800db14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800db18:	f7fd f89e 	bl	800ac58 <memset>
 800db1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800db20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800db24:	4620      	mov	r0, r4
 800db26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db28:	3468      	adds	r4, #104	; 0x68
 800db2a:	e7d9      	b.n	800dae0 <__sfp+0x1c>
 800db2c:	2104      	movs	r1, #4
 800db2e:	4638      	mov	r0, r7
 800db30:	f7ff ff62 	bl	800d9f8 <__sfmoreglue>
 800db34:	4604      	mov	r4, r0
 800db36:	6030      	str	r0, [r6, #0]
 800db38:	2800      	cmp	r0, #0
 800db3a:	d1d5      	bne.n	800dae8 <__sfp+0x24>
 800db3c:	f7ff ff78 	bl	800da30 <__sfp_lock_release>
 800db40:	230c      	movs	r3, #12
 800db42:	603b      	str	r3, [r7, #0]
 800db44:	e7ee      	b.n	800db24 <__sfp+0x60>
 800db46:	bf00      	nop
 800db48:	0800fc90 	.word	0x0800fc90
 800db4c:	ffff0001 	.word	0xffff0001

0800db50 <_fwalk_reent>:
 800db50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db54:	4606      	mov	r6, r0
 800db56:	4688      	mov	r8, r1
 800db58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800db5c:	2700      	movs	r7, #0
 800db5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db62:	f1b9 0901 	subs.w	r9, r9, #1
 800db66:	d505      	bpl.n	800db74 <_fwalk_reent+0x24>
 800db68:	6824      	ldr	r4, [r4, #0]
 800db6a:	2c00      	cmp	r4, #0
 800db6c:	d1f7      	bne.n	800db5e <_fwalk_reent+0xe>
 800db6e:	4638      	mov	r0, r7
 800db70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db74:	89ab      	ldrh	r3, [r5, #12]
 800db76:	2b01      	cmp	r3, #1
 800db78:	d907      	bls.n	800db8a <_fwalk_reent+0x3a>
 800db7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db7e:	3301      	adds	r3, #1
 800db80:	d003      	beq.n	800db8a <_fwalk_reent+0x3a>
 800db82:	4629      	mov	r1, r5
 800db84:	4630      	mov	r0, r6
 800db86:	47c0      	blx	r8
 800db88:	4307      	orrs	r7, r0
 800db8a:	3568      	adds	r5, #104	; 0x68
 800db8c:	e7e9      	b.n	800db62 <_fwalk_reent+0x12>

0800db8e <__retarget_lock_init_recursive>:
 800db8e:	4770      	bx	lr

0800db90 <__retarget_lock_acquire_recursive>:
 800db90:	4770      	bx	lr

0800db92 <__retarget_lock_release_recursive>:
 800db92:	4770      	bx	lr

0800db94 <__swhatbuf_r>:
 800db94:	b570      	push	{r4, r5, r6, lr}
 800db96:	460e      	mov	r6, r1
 800db98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db9c:	2900      	cmp	r1, #0
 800db9e:	b096      	sub	sp, #88	; 0x58
 800dba0:	4614      	mov	r4, r2
 800dba2:	461d      	mov	r5, r3
 800dba4:	da07      	bge.n	800dbb6 <__swhatbuf_r+0x22>
 800dba6:	2300      	movs	r3, #0
 800dba8:	602b      	str	r3, [r5, #0]
 800dbaa:	89b3      	ldrh	r3, [r6, #12]
 800dbac:	061a      	lsls	r2, r3, #24
 800dbae:	d410      	bmi.n	800dbd2 <__swhatbuf_r+0x3e>
 800dbb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbb4:	e00e      	b.n	800dbd4 <__swhatbuf_r+0x40>
 800dbb6:	466a      	mov	r2, sp
 800dbb8:	f000 f92c 	bl	800de14 <_fstat_r>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	dbf2      	blt.n	800dba6 <__swhatbuf_r+0x12>
 800dbc0:	9a01      	ldr	r2, [sp, #4]
 800dbc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dbc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dbca:	425a      	negs	r2, r3
 800dbcc:	415a      	adcs	r2, r3
 800dbce:	602a      	str	r2, [r5, #0]
 800dbd0:	e7ee      	b.n	800dbb0 <__swhatbuf_r+0x1c>
 800dbd2:	2340      	movs	r3, #64	; 0x40
 800dbd4:	2000      	movs	r0, #0
 800dbd6:	6023      	str	r3, [r4, #0]
 800dbd8:	b016      	add	sp, #88	; 0x58
 800dbda:	bd70      	pop	{r4, r5, r6, pc}

0800dbdc <__smakebuf_r>:
 800dbdc:	898b      	ldrh	r3, [r1, #12]
 800dbde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dbe0:	079d      	lsls	r5, r3, #30
 800dbe2:	4606      	mov	r6, r0
 800dbe4:	460c      	mov	r4, r1
 800dbe6:	d507      	bpl.n	800dbf8 <__smakebuf_r+0x1c>
 800dbe8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dbec:	6023      	str	r3, [r4, #0]
 800dbee:	6123      	str	r3, [r4, #16]
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	6163      	str	r3, [r4, #20]
 800dbf4:	b002      	add	sp, #8
 800dbf6:	bd70      	pop	{r4, r5, r6, pc}
 800dbf8:	ab01      	add	r3, sp, #4
 800dbfa:	466a      	mov	r2, sp
 800dbfc:	f7ff ffca 	bl	800db94 <__swhatbuf_r>
 800dc00:	9900      	ldr	r1, [sp, #0]
 800dc02:	4605      	mov	r5, r0
 800dc04:	4630      	mov	r0, r6
 800dc06:	f7ff f867 	bl	800ccd8 <_malloc_r>
 800dc0a:	b948      	cbnz	r0, 800dc20 <__smakebuf_r+0x44>
 800dc0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc10:	059a      	lsls	r2, r3, #22
 800dc12:	d4ef      	bmi.n	800dbf4 <__smakebuf_r+0x18>
 800dc14:	f023 0303 	bic.w	r3, r3, #3
 800dc18:	f043 0302 	orr.w	r3, r3, #2
 800dc1c:	81a3      	strh	r3, [r4, #12]
 800dc1e:	e7e3      	b.n	800dbe8 <__smakebuf_r+0xc>
 800dc20:	4b0d      	ldr	r3, [pc, #52]	; (800dc58 <__smakebuf_r+0x7c>)
 800dc22:	62b3      	str	r3, [r6, #40]	; 0x28
 800dc24:	89a3      	ldrh	r3, [r4, #12]
 800dc26:	6020      	str	r0, [r4, #0]
 800dc28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc2c:	81a3      	strh	r3, [r4, #12]
 800dc2e:	9b00      	ldr	r3, [sp, #0]
 800dc30:	6163      	str	r3, [r4, #20]
 800dc32:	9b01      	ldr	r3, [sp, #4]
 800dc34:	6120      	str	r0, [r4, #16]
 800dc36:	b15b      	cbz	r3, 800dc50 <__smakebuf_r+0x74>
 800dc38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc3c:	4630      	mov	r0, r6
 800dc3e:	f000 f8fb 	bl	800de38 <_isatty_r>
 800dc42:	b128      	cbz	r0, 800dc50 <__smakebuf_r+0x74>
 800dc44:	89a3      	ldrh	r3, [r4, #12]
 800dc46:	f023 0303 	bic.w	r3, r3, #3
 800dc4a:	f043 0301 	orr.w	r3, r3, #1
 800dc4e:	81a3      	strh	r3, [r4, #12]
 800dc50:	89a0      	ldrh	r0, [r4, #12]
 800dc52:	4305      	orrs	r5, r0
 800dc54:	81a5      	strh	r5, [r4, #12]
 800dc56:	e7cd      	b.n	800dbf4 <__smakebuf_r+0x18>
 800dc58:	0800d9ed 	.word	0x0800d9ed

0800dc5c <__malloc_lock>:
 800dc5c:	4801      	ldr	r0, [pc, #4]	; (800dc64 <__malloc_lock+0x8>)
 800dc5e:	f7ff bf97 	b.w	800db90 <__retarget_lock_acquire_recursive>
 800dc62:	bf00      	nop
 800dc64:	20000c5c 	.word	0x20000c5c

0800dc68 <__malloc_unlock>:
 800dc68:	4801      	ldr	r0, [pc, #4]	; (800dc70 <__malloc_unlock+0x8>)
 800dc6a:	f7ff bf92 	b.w	800db92 <__retarget_lock_release_recursive>
 800dc6e:	bf00      	nop
 800dc70:	20000c5c 	.word	0x20000c5c

0800dc74 <_realloc_r>:
 800dc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc76:	4607      	mov	r7, r0
 800dc78:	4614      	mov	r4, r2
 800dc7a:	460e      	mov	r6, r1
 800dc7c:	b921      	cbnz	r1, 800dc88 <_realloc_r+0x14>
 800dc7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dc82:	4611      	mov	r1, r2
 800dc84:	f7ff b828 	b.w	800ccd8 <_malloc_r>
 800dc88:	b922      	cbnz	r2, 800dc94 <_realloc_r+0x20>
 800dc8a:	f7fe ffd5 	bl	800cc38 <_free_r>
 800dc8e:	4625      	mov	r5, r4
 800dc90:	4628      	mov	r0, r5
 800dc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc94:	f000 f8f2 	bl	800de7c <_malloc_usable_size_r>
 800dc98:	42a0      	cmp	r0, r4
 800dc9a:	d20f      	bcs.n	800dcbc <_realloc_r+0x48>
 800dc9c:	4621      	mov	r1, r4
 800dc9e:	4638      	mov	r0, r7
 800dca0:	f7ff f81a 	bl	800ccd8 <_malloc_r>
 800dca4:	4605      	mov	r5, r0
 800dca6:	2800      	cmp	r0, #0
 800dca8:	d0f2      	beq.n	800dc90 <_realloc_r+0x1c>
 800dcaa:	4631      	mov	r1, r6
 800dcac:	4622      	mov	r2, r4
 800dcae:	f7fc ffab 	bl	800ac08 <memcpy>
 800dcb2:	4631      	mov	r1, r6
 800dcb4:	4638      	mov	r0, r7
 800dcb6:	f7fe ffbf 	bl	800cc38 <_free_r>
 800dcba:	e7e9      	b.n	800dc90 <_realloc_r+0x1c>
 800dcbc:	4635      	mov	r5, r6
 800dcbe:	e7e7      	b.n	800dc90 <_realloc_r+0x1c>

0800dcc0 <_raise_r>:
 800dcc0:	291f      	cmp	r1, #31
 800dcc2:	b538      	push	{r3, r4, r5, lr}
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	460d      	mov	r5, r1
 800dcc8:	d904      	bls.n	800dcd4 <_raise_r+0x14>
 800dcca:	2316      	movs	r3, #22
 800dccc:	6003      	str	r3, [r0, #0]
 800dcce:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd2:	bd38      	pop	{r3, r4, r5, pc}
 800dcd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dcd6:	b112      	cbz	r2, 800dcde <_raise_r+0x1e>
 800dcd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dcdc:	b94b      	cbnz	r3, 800dcf2 <_raise_r+0x32>
 800dcde:	4620      	mov	r0, r4
 800dce0:	f000 f830 	bl	800dd44 <_getpid_r>
 800dce4:	462a      	mov	r2, r5
 800dce6:	4601      	mov	r1, r0
 800dce8:	4620      	mov	r0, r4
 800dcea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcee:	f000 b817 	b.w	800dd20 <_kill_r>
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	d00a      	beq.n	800dd0c <_raise_r+0x4c>
 800dcf6:	1c59      	adds	r1, r3, #1
 800dcf8:	d103      	bne.n	800dd02 <_raise_r+0x42>
 800dcfa:	2316      	movs	r3, #22
 800dcfc:	6003      	str	r3, [r0, #0]
 800dcfe:	2001      	movs	r0, #1
 800dd00:	e7e7      	b.n	800dcd2 <_raise_r+0x12>
 800dd02:	2400      	movs	r4, #0
 800dd04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dd08:	4628      	mov	r0, r5
 800dd0a:	4798      	blx	r3
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	e7e0      	b.n	800dcd2 <_raise_r+0x12>

0800dd10 <raise>:
 800dd10:	4b02      	ldr	r3, [pc, #8]	; (800dd1c <raise+0xc>)
 800dd12:	4601      	mov	r1, r0
 800dd14:	6818      	ldr	r0, [r3, #0]
 800dd16:	f7ff bfd3 	b.w	800dcc0 <_raise_r>
 800dd1a:	bf00      	nop
 800dd1c:	2000006c 	.word	0x2000006c

0800dd20 <_kill_r>:
 800dd20:	b538      	push	{r3, r4, r5, lr}
 800dd22:	4d07      	ldr	r5, [pc, #28]	; (800dd40 <_kill_r+0x20>)
 800dd24:	2300      	movs	r3, #0
 800dd26:	4604      	mov	r4, r0
 800dd28:	4608      	mov	r0, r1
 800dd2a:	4611      	mov	r1, r2
 800dd2c:	602b      	str	r3, [r5, #0]
 800dd2e:	f7f7 fab5 	bl	800529c <_kill>
 800dd32:	1c43      	adds	r3, r0, #1
 800dd34:	d102      	bne.n	800dd3c <_kill_r+0x1c>
 800dd36:	682b      	ldr	r3, [r5, #0]
 800dd38:	b103      	cbz	r3, 800dd3c <_kill_r+0x1c>
 800dd3a:	6023      	str	r3, [r4, #0]
 800dd3c:	bd38      	pop	{r3, r4, r5, pc}
 800dd3e:	bf00      	nop
 800dd40:	20000c64 	.word	0x20000c64

0800dd44 <_getpid_r>:
 800dd44:	f7f7 baa2 	b.w	800528c <_getpid>

0800dd48 <__sread>:
 800dd48:	b510      	push	{r4, lr}
 800dd4a:	460c      	mov	r4, r1
 800dd4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd50:	f000 f89c 	bl	800de8c <_read_r>
 800dd54:	2800      	cmp	r0, #0
 800dd56:	bfab      	itete	ge
 800dd58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dd5a:	89a3      	ldrhlt	r3, [r4, #12]
 800dd5c:	181b      	addge	r3, r3, r0
 800dd5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dd62:	bfac      	ite	ge
 800dd64:	6563      	strge	r3, [r4, #84]	; 0x54
 800dd66:	81a3      	strhlt	r3, [r4, #12]
 800dd68:	bd10      	pop	{r4, pc}

0800dd6a <__swrite>:
 800dd6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd6e:	461f      	mov	r7, r3
 800dd70:	898b      	ldrh	r3, [r1, #12]
 800dd72:	05db      	lsls	r3, r3, #23
 800dd74:	4605      	mov	r5, r0
 800dd76:	460c      	mov	r4, r1
 800dd78:	4616      	mov	r6, r2
 800dd7a:	d505      	bpl.n	800dd88 <__swrite+0x1e>
 800dd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd80:	2302      	movs	r3, #2
 800dd82:	2200      	movs	r2, #0
 800dd84:	f000 f868 	bl	800de58 <_lseek_r>
 800dd88:	89a3      	ldrh	r3, [r4, #12]
 800dd8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd92:	81a3      	strh	r3, [r4, #12]
 800dd94:	4632      	mov	r2, r6
 800dd96:	463b      	mov	r3, r7
 800dd98:	4628      	mov	r0, r5
 800dd9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd9e:	f000 b817 	b.w	800ddd0 <_write_r>

0800dda2 <__sseek>:
 800dda2:	b510      	push	{r4, lr}
 800dda4:	460c      	mov	r4, r1
 800dda6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddaa:	f000 f855 	bl	800de58 <_lseek_r>
 800ddae:	1c43      	adds	r3, r0, #1
 800ddb0:	89a3      	ldrh	r3, [r4, #12]
 800ddb2:	bf15      	itete	ne
 800ddb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ddb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ddba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ddbe:	81a3      	strheq	r3, [r4, #12]
 800ddc0:	bf18      	it	ne
 800ddc2:	81a3      	strhne	r3, [r4, #12]
 800ddc4:	bd10      	pop	{r4, pc}

0800ddc6 <__sclose>:
 800ddc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddca:	f000 b813 	b.w	800ddf4 <_close_r>
	...

0800ddd0 <_write_r>:
 800ddd0:	b538      	push	{r3, r4, r5, lr}
 800ddd2:	4d07      	ldr	r5, [pc, #28]	; (800ddf0 <_write_r+0x20>)
 800ddd4:	4604      	mov	r4, r0
 800ddd6:	4608      	mov	r0, r1
 800ddd8:	4611      	mov	r1, r2
 800ddda:	2200      	movs	r2, #0
 800dddc:	602a      	str	r2, [r5, #0]
 800ddde:	461a      	mov	r2, r3
 800dde0:	f7f7 fa93 	bl	800530a <_write>
 800dde4:	1c43      	adds	r3, r0, #1
 800dde6:	d102      	bne.n	800ddee <_write_r+0x1e>
 800dde8:	682b      	ldr	r3, [r5, #0]
 800ddea:	b103      	cbz	r3, 800ddee <_write_r+0x1e>
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	bd38      	pop	{r3, r4, r5, pc}
 800ddf0:	20000c64 	.word	0x20000c64

0800ddf4 <_close_r>:
 800ddf4:	b538      	push	{r3, r4, r5, lr}
 800ddf6:	4d06      	ldr	r5, [pc, #24]	; (800de10 <_close_r+0x1c>)
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	4608      	mov	r0, r1
 800ddfe:	602b      	str	r3, [r5, #0]
 800de00:	f7f7 fa9f 	bl	8005342 <_close>
 800de04:	1c43      	adds	r3, r0, #1
 800de06:	d102      	bne.n	800de0e <_close_r+0x1a>
 800de08:	682b      	ldr	r3, [r5, #0]
 800de0a:	b103      	cbz	r3, 800de0e <_close_r+0x1a>
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	bd38      	pop	{r3, r4, r5, pc}
 800de10:	20000c64 	.word	0x20000c64

0800de14 <_fstat_r>:
 800de14:	b538      	push	{r3, r4, r5, lr}
 800de16:	4d07      	ldr	r5, [pc, #28]	; (800de34 <_fstat_r+0x20>)
 800de18:	2300      	movs	r3, #0
 800de1a:	4604      	mov	r4, r0
 800de1c:	4608      	mov	r0, r1
 800de1e:	4611      	mov	r1, r2
 800de20:	602b      	str	r3, [r5, #0]
 800de22:	f7f7 fa9a 	bl	800535a <_fstat>
 800de26:	1c43      	adds	r3, r0, #1
 800de28:	d102      	bne.n	800de30 <_fstat_r+0x1c>
 800de2a:	682b      	ldr	r3, [r5, #0]
 800de2c:	b103      	cbz	r3, 800de30 <_fstat_r+0x1c>
 800de2e:	6023      	str	r3, [r4, #0]
 800de30:	bd38      	pop	{r3, r4, r5, pc}
 800de32:	bf00      	nop
 800de34:	20000c64 	.word	0x20000c64

0800de38 <_isatty_r>:
 800de38:	b538      	push	{r3, r4, r5, lr}
 800de3a:	4d06      	ldr	r5, [pc, #24]	; (800de54 <_isatty_r+0x1c>)
 800de3c:	2300      	movs	r3, #0
 800de3e:	4604      	mov	r4, r0
 800de40:	4608      	mov	r0, r1
 800de42:	602b      	str	r3, [r5, #0]
 800de44:	f7f7 fa99 	bl	800537a <_isatty>
 800de48:	1c43      	adds	r3, r0, #1
 800de4a:	d102      	bne.n	800de52 <_isatty_r+0x1a>
 800de4c:	682b      	ldr	r3, [r5, #0]
 800de4e:	b103      	cbz	r3, 800de52 <_isatty_r+0x1a>
 800de50:	6023      	str	r3, [r4, #0]
 800de52:	bd38      	pop	{r3, r4, r5, pc}
 800de54:	20000c64 	.word	0x20000c64

0800de58 <_lseek_r>:
 800de58:	b538      	push	{r3, r4, r5, lr}
 800de5a:	4d07      	ldr	r5, [pc, #28]	; (800de78 <_lseek_r+0x20>)
 800de5c:	4604      	mov	r4, r0
 800de5e:	4608      	mov	r0, r1
 800de60:	4611      	mov	r1, r2
 800de62:	2200      	movs	r2, #0
 800de64:	602a      	str	r2, [r5, #0]
 800de66:	461a      	mov	r2, r3
 800de68:	f7f7 fa92 	bl	8005390 <_lseek>
 800de6c:	1c43      	adds	r3, r0, #1
 800de6e:	d102      	bne.n	800de76 <_lseek_r+0x1e>
 800de70:	682b      	ldr	r3, [r5, #0]
 800de72:	b103      	cbz	r3, 800de76 <_lseek_r+0x1e>
 800de74:	6023      	str	r3, [r4, #0]
 800de76:	bd38      	pop	{r3, r4, r5, pc}
 800de78:	20000c64 	.word	0x20000c64

0800de7c <_malloc_usable_size_r>:
 800de7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de80:	1f18      	subs	r0, r3, #4
 800de82:	2b00      	cmp	r3, #0
 800de84:	bfbc      	itt	lt
 800de86:	580b      	ldrlt	r3, [r1, r0]
 800de88:	18c0      	addlt	r0, r0, r3
 800de8a:	4770      	bx	lr

0800de8c <_read_r>:
 800de8c:	b538      	push	{r3, r4, r5, lr}
 800de8e:	4d07      	ldr	r5, [pc, #28]	; (800deac <_read_r+0x20>)
 800de90:	4604      	mov	r4, r0
 800de92:	4608      	mov	r0, r1
 800de94:	4611      	mov	r1, r2
 800de96:	2200      	movs	r2, #0
 800de98:	602a      	str	r2, [r5, #0]
 800de9a:	461a      	mov	r2, r3
 800de9c:	f7f7 fa18 	bl	80052d0 <_read>
 800dea0:	1c43      	adds	r3, r0, #1
 800dea2:	d102      	bne.n	800deaa <_read_r+0x1e>
 800dea4:	682b      	ldr	r3, [r5, #0]
 800dea6:	b103      	cbz	r3, 800deaa <_read_r+0x1e>
 800dea8:	6023      	str	r3, [r4, #0]
 800deaa:	bd38      	pop	{r3, r4, r5, pc}
 800deac:	20000c64 	.word	0x20000c64

0800deb0 <pow>:
 800deb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deb4:	ec59 8b10 	vmov	r8, r9, d0
 800deb8:	ec57 6b11 	vmov	r6, r7, d1
 800debc:	f000 f8a8 	bl	800e010 <__ieee754_pow>
 800dec0:	4b4e      	ldr	r3, [pc, #312]	; (800dffc <pow+0x14c>)
 800dec2:	f993 3000 	ldrsb.w	r3, [r3]
 800dec6:	3301      	adds	r3, #1
 800dec8:	ec55 4b10 	vmov	r4, r5, d0
 800decc:	d015      	beq.n	800defa <pow+0x4a>
 800dece:	4632      	mov	r2, r6
 800ded0:	463b      	mov	r3, r7
 800ded2:	4630      	mov	r0, r6
 800ded4:	4639      	mov	r1, r7
 800ded6:	f7f2 fe39 	bl	8000b4c <__aeabi_dcmpun>
 800deda:	b970      	cbnz	r0, 800defa <pow+0x4a>
 800dedc:	4642      	mov	r2, r8
 800dede:	464b      	mov	r3, r9
 800dee0:	4640      	mov	r0, r8
 800dee2:	4649      	mov	r1, r9
 800dee4:	f7f2 fe32 	bl	8000b4c <__aeabi_dcmpun>
 800dee8:	2200      	movs	r2, #0
 800deea:	2300      	movs	r3, #0
 800deec:	b148      	cbz	r0, 800df02 <pow+0x52>
 800deee:	4630      	mov	r0, r6
 800def0:	4639      	mov	r1, r7
 800def2:	f7f2 fdf9 	bl	8000ae8 <__aeabi_dcmpeq>
 800def6:	2800      	cmp	r0, #0
 800def8:	d17d      	bne.n	800dff6 <pow+0x146>
 800defa:	ec45 4b10 	vmov	d0, r4, r5
 800defe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df02:	4640      	mov	r0, r8
 800df04:	4649      	mov	r1, r9
 800df06:	f7f2 fdef 	bl	8000ae8 <__aeabi_dcmpeq>
 800df0a:	b1e0      	cbz	r0, 800df46 <pow+0x96>
 800df0c:	2200      	movs	r2, #0
 800df0e:	2300      	movs	r3, #0
 800df10:	4630      	mov	r0, r6
 800df12:	4639      	mov	r1, r7
 800df14:	f7f2 fde8 	bl	8000ae8 <__aeabi_dcmpeq>
 800df18:	2800      	cmp	r0, #0
 800df1a:	d16c      	bne.n	800dff6 <pow+0x146>
 800df1c:	ec47 6b10 	vmov	d0, r6, r7
 800df20:	f000 fe55 	bl	800ebce <finite>
 800df24:	2800      	cmp	r0, #0
 800df26:	d0e8      	beq.n	800defa <pow+0x4a>
 800df28:	2200      	movs	r2, #0
 800df2a:	2300      	movs	r3, #0
 800df2c:	4630      	mov	r0, r6
 800df2e:	4639      	mov	r1, r7
 800df30:	f7f2 fde4 	bl	8000afc <__aeabi_dcmplt>
 800df34:	2800      	cmp	r0, #0
 800df36:	d0e0      	beq.n	800defa <pow+0x4a>
 800df38:	f7fc fe3c 	bl	800abb4 <__errno>
 800df3c:	2321      	movs	r3, #33	; 0x21
 800df3e:	6003      	str	r3, [r0, #0]
 800df40:	2400      	movs	r4, #0
 800df42:	4d2f      	ldr	r5, [pc, #188]	; (800e000 <pow+0x150>)
 800df44:	e7d9      	b.n	800defa <pow+0x4a>
 800df46:	ec45 4b10 	vmov	d0, r4, r5
 800df4a:	f000 fe40 	bl	800ebce <finite>
 800df4e:	bbb8      	cbnz	r0, 800dfc0 <pow+0x110>
 800df50:	ec49 8b10 	vmov	d0, r8, r9
 800df54:	f000 fe3b 	bl	800ebce <finite>
 800df58:	b390      	cbz	r0, 800dfc0 <pow+0x110>
 800df5a:	ec47 6b10 	vmov	d0, r6, r7
 800df5e:	f000 fe36 	bl	800ebce <finite>
 800df62:	b368      	cbz	r0, 800dfc0 <pow+0x110>
 800df64:	4622      	mov	r2, r4
 800df66:	462b      	mov	r3, r5
 800df68:	4620      	mov	r0, r4
 800df6a:	4629      	mov	r1, r5
 800df6c:	f7f2 fdee 	bl	8000b4c <__aeabi_dcmpun>
 800df70:	b160      	cbz	r0, 800df8c <pow+0xdc>
 800df72:	f7fc fe1f 	bl	800abb4 <__errno>
 800df76:	2321      	movs	r3, #33	; 0x21
 800df78:	6003      	str	r3, [r0, #0]
 800df7a:	2200      	movs	r2, #0
 800df7c:	2300      	movs	r3, #0
 800df7e:	4610      	mov	r0, r2
 800df80:	4619      	mov	r1, r3
 800df82:	f7f2 fc73 	bl	800086c <__aeabi_ddiv>
 800df86:	4604      	mov	r4, r0
 800df88:	460d      	mov	r5, r1
 800df8a:	e7b6      	b.n	800defa <pow+0x4a>
 800df8c:	f7fc fe12 	bl	800abb4 <__errno>
 800df90:	2322      	movs	r3, #34	; 0x22
 800df92:	6003      	str	r3, [r0, #0]
 800df94:	2200      	movs	r2, #0
 800df96:	2300      	movs	r3, #0
 800df98:	4640      	mov	r0, r8
 800df9a:	4649      	mov	r1, r9
 800df9c:	f7f2 fdae 	bl	8000afc <__aeabi_dcmplt>
 800dfa0:	2400      	movs	r4, #0
 800dfa2:	b158      	cbz	r0, 800dfbc <pow+0x10c>
 800dfa4:	ec47 6b10 	vmov	d0, r6, r7
 800dfa8:	f000 fe1c 	bl	800ebe4 <rint>
 800dfac:	4632      	mov	r2, r6
 800dfae:	ec51 0b10 	vmov	r0, r1, d0
 800dfb2:	463b      	mov	r3, r7
 800dfb4:	f7f2 fd98 	bl	8000ae8 <__aeabi_dcmpeq>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d0c2      	beq.n	800df42 <pow+0x92>
 800dfbc:	4d11      	ldr	r5, [pc, #68]	; (800e004 <pow+0x154>)
 800dfbe:	e79c      	b.n	800defa <pow+0x4a>
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	4620      	mov	r0, r4
 800dfc6:	4629      	mov	r1, r5
 800dfc8:	f7f2 fd8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	d094      	beq.n	800defa <pow+0x4a>
 800dfd0:	ec49 8b10 	vmov	d0, r8, r9
 800dfd4:	f000 fdfb 	bl	800ebce <finite>
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d08e      	beq.n	800defa <pow+0x4a>
 800dfdc:	ec47 6b10 	vmov	d0, r6, r7
 800dfe0:	f000 fdf5 	bl	800ebce <finite>
 800dfe4:	2800      	cmp	r0, #0
 800dfe6:	d088      	beq.n	800defa <pow+0x4a>
 800dfe8:	f7fc fde4 	bl	800abb4 <__errno>
 800dfec:	2322      	movs	r3, #34	; 0x22
 800dfee:	6003      	str	r3, [r0, #0]
 800dff0:	2400      	movs	r4, #0
 800dff2:	2500      	movs	r5, #0
 800dff4:	e781      	b.n	800defa <pow+0x4a>
 800dff6:	4d04      	ldr	r5, [pc, #16]	; (800e008 <pow+0x158>)
 800dff8:	2400      	movs	r4, #0
 800dffa:	e77e      	b.n	800defa <pow+0x4a>
 800dffc:	20000240 	.word	0x20000240
 800e000:	fff00000 	.word	0xfff00000
 800e004:	7ff00000 	.word	0x7ff00000
 800e008:	3ff00000 	.word	0x3ff00000
 800e00c:	00000000 	.word	0x00000000

0800e010 <__ieee754_pow>:
 800e010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e014:	ed2d 8b06 	vpush	{d8-d10}
 800e018:	b08d      	sub	sp, #52	; 0x34
 800e01a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e01e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800e022:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800e026:	ea56 0100 	orrs.w	r1, r6, r0
 800e02a:	ec53 2b10 	vmov	r2, r3, d0
 800e02e:	f000 84d1 	beq.w	800e9d4 <__ieee754_pow+0x9c4>
 800e032:	497f      	ldr	r1, [pc, #508]	; (800e230 <__ieee754_pow+0x220>)
 800e034:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e038:	428c      	cmp	r4, r1
 800e03a:	ee10 8a10 	vmov	r8, s0
 800e03e:	4699      	mov	r9, r3
 800e040:	dc09      	bgt.n	800e056 <__ieee754_pow+0x46>
 800e042:	d103      	bne.n	800e04c <__ieee754_pow+0x3c>
 800e044:	b97a      	cbnz	r2, 800e066 <__ieee754_pow+0x56>
 800e046:	42a6      	cmp	r6, r4
 800e048:	dd02      	ble.n	800e050 <__ieee754_pow+0x40>
 800e04a:	e00c      	b.n	800e066 <__ieee754_pow+0x56>
 800e04c:	428e      	cmp	r6, r1
 800e04e:	dc02      	bgt.n	800e056 <__ieee754_pow+0x46>
 800e050:	428e      	cmp	r6, r1
 800e052:	d110      	bne.n	800e076 <__ieee754_pow+0x66>
 800e054:	b178      	cbz	r0, 800e076 <__ieee754_pow+0x66>
 800e056:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e05a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e05e:	ea54 0308 	orrs.w	r3, r4, r8
 800e062:	f000 84b7 	beq.w	800e9d4 <__ieee754_pow+0x9c4>
 800e066:	4873      	ldr	r0, [pc, #460]	; (800e234 <__ieee754_pow+0x224>)
 800e068:	b00d      	add	sp, #52	; 0x34
 800e06a:	ecbd 8b06 	vpop	{d8-d10}
 800e06e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e072:	f7ff bad5 	b.w	800d620 <nan>
 800e076:	f1b9 0f00 	cmp.w	r9, #0
 800e07a:	da36      	bge.n	800e0ea <__ieee754_pow+0xda>
 800e07c:	496e      	ldr	r1, [pc, #440]	; (800e238 <__ieee754_pow+0x228>)
 800e07e:	428e      	cmp	r6, r1
 800e080:	dc51      	bgt.n	800e126 <__ieee754_pow+0x116>
 800e082:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800e086:	428e      	cmp	r6, r1
 800e088:	f340 84af 	ble.w	800e9ea <__ieee754_pow+0x9da>
 800e08c:	1531      	asrs	r1, r6, #20
 800e08e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e092:	2914      	cmp	r1, #20
 800e094:	dd0f      	ble.n	800e0b6 <__ieee754_pow+0xa6>
 800e096:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800e09a:	fa20 fc01 	lsr.w	ip, r0, r1
 800e09e:	fa0c f101 	lsl.w	r1, ip, r1
 800e0a2:	4281      	cmp	r1, r0
 800e0a4:	f040 84a1 	bne.w	800e9ea <__ieee754_pow+0x9da>
 800e0a8:	f00c 0c01 	and.w	ip, ip, #1
 800e0ac:	f1cc 0102 	rsb	r1, ip, #2
 800e0b0:	9100      	str	r1, [sp, #0]
 800e0b2:	b180      	cbz	r0, 800e0d6 <__ieee754_pow+0xc6>
 800e0b4:	e059      	b.n	800e16a <__ieee754_pow+0x15a>
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	d155      	bne.n	800e166 <__ieee754_pow+0x156>
 800e0ba:	f1c1 0114 	rsb	r1, r1, #20
 800e0be:	fa46 fc01 	asr.w	ip, r6, r1
 800e0c2:	fa0c f101 	lsl.w	r1, ip, r1
 800e0c6:	42b1      	cmp	r1, r6
 800e0c8:	f040 848c 	bne.w	800e9e4 <__ieee754_pow+0x9d4>
 800e0cc:	f00c 0c01 	and.w	ip, ip, #1
 800e0d0:	f1cc 0102 	rsb	r1, ip, #2
 800e0d4:	9100      	str	r1, [sp, #0]
 800e0d6:	4959      	ldr	r1, [pc, #356]	; (800e23c <__ieee754_pow+0x22c>)
 800e0d8:	428e      	cmp	r6, r1
 800e0da:	d12d      	bne.n	800e138 <__ieee754_pow+0x128>
 800e0dc:	2f00      	cmp	r7, #0
 800e0de:	da79      	bge.n	800e1d4 <__ieee754_pow+0x1c4>
 800e0e0:	4956      	ldr	r1, [pc, #344]	; (800e23c <__ieee754_pow+0x22c>)
 800e0e2:	2000      	movs	r0, #0
 800e0e4:	f7f2 fbc2 	bl	800086c <__aeabi_ddiv>
 800e0e8:	e016      	b.n	800e118 <__ieee754_pow+0x108>
 800e0ea:	2100      	movs	r1, #0
 800e0ec:	9100      	str	r1, [sp, #0]
 800e0ee:	2800      	cmp	r0, #0
 800e0f0:	d13b      	bne.n	800e16a <__ieee754_pow+0x15a>
 800e0f2:	494f      	ldr	r1, [pc, #316]	; (800e230 <__ieee754_pow+0x220>)
 800e0f4:	428e      	cmp	r6, r1
 800e0f6:	d1ee      	bne.n	800e0d6 <__ieee754_pow+0xc6>
 800e0f8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e0fc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e100:	ea53 0308 	orrs.w	r3, r3, r8
 800e104:	f000 8466 	beq.w	800e9d4 <__ieee754_pow+0x9c4>
 800e108:	4b4d      	ldr	r3, [pc, #308]	; (800e240 <__ieee754_pow+0x230>)
 800e10a:	429c      	cmp	r4, r3
 800e10c:	dd0d      	ble.n	800e12a <__ieee754_pow+0x11a>
 800e10e:	2f00      	cmp	r7, #0
 800e110:	f280 8464 	bge.w	800e9dc <__ieee754_pow+0x9cc>
 800e114:	2000      	movs	r0, #0
 800e116:	2100      	movs	r1, #0
 800e118:	ec41 0b10 	vmov	d0, r0, r1
 800e11c:	b00d      	add	sp, #52	; 0x34
 800e11e:	ecbd 8b06 	vpop	{d8-d10}
 800e122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e126:	2102      	movs	r1, #2
 800e128:	e7e0      	b.n	800e0ec <__ieee754_pow+0xdc>
 800e12a:	2f00      	cmp	r7, #0
 800e12c:	daf2      	bge.n	800e114 <__ieee754_pow+0x104>
 800e12e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800e132:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e136:	e7ef      	b.n	800e118 <__ieee754_pow+0x108>
 800e138:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e13c:	d104      	bne.n	800e148 <__ieee754_pow+0x138>
 800e13e:	4610      	mov	r0, r2
 800e140:	4619      	mov	r1, r3
 800e142:	f7f2 fa69 	bl	8000618 <__aeabi_dmul>
 800e146:	e7e7      	b.n	800e118 <__ieee754_pow+0x108>
 800e148:	493e      	ldr	r1, [pc, #248]	; (800e244 <__ieee754_pow+0x234>)
 800e14a:	428f      	cmp	r7, r1
 800e14c:	d10d      	bne.n	800e16a <__ieee754_pow+0x15a>
 800e14e:	f1b9 0f00 	cmp.w	r9, #0
 800e152:	db0a      	blt.n	800e16a <__ieee754_pow+0x15a>
 800e154:	ec43 2b10 	vmov	d0, r2, r3
 800e158:	b00d      	add	sp, #52	; 0x34
 800e15a:	ecbd 8b06 	vpop	{d8-d10}
 800e15e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e162:	f000 bc77 	b.w	800ea54 <__ieee754_sqrt>
 800e166:	2100      	movs	r1, #0
 800e168:	9100      	str	r1, [sp, #0]
 800e16a:	ec43 2b10 	vmov	d0, r2, r3
 800e16e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e172:	f000 fd23 	bl	800ebbc <fabs>
 800e176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e17a:	ec51 0b10 	vmov	r0, r1, d0
 800e17e:	f1b8 0f00 	cmp.w	r8, #0
 800e182:	d12a      	bne.n	800e1da <__ieee754_pow+0x1ca>
 800e184:	b12c      	cbz	r4, 800e192 <__ieee754_pow+0x182>
 800e186:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800e23c <__ieee754_pow+0x22c>
 800e18a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800e18e:	45e6      	cmp	lr, ip
 800e190:	d123      	bne.n	800e1da <__ieee754_pow+0x1ca>
 800e192:	2f00      	cmp	r7, #0
 800e194:	da05      	bge.n	800e1a2 <__ieee754_pow+0x192>
 800e196:	4602      	mov	r2, r0
 800e198:	460b      	mov	r3, r1
 800e19a:	2000      	movs	r0, #0
 800e19c:	4927      	ldr	r1, [pc, #156]	; (800e23c <__ieee754_pow+0x22c>)
 800e19e:	f7f2 fb65 	bl	800086c <__aeabi_ddiv>
 800e1a2:	f1b9 0f00 	cmp.w	r9, #0
 800e1a6:	dab7      	bge.n	800e118 <__ieee754_pow+0x108>
 800e1a8:	9b00      	ldr	r3, [sp, #0]
 800e1aa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e1ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e1b2:	4323      	orrs	r3, r4
 800e1b4:	d108      	bne.n	800e1c8 <__ieee754_pow+0x1b8>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	4610      	mov	r0, r2
 800e1bc:	4619      	mov	r1, r3
 800e1be:	f7f2 f873 	bl	80002a8 <__aeabi_dsub>
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	460b      	mov	r3, r1
 800e1c6:	e78d      	b.n	800e0e4 <__ieee754_pow+0xd4>
 800e1c8:	9b00      	ldr	r3, [sp, #0]
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d1a4      	bne.n	800e118 <__ieee754_pow+0x108>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1d4:	4610      	mov	r0, r2
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	e79e      	b.n	800e118 <__ieee754_pow+0x108>
 800e1da:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800e1de:	f10c 35ff 	add.w	r5, ip, #4294967295
 800e1e2:	950a      	str	r5, [sp, #40]	; 0x28
 800e1e4:	9d00      	ldr	r5, [sp, #0]
 800e1e6:	46ac      	mov	ip, r5
 800e1e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e1ea:	ea5c 0505 	orrs.w	r5, ip, r5
 800e1ee:	d0e4      	beq.n	800e1ba <__ieee754_pow+0x1aa>
 800e1f0:	4b15      	ldr	r3, [pc, #84]	; (800e248 <__ieee754_pow+0x238>)
 800e1f2:	429e      	cmp	r6, r3
 800e1f4:	f340 80fc 	ble.w	800e3f0 <__ieee754_pow+0x3e0>
 800e1f8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e1fc:	429e      	cmp	r6, r3
 800e1fe:	4b10      	ldr	r3, [pc, #64]	; (800e240 <__ieee754_pow+0x230>)
 800e200:	dd07      	ble.n	800e212 <__ieee754_pow+0x202>
 800e202:	429c      	cmp	r4, r3
 800e204:	dc0a      	bgt.n	800e21c <__ieee754_pow+0x20c>
 800e206:	2f00      	cmp	r7, #0
 800e208:	da84      	bge.n	800e114 <__ieee754_pow+0x104>
 800e20a:	a307      	add	r3, pc, #28	; (adr r3, 800e228 <__ieee754_pow+0x218>)
 800e20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e210:	e795      	b.n	800e13e <__ieee754_pow+0x12e>
 800e212:	429c      	cmp	r4, r3
 800e214:	dbf7      	blt.n	800e206 <__ieee754_pow+0x1f6>
 800e216:	4b09      	ldr	r3, [pc, #36]	; (800e23c <__ieee754_pow+0x22c>)
 800e218:	429c      	cmp	r4, r3
 800e21a:	dd17      	ble.n	800e24c <__ieee754_pow+0x23c>
 800e21c:	2f00      	cmp	r7, #0
 800e21e:	dcf4      	bgt.n	800e20a <__ieee754_pow+0x1fa>
 800e220:	e778      	b.n	800e114 <__ieee754_pow+0x104>
 800e222:	bf00      	nop
 800e224:	f3af 8000 	nop.w
 800e228:	8800759c 	.word	0x8800759c
 800e22c:	7e37e43c 	.word	0x7e37e43c
 800e230:	7ff00000 	.word	0x7ff00000
 800e234:	0800fda3 	.word	0x0800fda3
 800e238:	433fffff 	.word	0x433fffff
 800e23c:	3ff00000 	.word	0x3ff00000
 800e240:	3fefffff 	.word	0x3fefffff
 800e244:	3fe00000 	.word	0x3fe00000
 800e248:	41e00000 	.word	0x41e00000
 800e24c:	4b64      	ldr	r3, [pc, #400]	; (800e3e0 <__ieee754_pow+0x3d0>)
 800e24e:	2200      	movs	r2, #0
 800e250:	f7f2 f82a 	bl	80002a8 <__aeabi_dsub>
 800e254:	a356      	add	r3, pc, #344	; (adr r3, 800e3b0 <__ieee754_pow+0x3a0>)
 800e256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25a:	4604      	mov	r4, r0
 800e25c:	460d      	mov	r5, r1
 800e25e:	f7f2 f9db 	bl	8000618 <__aeabi_dmul>
 800e262:	a355      	add	r3, pc, #340	; (adr r3, 800e3b8 <__ieee754_pow+0x3a8>)
 800e264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e268:	4606      	mov	r6, r0
 800e26a:	460f      	mov	r7, r1
 800e26c:	4620      	mov	r0, r4
 800e26e:	4629      	mov	r1, r5
 800e270:	f7f2 f9d2 	bl	8000618 <__aeabi_dmul>
 800e274:	4b5b      	ldr	r3, [pc, #364]	; (800e3e4 <__ieee754_pow+0x3d4>)
 800e276:	4682      	mov	sl, r0
 800e278:	468b      	mov	fp, r1
 800e27a:	2200      	movs	r2, #0
 800e27c:	4620      	mov	r0, r4
 800e27e:	4629      	mov	r1, r5
 800e280:	f7f2 f9ca 	bl	8000618 <__aeabi_dmul>
 800e284:	4602      	mov	r2, r0
 800e286:	460b      	mov	r3, r1
 800e288:	a14d      	add	r1, pc, #308	; (adr r1, 800e3c0 <__ieee754_pow+0x3b0>)
 800e28a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e28e:	f7f2 f80b 	bl	80002a8 <__aeabi_dsub>
 800e292:	4622      	mov	r2, r4
 800e294:	462b      	mov	r3, r5
 800e296:	f7f2 f9bf 	bl	8000618 <__aeabi_dmul>
 800e29a:	4602      	mov	r2, r0
 800e29c:	460b      	mov	r3, r1
 800e29e:	2000      	movs	r0, #0
 800e2a0:	4951      	ldr	r1, [pc, #324]	; (800e3e8 <__ieee754_pow+0x3d8>)
 800e2a2:	f7f2 f801 	bl	80002a8 <__aeabi_dsub>
 800e2a6:	4622      	mov	r2, r4
 800e2a8:	4680      	mov	r8, r0
 800e2aa:	4689      	mov	r9, r1
 800e2ac:	462b      	mov	r3, r5
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	4629      	mov	r1, r5
 800e2b2:	f7f2 f9b1 	bl	8000618 <__aeabi_dmul>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	4640      	mov	r0, r8
 800e2bc:	4649      	mov	r1, r9
 800e2be:	f7f2 f9ab 	bl	8000618 <__aeabi_dmul>
 800e2c2:	a341      	add	r3, pc, #260	; (adr r3, 800e3c8 <__ieee754_pow+0x3b8>)
 800e2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c8:	f7f2 f9a6 	bl	8000618 <__aeabi_dmul>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	4650      	mov	r0, sl
 800e2d2:	4659      	mov	r1, fp
 800e2d4:	f7f1 ffe8 	bl	80002a8 <__aeabi_dsub>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	460b      	mov	r3, r1
 800e2dc:	4680      	mov	r8, r0
 800e2de:	4689      	mov	r9, r1
 800e2e0:	4630      	mov	r0, r6
 800e2e2:	4639      	mov	r1, r7
 800e2e4:	f7f1 ffe2 	bl	80002ac <__adddf3>
 800e2e8:	2400      	movs	r4, #0
 800e2ea:	4632      	mov	r2, r6
 800e2ec:	463b      	mov	r3, r7
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	460d      	mov	r5, r1
 800e2f2:	f7f1 ffd9 	bl	80002a8 <__aeabi_dsub>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	4640      	mov	r0, r8
 800e2fc:	4649      	mov	r1, r9
 800e2fe:	f7f1 ffd3 	bl	80002a8 <__aeabi_dsub>
 800e302:	9b00      	ldr	r3, [sp, #0]
 800e304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e306:	3b01      	subs	r3, #1
 800e308:	4313      	orrs	r3, r2
 800e30a:	4682      	mov	sl, r0
 800e30c:	468b      	mov	fp, r1
 800e30e:	f040 81f1 	bne.w	800e6f4 <__ieee754_pow+0x6e4>
 800e312:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e3d0 <__ieee754_pow+0x3c0>
 800e316:	eeb0 8a47 	vmov.f32	s16, s14
 800e31a:	eef0 8a67 	vmov.f32	s17, s15
 800e31e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e322:	2600      	movs	r6, #0
 800e324:	4632      	mov	r2, r6
 800e326:	463b      	mov	r3, r7
 800e328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e32c:	f7f1 ffbc 	bl	80002a8 <__aeabi_dsub>
 800e330:	4622      	mov	r2, r4
 800e332:	462b      	mov	r3, r5
 800e334:	f7f2 f970 	bl	8000618 <__aeabi_dmul>
 800e338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e33c:	4680      	mov	r8, r0
 800e33e:	4689      	mov	r9, r1
 800e340:	4650      	mov	r0, sl
 800e342:	4659      	mov	r1, fp
 800e344:	f7f2 f968 	bl	8000618 <__aeabi_dmul>
 800e348:	4602      	mov	r2, r0
 800e34a:	460b      	mov	r3, r1
 800e34c:	4640      	mov	r0, r8
 800e34e:	4649      	mov	r1, r9
 800e350:	f7f1 ffac 	bl	80002ac <__adddf3>
 800e354:	4632      	mov	r2, r6
 800e356:	463b      	mov	r3, r7
 800e358:	4680      	mov	r8, r0
 800e35a:	4689      	mov	r9, r1
 800e35c:	4620      	mov	r0, r4
 800e35e:	4629      	mov	r1, r5
 800e360:	f7f2 f95a 	bl	8000618 <__aeabi_dmul>
 800e364:	460b      	mov	r3, r1
 800e366:	4604      	mov	r4, r0
 800e368:	460d      	mov	r5, r1
 800e36a:	4602      	mov	r2, r0
 800e36c:	4649      	mov	r1, r9
 800e36e:	4640      	mov	r0, r8
 800e370:	f7f1 ff9c 	bl	80002ac <__adddf3>
 800e374:	4b1d      	ldr	r3, [pc, #116]	; (800e3ec <__ieee754_pow+0x3dc>)
 800e376:	4299      	cmp	r1, r3
 800e378:	ec45 4b19 	vmov	d9, r4, r5
 800e37c:	4606      	mov	r6, r0
 800e37e:	460f      	mov	r7, r1
 800e380:	468b      	mov	fp, r1
 800e382:	f340 82fe 	ble.w	800e982 <__ieee754_pow+0x972>
 800e386:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e38a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e38e:	4303      	orrs	r3, r0
 800e390:	f000 81f0 	beq.w	800e774 <__ieee754_pow+0x764>
 800e394:	a310      	add	r3, pc, #64	; (adr r3, 800e3d8 <__ieee754_pow+0x3c8>)
 800e396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39a:	ec51 0b18 	vmov	r0, r1, d8
 800e39e:	f7f2 f93b 	bl	8000618 <__aeabi_dmul>
 800e3a2:	a30d      	add	r3, pc, #52	; (adr r3, 800e3d8 <__ieee754_pow+0x3c8>)
 800e3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a8:	e6cb      	b.n	800e142 <__ieee754_pow+0x132>
 800e3aa:	bf00      	nop
 800e3ac:	f3af 8000 	nop.w
 800e3b0:	60000000 	.word	0x60000000
 800e3b4:	3ff71547 	.word	0x3ff71547
 800e3b8:	f85ddf44 	.word	0xf85ddf44
 800e3bc:	3e54ae0b 	.word	0x3e54ae0b
 800e3c0:	55555555 	.word	0x55555555
 800e3c4:	3fd55555 	.word	0x3fd55555
 800e3c8:	652b82fe 	.word	0x652b82fe
 800e3cc:	3ff71547 	.word	0x3ff71547
 800e3d0:	00000000 	.word	0x00000000
 800e3d4:	bff00000 	.word	0xbff00000
 800e3d8:	8800759c 	.word	0x8800759c
 800e3dc:	7e37e43c 	.word	0x7e37e43c
 800e3e0:	3ff00000 	.word	0x3ff00000
 800e3e4:	3fd00000 	.word	0x3fd00000
 800e3e8:	3fe00000 	.word	0x3fe00000
 800e3ec:	408fffff 	.word	0x408fffff
 800e3f0:	4bd7      	ldr	r3, [pc, #860]	; (800e750 <__ieee754_pow+0x740>)
 800e3f2:	ea03 0309 	and.w	r3, r3, r9
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	b92b      	cbnz	r3, 800e406 <__ieee754_pow+0x3f6>
 800e3fa:	4bd6      	ldr	r3, [pc, #856]	; (800e754 <__ieee754_pow+0x744>)
 800e3fc:	f7f2 f90c 	bl	8000618 <__aeabi_dmul>
 800e400:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e404:	460c      	mov	r4, r1
 800e406:	1523      	asrs	r3, r4, #20
 800e408:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e40c:	4413      	add	r3, r2
 800e40e:	9309      	str	r3, [sp, #36]	; 0x24
 800e410:	4bd1      	ldr	r3, [pc, #836]	; (800e758 <__ieee754_pow+0x748>)
 800e412:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e416:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e41a:	429c      	cmp	r4, r3
 800e41c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e420:	dd08      	ble.n	800e434 <__ieee754_pow+0x424>
 800e422:	4bce      	ldr	r3, [pc, #824]	; (800e75c <__ieee754_pow+0x74c>)
 800e424:	429c      	cmp	r4, r3
 800e426:	f340 8163 	ble.w	800e6f0 <__ieee754_pow+0x6e0>
 800e42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e42c:	3301      	adds	r3, #1
 800e42e:	9309      	str	r3, [sp, #36]	; 0x24
 800e430:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e434:	2400      	movs	r4, #0
 800e436:	00e3      	lsls	r3, r4, #3
 800e438:	930b      	str	r3, [sp, #44]	; 0x2c
 800e43a:	4bc9      	ldr	r3, [pc, #804]	; (800e760 <__ieee754_pow+0x750>)
 800e43c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e440:	ed93 7b00 	vldr	d7, [r3]
 800e444:	4629      	mov	r1, r5
 800e446:	ec53 2b17 	vmov	r2, r3, d7
 800e44a:	eeb0 8a47 	vmov.f32	s16, s14
 800e44e:	eef0 8a67 	vmov.f32	s17, s15
 800e452:	4682      	mov	sl, r0
 800e454:	f7f1 ff28 	bl	80002a8 <__aeabi_dsub>
 800e458:	4652      	mov	r2, sl
 800e45a:	4606      	mov	r6, r0
 800e45c:	460f      	mov	r7, r1
 800e45e:	462b      	mov	r3, r5
 800e460:	ec51 0b18 	vmov	r0, r1, d8
 800e464:	f7f1 ff22 	bl	80002ac <__adddf3>
 800e468:	4602      	mov	r2, r0
 800e46a:	460b      	mov	r3, r1
 800e46c:	2000      	movs	r0, #0
 800e46e:	49bd      	ldr	r1, [pc, #756]	; (800e764 <__ieee754_pow+0x754>)
 800e470:	f7f2 f9fc 	bl	800086c <__aeabi_ddiv>
 800e474:	ec41 0b19 	vmov	d9, r0, r1
 800e478:	4602      	mov	r2, r0
 800e47a:	460b      	mov	r3, r1
 800e47c:	4630      	mov	r0, r6
 800e47e:	4639      	mov	r1, r7
 800e480:	f7f2 f8ca 	bl	8000618 <__aeabi_dmul>
 800e484:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e488:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e48c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e490:	2300      	movs	r3, #0
 800e492:	9304      	str	r3, [sp, #16]
 800e494:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e498:	46ab      	mov	fp, r5
 800e49a:	106d      	asrs	r5, r5, #1
 800e49c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e4a0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e4a4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	4640      	mov	r0, r8
 800e4ac:	4649      	mov	r1, r9
 800e4ae:	4614      	mov	r4, r2
 800e4b0:	461d      	mov	r5, r3
 800e4b2:	f7f2 f8b1 	bl	8000618 <__aeabi_dmul>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	460b      	mov	r3, r1
 800e4ba:	4630      	mov	r0, r6
 800e4bc:	4639      	mov	r1, r7
 800e4be:	f7f1 fef3 	bl	80002a8 <__aeabi_dsub>
 800e4c2:	ec53 2b18 	vmov	r2, r3, d8
 800e4c6:	4606      	mov	r6, r0
 800e4c8:	460f      	mov	r7, r1
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	4629      	mov	r1, r5
 800e4ce:	f7f1 feeb 	bl	80002a8 <__aeabi_dsub>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	4650      	mov	r0, sl
 800e4d8:	4659      	mov	r1, fp
 800e4da:	f7f1 fee5 	bl	80002a8 <__aeabi_dsub>
 800e4de:	4642      	mov	r2, r8
 800e4e0:	464b      	mov	r3, r9
 800e4e2:	f7f2 f899 	bl	8000618 <__aeabi_dmul>
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	460b      	mov	r3, r1
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	4639      	mov	r1, r7
 800e4ee:	f7f1 fedb 	bl	80002a8 <__aeabi_dsub>
 800e4f2:	ec53 2b19 	vmov	r2, r3, d9
 800e4f6:	f7f2 f88f 	bl	8000618 <__aeabi_dmul>
 800e4fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e4fe:	ec41 0b18 	vmov	d8, r0, r1
 800e502:	4610      	mov	r0, r2
 800e504:	4619      	mov	r1, r3
 800e506:	f7f2 f887 	bl	8000618 <__aeabi_dmul>
 800e50a:	a37d      	add	r3, pc, #500	; (adr r3, 800e700 <__ieee754_pow+0x6f0>)
 800e50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e510:	4604      	mov	r4, r0
 800e512:	460d      	mov	r5, r1
 800e514:	f7f2 f880 	bl	8000618 <__aeabi_dmul>
 800e518:	a37b      	add	r3, pc, #492	; (adr r3, 800e708 <__ieee754_pow+0x6f8>)
 800e51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51e:	f7f1 fec5 	bl	80002ac <__adddf3>
 800e522:	4622      	mov	r2, r4
 800e524:	462b      	mov	r3, r5
 800e526:	f7f2 f877 	bl	8000618 <__aeabi_dmul>
 800e52a:	a379      	add	r3, pc, #484	; (adr r3, 800e710 <__ieee754_pow+0x700>)
 800e52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e530:	f7f1 febc 	bl	80002ac <__adddf3>
 800e534:	4622      	mov	r2, r4
 800e536:	462b      	mov	r3, r5
 800e538:	f7f2 f86e 	bl	8000618 <__aeabi_dmul>
 800e53c:	a376      	add	r3, pc, #472	; (adr r3, 800e718 <__ieee754_pow+0x708>)
 800e53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e542:	f7f1 feb3 	bl	80002ac <__adddf3>
 800e546:	4622      	mov	r2, r4
 800e548:	462b      	mov	r3, r5
 800e54a:	f7f2 f865 	bl	8000618 <__aeabi_dmul>
 800e54e:	a374      	add	r3, pc, #464	; (adr r3, 800e720 <__ieee754_pow+0x710>)
 800e550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e554:	f7f1 feaa 	bl	80002ac <__adddf3>
 800e558:	4622      	mov	r2, r4
 800e55a:	462b      	mov	r3, r5
 800e55c:	f7f2 f85c 	bl	8000618 <__aeabi_dmul>
 800e560:	a371      	add	r3, pc, #452	; (adr r3, 800e728 <__ieee754_pow+0x718>)
 800e562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e566:	f7f1 fea1 	bl	80002ac <__adddf3>
 800e56a:	4622      	mov	r2, r4
 800e56c:	4606      	mov	r6, r0
 800e56e:	460f      	mov	r7, r1
 800e570:	462b      	mov	r3, r5
 800e572:	4620      	mov	r0, r4
 800e574:	4629      	mov	r1, r5
 800e576:	f7f2 f84f 	bl	8000618 <__aeabi_dmul>
 800e57a:	4602      	mov	r2, r0
 800e57c:	460b      	mov	r3, r1
 800e57e:	4630      	mov	r0, r6
 800e580:	4639      	mov	r1, r7
 800e582:	f7f2 f849 	bl	8000618 <__aeabi_dmul>
 800e586:	4642      	mov	r2, r8
 800e588:	4604      	mov	r4, r0
 800e58a:	460d      	mov	r5, r1
 800e58c:	464b      	mov	r3, r9
 800e58e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e592:	f7f1 fe8b 	bl	80002ac <__adddf3>
 800e596:	ec53 2b18 	vmov	r2, r3, d8
 800e59a:	f7f2 f83d 	bl	8000618 <__aeabi_dmul>
 800e59e:	4622      	mov	r2, r4
 800e5a0:	462b      	mov	r3, r5
 800e5a2:	f7f1 fe83 	bl	80002ac <__adddf3>
 800e5a6:	4642      	mov	r2, r8
 800e5a8:	4682      	mov	sl, r0
 800e5aa:	468b      	mov	fp, r1
 800e5ac:	464b      	mov	r3, r9
 800e5ae:	4640      	mov	r0, r8
 800e5b0:	4649      	mov	r1, r9
 800e5b2:	f7f2 f831 	bl	8000618 <__aeabi_dmul>
 800e5b6:	4b6c      	ldr	r3, [pc, #432]	; (800e768 <__ieee754_pow+0x758>)
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	4606      	mov	r6, r0
 800e5bc:	460f      	mov	r7, r1
 800e5be:	f7f1 fe75 	bl	80002ac <__adddf3>
 800e5c2:	4652      	mov	r2, sl
 800e5c4:	465b      	mov	r3, fp
 800e5c6:	f7f1 fe71 	bl	80002ac <__adddf3>
 800e5ca:	9c04      	ldr	r4, [sp, #16]
 800e5cc:	460d      	mov	r5, r1
 800e5ce:	4622      	mov	r2, r4
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	4640      	mov	r0, r8
 800e5d4:	4649      	mov	r1, r9
 800e5d6:	f7f2 f81f 	bl	8000618 <__aeabi_dmul>
 800e5da:	4b63      	ldr	r3, [pc, #396]	; (800e768 <__ieee754_pow+0x758>)
 800e5dc:	4680      	mov	r8, r0
 800e5de:	4689      	mov	r9, r1
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	4629      	mov	r1, r5
 800e5e6:	f7f1 fe5f 	bl	80002a8 <__aeabi_dsub>
 800e5ea:	4632      	mov	r2, r6
 800e5ec:	463b      	mov	r3, r7
 800e5ee:	f7f1 fe5b 	bl	80002a8 <__aeabi_dsub>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	4650      	mov	r0, sl
 800e5f8:	4659      	mov	r1, fp
 800e5fa:	f7f1 fe55 	bl	80002a8 <__aeabi_dsub>
 800e5fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e602:	f7f2 f809 	bl	8000618 <__aeabi_dmul>
 800e606:	4622      	mov	r2, r4
 800e608:	4606      	mov	r6, r0
 800e60a:	460f      	mov	r7, r1
 800e60c:	462b      	mov	r3, r5
 800e60e:	ec51 0b18 	vmov	r0, r1, d8
 800e612:	f7f2 f801 	bl	8000618 <__aeabi_dmul>
 800e616:	4602      	mov	r2, r0
 800e618:	460b      	mov	r3, r1
 800e61a:	4630      	mov	r0, r6
 800e61c:	4639      	mov	r1, r7
 800e61e:	f7f1 fe45 	bl	80002ac <__adddf3>
 800e622:	4606      	mov	r6, r0
 800e624:	460f      	mov	r7, r1
 800e626:	4602      	mov	r2, r0
 800e628:	460b      	mov	r3, r1
 800e62a:	4640      	mov	r0, r8
 800e62c:	4649      	mov	r1, r9
 800e62e:	f7f1 fe3d 	bl	80002ac <__adddf3>
 800e632:	9c04      	ldr	r4, [sp, #16]
 800e634:	a33e      	add	r3, pc, #248	; (adr r3, 800e730 <__ieee754_pow+0x720>)
 800e636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63a:	4620      	mov	r0, r4
 800e63c:	460d      	mov	r5, r1
 800e63e:	f7f1 ffeb 	bl	8000618 <__aeabi_dmul>
 800e642:	4642      	mov	r2, r8
 800e644:	ec41 0b18 	vmov	d8, r0, r1
 800e648:	464b      	mov	r3, r9
 800e64a:	4620      	mov	r0, r4
 800e64c:	4629      	mov	r1, r5
 800e64e:	f7f1 fe2b 	bl	80002a8 <__aeabi_dsub>
 800e652:	4602      	mov	r2, r0
 800e654:	460b      	mov	r3, r1
 800e656:	4630      	mov	r0, r6
 800e658:	4639      	mov	r1, r7
 800e65a:	f7f1 fe25 	bl	80002a8 <__aeabi_dsub>
 800e65e:	a336      	add	r3, pc, #216	; (adr r3, 800e738 <__ieee754_pow+0x728>)
 800e660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e664:	f7f1 ffd8 	bl	8000618 <__aeabi_dmul>
 800e668:	a335      	add	r3, pc, #212	; (adr r3, 800e740 <__ieee754_pow+0x730>)
 800e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66e:	4606      	mov	r6, r0
 800e670:	460f      	mov	r7, r1
 800e672:	4620      	mov	r0, r4
 800e674:	4629      	mov	r1, r5
 800e676:	f7f1 ffcf 	bl	8000618 <__aeabi_dmul>
 800e67a:	4602      	mov	r2, r0
 800e67c:	460b      	mov	r3, r1
 800e67e:	4630      	mov	r0, r6
 800e680:	4639      	mov	r1, r7
 800e682:	f7f1 fe13 	bl	80002ac <__adddf3>
 800e686:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e688:	4b38      	ldr	r3, [pc, #224]	; (800e76c <__ieee754_pow+0x75c>)
 800e68a:	4413      	add	r3, r2
 800e68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e690:	f7f1 fe0c 	bl	80002ac <__adddf3>
 800e694:	4682      	mov	sl, r0
 800e696:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e698:	468b      	mov	fp, r1
 800e69a:	f7f1 ff53 	bl	8000544 <__aeabi_i2d>
 800e69e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e6a0:	4b33      	ldr	r3, [pc, #204]	; (800e770 <__ieee754_pow+0x760>)
 800e6a2:	4413      	add	r3, r2
 800e6a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e6a8:	4606      	mov	r6, r0
 800e6aa:	460f      	mov	r7, r1
 800e6ac:	4652      	mov	r2, sl
 800e6ae:	465b      	mov	r3, fp
 800e6b0:	ec51 0b18 	vmov	r0, r1, d8
 800e6b4:	f7f1 fdfa 	bl	80002ac <__adddf3>
 800e6b8:	4642      	mov	r2, r8
 800e6ba:	464b      	mov	r3, r9
 800e6bc:	f7f1 fdf6 	bl	80002ac <__adddf3>
 800e6c0:	4632      	mov	r2, r6
 800e6c2:	463b      	mov	r3, r7
 800e6c4:	f7f1 fdf2 	bl	80002ac <__adddf3>
 800e6c8:	9c04      	ldr	r4, [sp, #16]
 800e6ca:	4632      	mov	r2, r6
 800e6cc:	463b      	mov	r3, r7
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	460d      	mov	r5, r1
 800e6d2:	f7f1 fde9 	bl	80002a8 <__aeabi_dsub>
 800e6d6:	4642      	mov	r2, r8
 800e6d8:	464b      	mov	r3, r9
 800e6da:	f7f1 fde5 	bl	80002a8 <__aeabi_dsub>
 800e6de:	ec53 2b18 	vmov	r2, r3, d8
 800e6e2:	f7f1 fde1 	bl	80002a8 <__aeabi_dsub>
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	4650      	mov	r0, sl
 800e6ec:	4659      	mov	r1, fp
 800e6ee:	e606      	b.n	800e2fe <__ieee754_pow+0x2ee>
 800e6f0:	2401      	movs	r4, #1
 800e6f2:	e6a0      	b.n	800e436 <__ieee754_pow+0x426>
 800e6f4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e748 <__ieee754_pow+0x738>
 800e6f8:	e60d      	b.n	800e316 <__ieee754_pow+0x306>
 800e6fa:	bf00      	nop
 800e6fc:	f3af 8000 	nop.w
 800e700:	4a454eef 	.word	0x4a454eef
 800e704:	3fca7e28 	.word	0x3fca7e28
 800e708:	93c9db65 	.word	0x93c9db65
 800e70c:	3fcd864a 	.word	0x3fcd864a
 800e710:	a91d4101 	.word	0xa91d4101
 800e714:	3fd17460 	.word	0x3fd17460
 800e718:	518f264d 	.word	0x518f264d
 800e71c:	3fd55555 	.word	0x3fd55555
 800e720:	db6fabff 	.word	0xdb6fabff
 800e724:	3fdb6db6 	.word	0x3fdb6db6
 800e728:	33333303 	.word	0x33333303
 800e72c:	3fe33333 	.word	0x3fe33333
 800e730:	e0000000 	.word	0xe0000000
 800e734:	3feec709 	.word	0x3feec709
 800e738:	dc3a03fd 	.word	0xdc3a03fd
 800e73c:	3feec709 	.word	0x3feec709
 800e740:	145b01f5 	.word	0x145b01f5
 800e744:	be3e2fe0 	.word	0xbe3e2fe0
 800e748:	00000000 	.word	0x00000000
 800e74c:	3ff00000 	.word	0x3ff00000
 800e750:	7ff00000 	.word	0x7ff00000
 800e754:	43400000 	.word	0x43400000
 800e758:	0003988e 	.word	0x0003988e
 800e75c:	000bb679 	.word	0x000bb679
 800e760:	08010128 	.word	0x08010128
 800e764:	3ff00000 	.word	0x3ff00000
 800e768:	40080000 	.word	0x40080000
 800e76c:	08010148 	.word	0x08010148
 800e770:	08010138 	.word	0x08010138
 800e774:	a3b5      	add	r3, pc, #724	; (adr r3, 800ea4c <__ieee754_pow+0xa3c>)
 800e776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77a:	4640      	mov	r0, r8
 800e77c:	4649      	mov	r1, r9
 800e77e:	f7f1 fd95 	bl	80002ac <__adddf3>
 800e782:	4622      	mov	r2, r4
 800e784:	ec41 0b1a 	vmov	d10, r0, r1
 800e788:	462b      	mov	r3, r5
 800e78a:	4630      	mov	r0, r6
 800e78c:	4639      	mov	r1, r7
 800e78e:	f7f1 fd8b 	bl	80002a8 <__aeabi_dsub>
 800e792:	4602      	mov	r2, r0
 800e794:	460b      	mov	r3, r1
 800e796:	ec51 0b1a 	vmov	r0, r1, d10
 800e79a:	f7f2 f9cd 	bl	8000b38 <__aeabi_dcmpgt>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	f47f adf8 	bne.w	800e394 <__ieee754_pow+0x384>
 800e7a4:	4aa4      	ldr	r2, [pc, #656]	; (800ea38 <__ieee754_pow+0xa28>)
 800e7a6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	f340 810b 	ble.w	800e9c6 <__ieee754_pow+0x9b6>
 800e7b0:	151b      	asrs	r3, r3, #20
 800e7b2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e7b6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e7ba:	fa4a f303 	asr.w	r3, sl, r3
 800e7be:	445b      	add	r3, fp
 800e7c0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e7c4:	4e9d      	ldr	r6, [pc, #628]	; (800ea3c <__ieee754_pow+0xa2c>)
 800e7c6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e7ca:	4116      	asrs	r6, r2
 800e7cc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e7d0:	2000      	movs	r0, #0
 800e7d2:	ea23 0106 	bic.w	r1, r3, r6
 800e7d6:	f1c2 0214 	rsb	r2, r2, #20
 800e7da:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e7de:	fa4a fa02 	asr.w	sl, sl, r2
 800e7e2:	f1bb 0f00 	cmp.w	fp, #0
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	bfb8      	it	lt
 800e7f0:	f1ca 0a00 	rsblt	sl, sl, #0
 800e7f4:	f7f1 fd58 	bl	80002a8 <__aeabi_dsub>
 800e7f8:	ec41 0b19 	vmov	d9, r0, r1
 800e7fc:	4642      	mov	r2, r8
 800e7fe:	464b      	mov	r3, r9
 800e800:	ec51 0b19 	vmov	r0, r1, d9
 800e804:	f7f1 fd52 	bl	80002ac <__adddf3>
 800e808:	2400      	movs	r4, #0
 800e80a:	a379      	add	r3, pc, #484	; (adr r3, 800e9f0 <__ieee754_pow+0x9e0>)
 800e80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e810:	4620      	mov	r0, r4
 800e812:	460d      	mov	r5, r1
 800e814:	f7f1 ff00 	bl	8000618 <__aeabi_dmul>
 800e818:	ec53 2b19 	vmov	r2, r3, d9
 800e81c:	4606      	mov	r6, r0
 800e81e:	460f      	mov	r7, r1
 800e820:	4620      	mov	r0, r4
 800e822:	4629      	mov	r1, r5
 800e824:	f7f1 fd40 	bl	80002a8 <__aeabi_dsub>
 800e828:	4602      	mov	r2, r0
 800e82a:	460b      	mov	r3, r1
 800e82c:	4640      	mov	r0, r8
 800e82e:	4649      	mov	r1, r9
 800e830:	f7f1 fd3a 	bl	80002a8 <__aeabi_dsub>
 800e834:	a370      	add	r3, pc, #448	; (adr r3, 800e9f8 <__ieee754_pow+0x9e8>)
 800e836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83a:	f7f1 feed 	bl	8000618 <__aeabi_dmul>
 800e83e:	a370      	add	r3, pc, #448	; (adr r3, 800ea00 <__ieee754_pow+0x9f0>)
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	4680      	mov	r8, r0
 800e846:	4689      	mov	r9, r1
 800e848:	4620      	mov	r0, r4
 800e84a:	4629      	mov	r1, r5
 800e84c:	f7f1 fee4 	bl	8000618 <__aeabi_dmul>
 800e850:	4602      	mov	r2, r0
 800e852:	460b      	mov	r3, r1
 800e854:	4640      	mov	r0, r8
 800e856:	4649      	mov	r1, r9
 800e858:	f7f1 fd28 	bl	80002ac <__adddf3>
 800e85c:	4604      	mov	r4, r0
 800e85e:	460d      	mov	r5, r1
 800e860:	4602      	mov	r2, r0
 800e862:	460b      	mov	r3, r1
 800e864:	4630      	mov	r0, r6
 800e866:	4639      	mov	r1, r7
 800e868:	f7f1 fd20 	bl	80002ac <__adddf3>
 800e86c:	4632      	mov	r2, r6
 800e86e:	463b      	mov	r3, r7
 800e870:	4680      	mov	r8, r0
 800e872:	4689      	mov	r9, r1
 800e874:	f7f1 fd18 	bl	80002a8 <__aeabi_dsub>
 800e878:	4602      	mov	r2, r0
 800e87a:	460b      	mov	r3, r1
 800e87c:	4620      	mov	r0, r4
 800e87e:	4629      	mov	r1, r5
 800e880:	f7f1 fd12 	bl	80002a8 <__aeabi_dsub>
 800e884:	4642      	mov	r2, r8
 800e886:	4606      	mov	r6, r0
 800e888:	460f      	mov	r7, r1
 800e88a:	464b      	mov	r3, r9
 800e88c:	4640      	mov	r0, r8
 800e88e:	4649      	mov	r1, r9
 800e890:	f7f1 fec2 	bl	8000618 <__aeabi_dmul>
 800e894:	a35c      	add	r3, pc, #368	; (adr r3, 800ea08 <__ieee754_pow+0x9f8>)
 800e896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89a:	4604      	mov	r4, r0
 800e89c:	460d      	mov	r5, r1
 800e89e:	f7f1 febb 	bl	8000618 <__aeabi_dmul>
 800e8a2:	a35b      	add	r3, pc, #364	; (adr r3, 800ea10 <__ieee754_pow+0xa00>)
 800e8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a8:	f7f1 fcfe 	bl	80002a8 <__aeabi_dsub>
 800e8ac:	4622      	mov	r2, r4
 800e8ae:	462b      	mov	r3, r5
 800e8b0:	f7f1 feb2 	bl	8000618 <__aeabi_dmul>
 800e8b4:	a358      	add	r3, pc, #352	; (adr r3, 800ea18 <__ieee754_pow+0xa08>)
 800e8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ba:	f7f1 fcf7 	bl	80002ac <__adddf3>
 800e8be:	4622      	mov	r2, r4
 800e8c0:	462b      	mov	r3, r5
 800e8c2:	f7f1 fea9 	bl	8000618 <__aeabi_dmul>
 800e8c6:	a356      	add	r3, pc, #344	; (adr r3, 800ea20 <__ieee754_pow+0xa10>)
 800e8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8cc:	f7f1 fcec 	bl	80002a8 <__aeabi_dsub>
 800e8d0:	4622      	mov	r2, r4
 800e8d2:	462b      	mov	r3, r5
 800e8d4:	f7f1 fea0 	bl	8000618 <__aeabi_dmul>
 800e8d8:	a353      	add	r3, pc, #332	; (adr r3, 800ea28 <__ieee754_pow+0xa18>)
 800e8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8de:	f7f1 fce5 	bl	80002ac <__adddf3>
 800e8e2:	4622      	mov	r2, r4
 800e8e4:	462b      	mov	r3, r5
 800e8e6:	f7f1 fe97 	bl	8000618 <__aeabi_dmul>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	4640      	mov	r0, r8
 800e8f0:	4649      	mov	r1, r9
 800e8f2:	f7f1 fcd9 	bl	80002a8 <__aeabi_dsub>
 800e8f6:	4604      	mov	r4, r0
 800e8f8:	460d      	mov	r5, r1
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	460b      	mov	r3, r1
 800e8fe:	4640      	mov	r0, r8
 800e900:	4649      	mov	r1, r9
 800e902:	f7f1 fe89 	bl	8000618 <__aeabi_dmul>
 800e906:	2200      	movs	r2, #0
 800e908:	ec41 0b19 	vmov	d9, r0, r1
 800e90c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e910:	4620      	mov	r0, r4
 800e912:	4629      	mov	r1, r5
 800e914:	f7f1 fcc8 	bl	80002a8 <__aeabi_dsub>
 800e918:	4602      	mov	r2, r0
 800e91a:	460b      	mov	r3, r1
 800e91c:	ec51 0b19 	vmov	r0, r1, d9
 800e920:	f7f1 ffa4 	bl	800086c <__aeabi_ddiv>
 800e924:	4632      	mov	r2, r6
 800e926:	4604      	mov	r4, r0
 800e928:	460d      	mov	r5, r1
 800e92a:	463b      	mov	r3, r7
 800e92c:	4640      	mov	r0, r8
 800e92e:	4649      	mov	r1, r9
 800e930:	f7f1 fe72 	bl	8000618 <__aeabi_dmul>
 800e934:	4632      	mov	r2, r6
 800e936:	463b      	mov	r3, r7
 800e938:	f7f1 fcb8 	bl	80002ac <__adddf3>
 800e93c:	4602      	mov	r2, r0
 800e93e:	460b      	mov	r3, r1
 800e940:	4620      	mov	r0, r4
 800e942:	4629      	mov	r1, r5
 800e944:	f7f1 fcb0 	bl	80002a8 <__aeabi_dsub>
 800e948:	4642      	mov	r2, r8
 800e94a:	464b      	mov	r3, r9
 800e94c:	f7f1 fcac 	bl	80002a8 <__aeabi_dsub>
 800e950:	460b      	mov	r3, r1
 800e952:	4602      	mov	r2, r0
 800e954:	493a      	ldr	r1, [pc, #232]	; (800ea40 <__ieee754_pow+0xa30>)
 800e956:	2000      	movs	r0, #0
 800e958:	f7f1 fca6 	bl	80002a8 <__aeabi_dsub>
 800e95c:	e9cd 0100 	strd	r0, r1, [sp]
 800e960:	9b01      	ldr	r3, [sp, #4]
 800e962:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e96a:	da2f      	bge.n	800e9cc <__ieee754_pow+0x9bc>
 800e96c:	4650      	mov	r0, sl
 800e96e:	ed9d 0b00 	vldr	d0, [sp]
 800e972:	f000 f9c1 	bl	800ecf8 <scalbn>
 800e976:	ec51 0b10 	vmov	r0, r1, d0
 800e97a:	ec53 2b18 	vmov	r2, r3, d8
 800e97e:	f7ff bbe0 	b.w	800e142 <__ieee754_pow+0x132>
 800e982:	4b30      	ldr	r3, [pc, #192]	; (800ea44 <__ieee754_pow+0xa34>)
 800e984:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e988:	429e      	cmp	r6, r3
 800e98a:	f77f af0b 	ble.w	800e7a4 <__ieee754_pow+0x794>
 800e98e:	4b2e      	ldr	r3, [pc, #184]	; (800ea48 <__ieee754_pow+0xa38>)
 800e990:	440b      	add	r3, r1
 800e992:	4303      	orrs	r3, r0
 800e994:	d00b      	beq.n	800e9ae <__ieee754_pow+0x99e>
 800e996:	a326      	add	r3, pc, #152	; (adr r3, 800ea30 <__ieee754_pow+0xa20>)
 800e998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99c:	ec51 0b18 	vmov	r0, r1, d8
 800e9a0:	f7f1 fe3a 	bl	8000618 <__aeabi_dmul>
 800e9a4:	a322      	add	r3, pc, #136	; (adr r3, 800ea30 <__ieee754_pow+0xa20>)
 800e9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9aa:	f7ff bbca 	b.w	800e142 <__ieee754_pow+0x132>
 800e9ae:	4622      	mov	r2, r4
 800e9b0:	462b      	mov	r3, r5
 800e9b2:	f7f1 fc79 	bl	80002a8 <__aeabi_dsub>
 800e9b6:	4642      	mov	r2, r8
 800e9b8:	464b      	mov	r3, r9
 800e9ba:	f7f2 f8b3 	bl	8000b24 <__aeabi_dcmpge>
 800e9be:	2800      	cmp	r0, #0
 800e9c0:	f43f aef0 	beq.w	800e7a4 <__ieee754_pow+0x794>
 800e9c4:	e7e7      	b.n	800e996 <__ieee754_pow+0x986>
 800e9c6:	f04f 0a00 	mov.w	sl, #0
 800e9ca:	e717      	b.n	800e7fc <__ieee754_pow+0x7ec>
 800e9cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	e7d2      	b.n	800e97a <__ieee754_pow+0x96a>
 800e9d4:	491a      	ldr	r1, [pc, #104]	; (800ea40 <__ieee754_pow+0xa30>)
 800e9d6:	2000      	movs	r0, #0
 800e9d8:	f7ff bb9e 	b.w	800e118 <__ieee754_pow+0x108>
 800e9dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9e0:	f7ff bb9a 	b.w	800e118 <__ieee754_pow+0x108>
 800e9e4:	9000      	str	r0, [sp, #0]
 800e9e6:	f7ff bb76 	b.w	800e0d6 <__ieee754_pow+0xc6>
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	f7ff bb60 	b.w	800e0b0 <__ieee754_pow+0xa0>
 800e9f0:	00000000 	.word	0x00000000
 800e9f4:	3fe62e43 	.word	0x3fe62e43
 800e9f8:	fefa39ef 	.word	0xfefa39ef
 800e9fc:	3fe62e42 	.word	0x3fe62e42
 800ea00:	0ca86c39 	.word	0x0ca86c39
 800ea04:	be205c61 	.word	0xbe205c61
 800ea08:	72bea4d0 	.word	0x72bea4d0
 800ea0c:	3e663769 	.word	0x3e663769
 800ea10:	c5d26bf1 	.word	0xc5d26bf1
 800ea14:	3ebbbd41 	.word	0x3ebbbd41
 800ea18:	af25de2c 	.word	0xaf25de2c
 800ea1c:	3f11566a 	.word	0x3f11566a
 800ea20:	16bebd93 	.word	0x16bebd93
 800ea24:	3f66c16c 	.word	0x3f66c16c
 800ea28:	5555553e 	.word	0x5555553e
 800ea2c:	3fc55555 	.word	0x3fc55555
 800ea30:	c2f8f359 	.word	0xc2f8f359
 800ea34:	01a56e1f 	.word	0x01a56e1f
 800ea38:	3fe00000 	.word	0x3fe00000
 800ea3c:	000fffff 	.word	0x000fffff
 800ea40:	3ff00000 	.word	0x3ff00000
 800ea44:	4090cbff 	.word	0x4090cbff
 800ea48:	3f6f3400 	.word	0x3f6f3400
 800ea4c:	652b82fe 	.word	0x652b82fe
 800ea50:	3c971547 	.word	0x3c971547

0800ea54 <__ieee754_sqrt>:
 800ea54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea58:	ec55 4b10 	vmov	r4, r5, d0
 800ea5c:	4e56      	ldr	r6, [pc, #344]	; (800ebb8 <__ieee754_sqrt+0x164>)
 800ea5e:	43ae      	bics	r6, r5
 800ea60:	ee10 0a10 	vmov	r0, s0
 800ea64:	ee10 3a10 	vmov	r3, s0
 800ea68:	4629      	mov	r1, r5
 800ea6a:	462a      	mov	r2, r5
 800ea6c:	d110      	bne.n	800ea90 <__ieee754_sqrt+0x3c>
 800ea6e:	ee10 2a10 	vmov	r2, s0
 800ea72:	462b      	mov	r3, r5
 800ea74:	f7f1 fdd0 	bl	8000618 <__aeabi_dmul>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	4629      	mov	r1, r5
 800ea80:	f7f1 fc14 	bl	80002ac <__adddf3>
 800ea84:	4604      	mov	r4, r0
 800ea86:	460d      	mov	r5, r1
 800ea88:	ec45 4b10 	vmov	d0, r4, r5
 800ea8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea90:	2d00      	cmp	r5, #0
 800ea92:	dc10      	bgt.n	800eab6 <__ieee754_sqrt+0x62>
 800ea94:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ea98:	4330      	orrs	r0, r6
 800ea9a:	d0f5      	beq.n	800ea88 <__ieee754_sqrt+0x34>
 800ea9c:	b15d      	cbz	r5, 800eab6 <__ieee754_sqrt+0x62>
 800ea9e:	ee10 2a10 	vmov	r2, s0
 800eaa2:	462b      	mov	r3, r5
 800eaa4:	ee10 0a10 	vmov	r0, s0
 800eaa8:	f7f1 fbfe 	bl	80002a8 <__aeabi_dsub>
 800eaac:	4602      	mov	r2, r0
 800eaae:	460b      	mov	r3, r1
 800eab0:	f7f1 fedc 	bl	800086c <__aeabi_ddiv>
 800eab4:	e7e6      	b.n	800ea84 <__ieee754_sqrt+0x30>
 800eab6:	1509      	asrs	r1, r1, #20
 800eab8:	d076      	beq.n	800eba8 <__ieee754_sqrt+0x154>
 800eaba:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800eabe:	07ce      	lsls	r6, r1, #31
 800eac0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800eac4:	bf5e      	ittt	pl
 800eac6:	0fda      	lsrpl	r2, r3, #31
 800eac8:	005b      	lslpl	r3, r3, #1
 800eaca:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800eace:	0fda      	lsrs	r2, r3, #31
 800ead0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ead4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ead8:	2000      	movs	r0, #0
 800eada:	106d      	asrs	r5, r5, #1
 800eadc:	005b      	lsls	r3, r3, #1
 800eade:	f04f 0e16 	mov.w	lr, #22
 800eae2:	4684      	mov	ip, r0
 800eae4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eae8:	eb0c 0401 	add.w	r4, ip, r1
 800eaec:	4294      	cmp	r4, r2
 800eaee:	bfde      	ittt	le
 800eaf0:	1b12      	suble	r2, r2, r4
 800eaf2:	eb04 0c01 	addle.w	ip, r4, r1
 800eaf6:	1840      	addle	r0, r0, r1
 800eaf8:	0052      	lsls	r2, r2, #1
 800eafa:	f1be 0e01 	subs.w	lr, lr, #1
 800eafe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800eb02:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800eb06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eb0a:	d1ed      	bne.n	800eae8 <__ieee754_sqrt+0x94>
 800eb0c:	4671      	mov	r1, lr
 800eb0e:	2720      	movs	r7, #32
 800eb10:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800eb14:	4562      	cmp	r2, ip
 800eb16:	eb04 060e 	add.w	r6, r4, lr
 800eb1a:	dc02      	bgt.n	800eb22 <__ieee754_sqrt+0xce>
 800eb1c:	d113      	bne.n	800eb46 <__ieee754_sqrt+0xf2>
 800eb1e:	429e      	cmp	r6, r3
 800eb20:	d811      	bhi.n	800eb46 <__ieee754_sqrt+0xf2>
 800eb22:	2e00      	cmp	r6, #0
 800eb24:	eb06 0e04 	add.w	lr, r6, r4
 800eb28:	da43      	bge.n	800ebb2 <__ieee754_sqrt+0x15e>
 800eb2a:	f1be 0f00 	cmp.w	lr, #0
 800eb2e:	db40      	blt.n	800ebb2 <__ieee754_sqrt+0x15e>
 800eb30:	f10c 0801 	add.w	r8, ip, #1
 800eb34:	eba2 020c 	sub.w	r2, r2, ip
 800eb38:	429e      	cmp	r6, r3
 800eb3a:	bf88      	it	hi
 800eb3c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800eb40:	1b9b      	subs	r3, r3, r6
 800eb42:	4421      	add	r1, r4
 800eb44:	46c4      	mov	ip, r8
 800eb46:	0052      	lsls	r2, r2, #1
 800eb48:	3f01      	subs	r7, #1
 800eb4a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800eb4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800eb52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eb56:	d1dd      	bne.n	800eb14 <__ieee754_sqrt+0xc0>
 800eb58:	4313      	orrs	r3, r2
 800eb5a:	d006      	beq.n	800eb6a <__ieee754_sqrt+0x116>
 800eb5c:	1c4c      	adds	r4, r1, #1
 800eb5e:	bf13      	iteet	ne
 800eb60:	3101      	addne	r1, #1
 800eb62:	3001      	addeq	r0, #1
 800eb64:	4639      	moveq	r1, r7
 800eb66:	f021 0101 	bicne.w	r1, r1, #1
 800eb6a:	1043      	asrs	r3, r0, #1
 800eb6c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800eb70:	0849      	lsrs	r1, r1, #1
 800eb72:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800eb76:	07c2      	lsls	r2, r0, #31
 800eb78:	bf48      	it	mi
 800eb7a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800eb7e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800eb82:	460c      	mov	r4, r1
 800eb84:	463d      	mov	r5, r7
 800eb86:	e77f      	b.n	800ea88 <__ieee754_sqrt+0x34>
 800eb88:	0ada      	lsrs	r2, r3, #11
 800eb8a:	3815      	subs	r0, #21
 800eb8c:	055b      	lsls	r3, r3, #21
 800eb8e:	2a00      	cmp	r2, #0
 800eb90:	d0fa      	beq.n	800eb88 <__ieee754_sqrt+0x134>
 800eb92:	02d7      	lsls	r7, r2, #11
 800eb94:	d50a      	bpl.n	800ebac <__ieee754_sqrt+0x158>
 800eb96:	f1c1 0420 	rsb	r4, r1, #32
 800eb9a:	fa23 f404 	lsr.w	r4, r3, r4
 800eb9e:	1e4d      	subs	r5, r1, #1
 800eba0:	408b      	lsls	r3, r1
 800eba2:	4322      	orrs	r2, r4
 800eba4:	1b41      	subs	r1, r0, r5
 800eba6:	e788      	b.n	800eaba <__ieee754_sqrt+0x66>
 800eba8:	4608      	mov	r0, r1
 800ebaa:	e7f0      	b.n	800eb8e <__ieee754_sqrt+0x13a>
 800ebac:	0052      	lsls	r2, r2, #1
 800ebae:	3101      	adds	r1, #1
 800ebb0:	e7ef      	b.n	800eb92 <__ieee754_sqrt+0x13e>
 800ebb2:	46e0      	mov	r8, ip
 800ebb4:	e7be      	b.n	800eb34 <__ieee754_sqrt+0xe0>
 800ebb6:	bf00      	nop
 800ebb8:	7ff00000 	.word	0x7ff00000

0800ebbc <fabs>:
 800ebbc:	ec51 0b10 	vmov	r0, r1, d0
 800ebc0:	ee10 2a10 	vmov	r2, s0
 800ebc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ebc8:	ec43 2b10 	vmov	d0, r2, r3
 800ebcc:	4770      	bx	lr

0800ebce <finite>:
 800ebce:	b082      	sub	sp, #8
 800ebd0:	ed8d 0b00 	vstr	d0, [sp]
 800ebd4:	9801      	ldr	r0, [sp, #4]
 800ebd6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ebda:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ebde:	0fc0      	lsrs	r0, r0, #31
 800ebe0:	b002      	add	sp, #8
 800ebe2:	4770      	bx	lr

0800ebe4 <rint>:
 800ebe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebe6:	ec51 0b10 	vmov	r0, r1, d0
 800ebea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ebee:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ebf2:	2e13      	cmp	r6, #19
 800ebf4:	ee10 4a10 	vmov	r4, s0
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ebfe:	dc58      	bgt.n	800ecb2 <rint+0xce>
 800ec00:	2e00      	cmp	r6, #0
 800ec02:	da2b      	bge.n	800ec5c <rint+0x78>
 800ec04:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ec08:	4302      	orrs	r2, r0
 800ec0a:	d023      	beq.n	800ec54 <rint+0x70>
 800ec0c:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ec10:	4302      	orrs	r2, r0
 800ec12:	4254      	negs	r4, r2
 800ec14:	4314      	orrs	r4, r2
 800ec16:	0c4b      	lsrs	r3, r1, #17
 800ec18:	0b24      	lsrs	r4, r4, #12
 800ec1a:	045b      	lsls	r3, r3, #17
 800ec1c:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800ec20:	ea44 0103 	orr.w	r1, r4, r3
 800ec24:	4b32      	ldr	r3, [pc, #200]	; (800ecf0 <rint+0x10c>)
 800ec26:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ec2a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ec2e:	4602      	mov	r2, r0
 800ec30:	460b      	mov	r3, r1
 800ec32:	4630      	mov	r0, r6
 800ec34:	4639      	mov	r1, r7
 800ec36:	f7f1 fb39 	bl	80002ac <__adddf3>
 800ec3a:	e9cd 0100 	strd	r0, r1, [sp]
 800ec3e:	463b      	mov	r3, r7
 800ec40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec44:	4632      	mov	r2, r6
 800ec46:	f7f1 fb2f 	bl	80002a8 <__aeabi_dsub>
 800ec4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ec4e:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ec52:	4639      	mov	r1, r7
 800ec54:	ec41 0b10 	vmov	d0, r0, r1
 800ec58:	b003      	add	sp, #12
 800ec5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec5c:	4a25      	ldr	r2, [pc, #148]	; (800ecf4 <rint+0x110>)
 800ec5e:	4132      	asrs	r2, r6
 800ec60:	ea01 0702 	and.w	r7, r1, r2
 800ec64:	4307      	orrs	r7, r0
 800ec66:	d0f5      	beq.n	800ec54 <rint+0x70>
 800ec68:	0851      	lsrs	r1, r2, #1
 800ec6a:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800ec6e:	4314      	orrs	r4, r2
 800ec70:	d00c      	beq.n	800ec8c <rint+0xa8>
 800ec72:	ea23 0201 	bic.w	r2, r3, r1
 800ec76:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ec7a:	2e13      	cmp	r6, #19
 800ec7c:	fa43 f606 	asr.w	r6, r3, r6
 800ec80:	bf0c      	ite	eq
 800ec82:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ec86:	2400      	movne	r4, #0
 800ec88:	ea42 0306 	orr.w	r3, r2, r6
 800ec8c:	4918      	ldr	r1, [pc, #96]	; (800ecf0 <rint+0x10c>)
 800ec8e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ec92:	4622      	mov	r2, r4
 800ec94:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ec98:	4620      	mov	r0, r4
 800ec9a:	4629      	mov	r1, r5
 800ec9c:	f7f1 fb06 	bl	80002ac <__adddf3>
 800eca0:	e9cd 0100 	strd	r0, r1, [sp]
 800eca4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eca8:	4622      	mov	r2, r4
 800ecaa:	462b      	mov	r3, r5
 800ecac:	f7f1 fafc 	bl	80002a8 <__aeabi_dsub>
 800ecb0:	e7d0      	b.n	800ec54 <rint+0x70>
 800ecb2:	2e33      	cmp	r6, #51	; 0x33
 800ecb4:	dd07      	ble.n	800ecc6 <rint+0xe2>
 800ecb6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ecba:	d1cb      	bne.n	800ec54 <rint+0x70>
 800ecbc:	ee10 2a10 	vmov	r2, s0
 800ecc0:	f7f1 faf4 	bl	80002ac <__adddf3>
 800ecc4:	e7c6      	b.n	800ec54 <rint+0x70>
 800ecc6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ecca:	f04f 36ff 	mov.w	r6, #4294967295
 800ecce:	40d6      	lsrs	r6, r2
 800ecd0:	4230      	tst	r0, r6
 800ecd2:	d0bf      	beq.n	800ec54 <rint+0x70>
 800ecd4:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800ecd8:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800ecdc:	bf1f      	itttt	ne
 800ecde:	ea24 0101 	bicne.w	r1, r4, r1
 800ece2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ece6:	fa44 f202 	asrne.w	r2, r4, r2
 800ecea:	ea41 0402 	orrne.w	r4, r1, r2
 800ecee:	e7cd      	b.n	800ec8c <rint+0xa8>
 800ecf0:	08010158 	.word	0x08010158
 800ecf4:	000fffff 	.word	0x000fffff

0800ecf8 <scalbn>:
 800ecf8:	b570      	push	{r4, r5, r6, lr}
 800ecfa:	ec55 4b10 	vmov	r4, r5, d0
 800ecfe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ed02:	4606      	mov	r6, r0
 800ed04:	462b      	mov	r3, r5
 800ed06:	b99a      	cbnz	r2, 800ed30 <scalbn+0x38>
 800ed08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ed0c:	4323      	orrs	r3, r4
 800ed0e:	d036      	beq.n	800ed7e <scalbn+0x86>
 800ed10:	4b39      	ldr	r3, [pc, #228]	; (800edf8 <scalbn+0x100>)
 800ed12:	4629      	mov	r1, r5
 800ed14:	ee10 0a10 	vmov	r0, s0
 800ed18:	2200      	movs	r2, #0
 800ed1a:	f7f1 fc7d 	bl	8000618 <__aeabi_dmul>
 800ed1e:	4b37      	ldr	r3, [pc, #220]	; (800edfc <scalbn+0x104>)
 800ed20:	429e      	cmp	r6, r3
 800ed22:	4604      	mov	r4, r0
 800ed24:	460d      	mov	r5, r1
 800ed26:	da10      	bge.n	800ed4a <scalbn+0x52>
 800ed28:	a32b      	add	r3, pc, #172	; (adr r3, 800edd8 <scalbn+0xe0>)
 800ed2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2e:	e03a      	b.n	800eda6 <scalbn+0xae>
 800ed30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ed34:	428a      	cmp	r2, r1
 800ed36:	d10c      	bne.n	800ed52 <scalbn+0x5a>
 800ed38:	ee10 2a10 	vmov	r2, s0
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	4629      	mov	r1, r5
 800ed40:	f7f1 fab4 	bl	80002ac <__adddf3>
 800ed44:	4604      	mov	r4, r0
 800ed46:	460d      	mov	r5, r1
 800ed48:	e019      	b.n	800ed7e <scalbn+0x86>
 800ed4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ed4e:	460b      	mov	r3, r1
 800ed50:	3a36      	subs	r2, #54	; 0x36
 800ed52:	4432      	add	r2, r6
 800ed54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ed58:	428a      	cmp	r2, r1
 800ed5a:	dd08      	ble.n	800ed6e <scalbn+0x76>
 800ed5c:	2d00      	cmp	r5, #0
 800ed5e:	a120      	add	r1, pc, #128	; (adr r1, 800ede0 <scalbn+0xe8>)
 800ed60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed64:	da1c      	bge.n	800eda0 <scalbn+0xa8>
 800ed66:	a120      	add	r1, pc, #128	; (adr r1, 800ede8 <scalbn+0xf0>)
 800ed68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed6c:	e018      	b.n	800eda0 <scalbn+0xa8>
 800ed6e:	2a00      	cmp	r2, #0
 800ed70:	dd08      	ble.n	800ed84 <scalbn+0x8c>
 800ed72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ed76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ed7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ed7e:	ec45 4b10 	vmov	d0, r4, r5
 800ed82:	bd70      	pop	{r4, r5, r6, pc}
 800ed84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ed88:	da19      	bge.n	800edbe <scalbn+0xc6>
 800ed8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ed8e:	429e      	cmp	r6, r3
 800ed90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ed94:	dd0a      	ble.n	800edac <scalbn+0xb4>
 800ed96:	a112      	add	r1, pc, #72	; (adr r1, 800ede0 <scalbn+0xe8>)
 800ed98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d1e2      	bne.n	800ed66 <scalbn+0x6e>
 800eda0:	a30f      	add	r3, pc, #60	; (adr r3, 800ede0 <scalbn+0xe8>)
 800eda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda6:	f7f1 fc37 	bl	8000618 <__aeabi_dmul>
 800edaa:	e7cb      	b.n	800ed44 <scalbn+0x4c>
 800edac:	a10a      	add	r1, pc, #40	; (adr r1, 800edd8 <scalbn+0xe0>)
 800edae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d0b8      	beq.n	800ed28 <scalbn+0x30>
 800edb6:	a10e      	add	r1, pc, #56	; (adr r1, 800edf0 <scalbn+0xf8>)
 800edb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edbc:	e7b4      	b.n	800ed28 <scalbn+0x30>
 800edbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800edc2:	3236      	adds	r2, #54	; 0x36
 800edc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800edc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800edcc:	4620      	mov	r0, r4
 800edce:	4b0c      	ldr	r3, [pc, #48]	; (800ee00 <scalbn+0x108>)
 800edd0:	2200      	movs	r2, #0
 800edd2:	e7e8      	b.n	800eda6 <scalbn+0xae>
 800edd4:	f3af 8000 	nop.w
 800edd8:	c2f8f359 	.word	0xc2f8f359
 800eddc:	01a56e1f 	.word	0x01a56e1f
 800ede0:	8800759c 	.word	0x8800759c
 800ede4:	7e37e43c 	.word	0x7e37e43c
 800ede8:	8800759c 	.word	0x8800759c
 800edec:	fe37e43c 	.word	0xfe37e43c
 800edf0:	c2f8f359 	.word	0xc2f8f359
 800edf4:	81a56e1f 	.word	0x81a56e1f
 800edf8:	43500000 	.word	0x43500000
 800edfc:	ffff3cb0 	.word	0xffff3cb0
 800ee00:	3c900000 	.word	0x3c900000

0800ee04 <_init>:
 800ee04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee06:	bf00      	nop
 800ee08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee0a:	bc08      	pop	{r3}
 800ee0c:	469e      	mov	lr, r3
 800ee0e:	4770      	bx	lr

0800ee10 <_fini>:
 800ee10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee12:	bf00      	nop
 800ee14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee16:	bc08      	pop	{r3}
 800ee18:	469e      	mov	lr, r3
 800ee1a:	4770      	bx	lr
